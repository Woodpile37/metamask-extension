diff --git a/dist/EtherscanRemoteTransactionSource.d.ts.map b/dist/EtherscanRemoteTransactionSource.d.ts.map
deleted file mode 100644
index 9a28bf567caa2b9292b40d2a1a582808288dbbdb..0000000000000000000000000000000000000000
--- a/dist/EtherscanRemoteTransactionSource.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"EtherscanRemoteTransactionSource.d.ts","sourceRoot":"","sources":["../src/EtherscanRemoteTransactionSource.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAiB3C,OAAO,KAAK,EACV,uBAAuB,EACvB,8BAA8B,EAC9B,eAAe,EAChB,MAAM,SAAS,CAAC;AAGjB;;GAEG;AACH,qBAAa,gCACX,YAAW,uBAAuB;;gBAMtB,EACV,qBAAqB,GACtB,GAAE;QAAE,qBAAqB,CAAC,EAAE,OAAO,CAAA;KAAO;IAK3C,kBAAkB,CAAC,OAAO,EAAE,GAAG,GAAG,OAAO;IAIzC,sBAAsB,IAAI,MAAM,EAAE;IAI5B,iBAAiB,CACrB,OAAO,EAAE,8BAA8B,GACtC,OAAO,CAAC,eAAe,EAAE,CAAC;CAkI9B"}
\ No newline at end of file
diff --git a/dist/EtherscanRemoteTransactionSource.js.map b/dist/EtherscanRemoteTransactionSource.js.map
deleted file mode 100644
index 4b10444cf000f8873da3e37c7b5cc22dc2c507c9..0000000000000000000000000000000000000000
--- a/dist/EtherscanRemoteTransactionSource.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"EtherscanRemoteTransactionSource.js","sourceRoot":"","sources":["../src/EtherscanRemoteTransactionSource.ts"],"names":[],"mappings":"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","sourcesContent":["import { BNToHex } from '@metamask/controller-utils';\nimport type { Hex } from '@metamask/utils';\nimport { BN } from 'ethereumjs-util';\nimport { v1 as random } from 'uuid';\n\nimport { ETHERSCAN_SUPPORTED_NETWORKS } from './constants';\nimport type {\n  EtherscanTokenTransactionMeta,\n  EtherscanTransactionMeta,\n  EtherscanTransactionMetaBase,\n  EtherscanTransactionRequest,\n  EtherscanTransactionResponse,\n} from './etherscan';\nimport {\n  fetchEtherscanTokenTransactions,\n  fetchEtherscanTransactions,\n} from './etherscan';\nimport { incomingTransactionsLogger as log } from './logger';\nimport type {\n  RemoteTransactionSource,\n  RemoteTransactionSourceRequest,\n  TransactionMeta,\n} from './types';\nimport { TransactionStatus } from './types';\n\n/**\n * A RemoteTransactionSource that fetches transaction data from Etherscan.\n */\nexport class EtherscanRemoteTransactionSource\n  implements RemoteTransactionSource\n{\n  #includeTokenTransfers: boolean;\n\n  #isTokenRequestPending: boolean;\n\n  constructor({\n    includeTokenTransfers,\n  }: { includeTokenTransfers?: boolean } = {}) {\n    this.#includeTokenTransfers = includeTokenTransfers ?? true;\n    this.#isTokenRequestPending = false;\n  }\n\n  isSupportedNetwork(chainId: Hex): boolean {\n    return Object.keys(ETHERSCAN_SUPPORTED_NETWORKS).includes(chainId);\n  }\n\n  getLastBlockVariations(): string[] {\n    return [this.#isTokenRequestPending ? 'token' : 'normal'];\n  }\n\n  async fetchTransactions(\n    request: RemoteTransactionSourceRequest,\n  ): Promise<TransactionMeta[]> {\n    const etherscanRequest: EtherscanTransactionRequest = {\n      ...request,\n      chainId: request.currentChainId,\n    };\n\n    const transactions = this.#isTokenRequestPending\n      ? await this.#fetchTokenTransactions(request, etherscanRequest)\n      : await this.#fetchNormalTransactions(request, etherscanRequest);\n\n    if (this.#includeTokenTransfers) {\n      this.#isTokenRequestPending = !this.#isTokenRequestPending;\n    }\n\n    return transactions;\n  }\n\n  #fetchNormalTransactions = async (\n    request: RemoteTransactionSourceRequest,\n    etherscanRequest: EtherscanTransactionRequest,\n  ) => {\n    const { currentChainId } = request;\n\n    const etherscanTransactions = await fetchEtherscanTransactions(\n      etherscanRequest,\n    );\n\n    return this.#getResponseTransactions(etherscanTransactions).map((tx) =>\n      this.#normalizeTransaction(tx, currentChainId),\n    );\n  };\n\n  #fetchTokenTransactions = async (\n    request: RemoteTransactionSourceRequest,\n    etherscanRequest: EtherscanTransactionRequest,\n  ) => {\n    const { currentChainId } = request;\n\n    const etherscanTransactions = await fetchEtherscanTokenTransactions(\n      etherscanRequest,\n    );\n\n    return this.#getResponseTransactions(etherscanTransactions).map((tx) =>\n      this.#normalizeTokenTransaction(tx, currentChainId),\n    );\n  };\n\n  #getResponseTransactions<T extends EtherscanTransactionMetaBase>(\n    response: EtherscanTransactionResponse<T>,\n  ): T[] {\n    let result = response.result as T[];\n\n    if (response.status === '0') {\n      result = [];\n\n      if (response.result.length) {\n        log('Ignored Etherscan request error', {\n          message: response.result,\n          type: this.#isTokenRequestPending ? 'token' : 'normal',\n        });\n      }\n    }\n\n    return result;\n  }\n\n  #normalizeTransaction(\n    txMeta: EtherscanTransactionMeta,\n    currentChainId: Hex,\n  ): TransactionMeta {\n    const base = this.#normalizeTransactionBase(txMeta, currentChainId);\n\n    return {\n      ...base,\n      txParams: {\n        ...base.txParams,\n        data: txMeta.input,\n      },\n      ...(txMeta.isError === '0'\n        ? { status: TransactionStatus.confirmed }\n        : {\n            error: new Error('Transaction failed'),\n            status: TransactionStatus.failed,\n          }),\n    };\n  }\n\n  #normalizeTokenTransaction(\n    txMeta: EtherscanTokenTransactionMeta,\n    currentChainId: Hex,\n  ): TransactionMeta {\n    const base = this.#normalizeTransactionBase(txMeta, currentChainId);\n\n    return {\n      ...base,\n      isTransfer: true,\n      transferInformation: {\n        contractAddress: txMeta.contractAddress,\n        decimals: Number(txMeta.tokenDecimal),\n        symbol: txMeta.tokenSymbol,\n      },\n    };\n  }\n\n  #normalizeTransactionBase(\n    txMeta: EtherscanTransactionMetaBase,\n    currentChainId: Hex,\n  ): TransactionMeta {\n    const time = parseInt(txMeta.timeStamp, 10) * 1000;\n\n    return {\n      blockNumber: txMeta.blockNumber,\n      chainId: currentChainId,\n      hash: txMeta.hash,\n      id: random({ msecs: time }),\n      status: TransactionStatus.confirmed,\n      time,\n      txParams: {\n        chainId: currentChainId,\n        from: txMeta.from,\n        gas: BNToHex(new BN(txMeta.gas)),\n        gasPrice: BNToHex(new BN(txMeta.gasPrice)),\n        gasUsed: BNToHex(new BN(txMeta.gasUsed)),\n        nonce: BNToHex(new BN(txMeta.nonce)),\n        to: txMeta.to,\n        value: BNToHex(new BN(txMeta.value)),\n      },\n      verifiedOnBlockchain: false,\n    };\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/IncomingTransactionHelper.d.ts.map b/dist/IncomingTransactionHelper.d.ts.map
deleted file mode 100644
index 5d3ae50b9515bfc9b770f1ec3b08318d251145be..0000000000000000000000000000000000000000
--- a/dist/IncomingTransactionHelper.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"IncomingTransactionHelper.d.ts","sourceRoot":"","sources":["../src/IncomingTransactionHelper.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,EAAE,YAAY,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAC/E,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAE3C,OAAO,YAAY,MAAM,QAAQ,CAAC;AAGlC,OAAO,KAAK,EAAE,uBAAuB,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AASxE,qBAAa,yBAAyB;;IACpC,GAAG,EAAE,YAAY,CAAC;gBA4BN,EACV,YAAY,EACZ,iBAAiB,EACjB,0BAA0B,EAC1B,oBAAoB,EACpB,eAAe,EACf,SAAS,EACT,kBAAkB,EAClB,uBAAuB,EACvB,gBAAgB,EAChB,kBAAkB,GACnB,EAAE;QACD,YAAY,EAAE,YAAY,CAAC;QAC3B,iBAAiB,EAAE,MAAM,MAAM,CAAC;QAChC,0BAA0B,EAAE,MAAM,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACzD,oBAAoB,CAAC,EAAE,MAAM,eAAe,EAAE,CAAC;QAC/C,eAAe,EAAE,MAAM,YAAY,CAAC;QACpC,SAAS,CAAC,EAAE,MAAM,OAAO,CAAC;QAC1B,kBAAkB,CAAC,EAAE,OAAO,CAAC;QAC7B,uBAAuB,EAAE,uBAAuB,CAAC;QACjD,gBAAgB,CAAC,EAAE,MAAM,CAAC;QAC1B,kBAAkB,CAAC,EAAE,OAAO,CAAC;KAC9B;IA0BD,KAAK;IAaL,IAAI;IAKE,MAAM,CAAC,oBAAoB,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC;CAmMxD"}
\ No newline at end of file
diff --git a/dist/IncomingTransactionHelper.js.map b/dist/IncomingTransactionHelper.js.map
deleted file mode 100644
index a45b30c1572f248d2c7ec6527b2dfa04f10ba735..0000000000000000000000000000000000000000
--- a/dist/IncomingTransactionHelper.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"IncomingTransactionHelper.js","sourceRoot":"","sources":["../src/IncomingTransactionHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BlockTracker, NetworkState } from '@metamask/network-controller';\nimport type { Hex } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\nimport EventEmitter from 'events';\n\nimport { incomingTransactionsLogger as log } from './logger';\nimport type { RemoteTransactionSource, TransactionMeta } from './types';\n\nconst RECENT_HISTORY_BLOCK_RANGE = 10;\n\nconst UPDATE_CHECKS: ((txMeta: TransactionMeta) => any)[] = [\n  (txMeta) => txMeta.status,\n  (txMeta) => txMeta.txParams.gasUsed,\n];\n\nexport class IncomingTransactionHelper {\n  hub: EventEmitter;\n\n  #blockTracker: BlockTracker;\n\n  #getCurrentAccount: () => string;\n\n  #getLastFetchedBlockNumbers: () => Record<string, number>;\n\n  #getLocalTransactions: () => TransactionMeta[];\n\n  #getNetworkState: () => NetworkState;\n\n  #isEnabled: () => boolean;\n\n  #isRunning: boolean;\n\n  #mutex = new Mutex();\n\n  #onLatestBlock: (blockNumberHex: Hex) => Promise<void>;\n\n  #queryEntireHistory: boolean;\n\n  #remoteTransactionSource: RemoteTransactionSource;\n\n  #transactionLimit?: number;\n\n  #updateTransactions: boolean;\n\n  constructor({\n    blockTracker,\n    getCurrentAccount,\n    getLastFetchedBlockNumbers,\n    getLocalTransactions,\n    getNetworkState,\n    isEnabled,\n    queryEntireHistory,\n    remoteTransactionSource,\n    transactionLimit,\n    updateTransactions,\n  }: {\n    blockTracker: BlockTracker;\n    getCurrentAccount: () => string;\n    getLastFetchedBlockNumbers: () => Record<string, number>;\n    getLocalTransactions?: () => TransactionMeta[];\n    getNetworkState: () => NetworkState;\n    isEnabled?: () => boolean;\n    queryEntireHistory?: boolean;\n    remoteTransactionSource: RemoteTransactionSource;\n    transactionLimit?: number;\n    updateTransactions?: boolean;\n  }) {\n    this.hub = new EventEmitter();\n\n    this.#blockTracker = blockTracker;\n    this.#getCurrentAccount = getCurrentAccount;\n    this.#getLastFetchedBlockNumbers = getLastFetchedBlockNumbers;\n    this.#getLocalTransactions = getLocalTransactions || (() => []);\n    this.#getNetworkState = getNetworkState;\n    this.#isEnabled = isEnabled ?? (() => true);\n    this.#isRunning = false;\n    this.#queryEntireHistory = queryEntireHistory ?? true;\n    this.#remoteTransactionSource = remoteTransactionSource;\n    this.#transactionLimit = transactionLimit;\n    this.#updateTransactions = updateTransactions ?? false;\n\n    // Using a property instead of a method to provide a listener reference\n    // with the correct scope that we can remove later if stopped.\n    this.#onLatestBlock = async (blockNumberHex: Hex) => {\n      try {\n        await this.update(blockNumberHex);\n      } catch (error) {\n        console.error('Error while checking incoming transactions', error);\n      }\n    };\n  }\n\n  start() {\n    if (this.#isRunning) {\n      return;\n    }\n\n    if (!this.#canStart()) {\n      return;\n    }\n\n    this.#blockTracker.addListener('latest', this.#onLatestBlock);\n    this.#isRunning = true;\n  }\n\n  stop() {\n    this.#blockTracker.removeListener('latest', this.#onLatestBlock);\n    this.#isRunning = false;\n  }\n\n  async update(latestBlockNumberHex?: Hex): Promise<void> {\n    const releaseLock = await this.#mutex.acquire();\n\n    log('Checking for incoming transactions');\n\n    try {\n      if (!this.#canStart()) {\n        return;\n      }\n\n      const latestBlockNumber = parseInt(\n        latestBlockNumberHex || (await this.#blockTracker.getLatestBlock()),\n        16,\n      );\n\n      const additionalLastFetchedKeys =\n        this.#remoteTransactionSource.getLastBlockVariations?.() ?? [];\n\n      const fromBlock = this.#getFromBlock(\n        latestBlockNumber,\n        additionalLastFetchedKeys,\n      );\n\n      const address = this.#getCurrentAccount();\n      const currentChainId = this.#getCurrentChainId();\n\n      let remoteTransactions = [];\n\n      try {\n        remoteTransactions =\n          await this.#remoteTransactionSource.fetchTransactions({\n            address,\n            currentChainId,\n            fromBlock,\n            limit: this.#transactionLimit,\n          });\n      } catch (error: any) {\n        log('Error while fetching remote transactions', error);\n        return;\n      }\n\n      if (!this.#updateTransactions) {\n        remoteTransactions = remoteTransactions.filter(\n          (tx) => tx.txParams.to?.toLowerCase() === address.toLowerCase(),\n        );\n      }\n\n      const localTransactions = !this.#updateTransactions\n        ? []\n        : this.#getLocalTransactions();\n\n      const newTransactions = this.#getNewTransactions(\n        remoteTransactions,\n        localTransactions,\n      );\n\n      const updatedTransactions = this.#getUpdatedTransactions(\n        remoteTransactions,\n        localTransactions,\n      );\n\n      if (newTransactions.length > 0 || updatedTransactions.length > 0) {\n        this.#sortTransactionsByTime(newTransactions);\n        this.#sortTransactionsByTime(updatedTransactions);\n\n        log('Found incoming transactions', {\n          new: newTransactions,\n          updated: updatedTransactions,\n        });\n\n        this.hub.emit('transactions', {\n          added: newTransactions,\n          updated: updatedTransactions,\n        });\n      }\n\n      this.#updateLastFetchedBlockNumber(\n        remoteTransactions,\n        additionalLastFetchedKeys,\n      );\n    } finally {\n      releaseLock();\n    }\n  }\n\n  #sortTransactionsByTime(transactions: TransactionMeta[]) {\n    transactions.sort((a, b) => (a.time < b.time ? -1 : 1));\n  }\n\n  #getNewTransactions(\n    remoteTxs: TransactionMeta[],\n    localTxs: TransactionMeta[],\n  ): TransactionMeta[] {\n    return remoteTxs.filter(\n      (tx) => !localTxs.some(({ hash }) => hash === tx.hash),\n    );\n  }\n\n  #getUpdatedTransactions(\n    remoteTxs: TransactionMeta[],\n    localTxs: TransactionMeta[],\n  ): TransactionMeta[] {\n    return remoteTxs.filter((remoteTx) =>\n      localTxs.some(\n        (localTx) =>\n          remoteTx.hash === localTx.hash &&\n          this.#isTransactionOutdated(remoteTx, localTx),\n      ),\n    );\n  }\n\n  #isTransactionOutdated(\n    remoteTx: TransactionMeta,\n    localTx: TransactionMeta,\n  ): boolean {\n    return UPDATE_CHECKS.some(\n      (getValue) => getValue(remoteTx) !== getValue(localTx),\n    );\n  }\n\n  #getFromBlock(\n    latestBlockNumber: number,\n    additionalKeys: string[],\n  ): number | undefined {\n    const lastFetchedKey = this.#getBlockNumberKey(additionalKeys);\n\n    const lastFetchedBlockNumber =\n      this.#getLastFetchedBlockNumbers()[lastFetchedKey];\n\n    if (lastFetchedBlockNumber) {\n      return lastFetchedBlockNumber + 1;\n    }\n\n    return this.#queryEntireHistory\n      ? undefined\n      : latestBlockNumber - RECENT_HISTORY_BLOCK_RANGE;\n  }\n\n  #updateLastFetchedBlockNumber(\n    remoteTxs: TransactionMeta[],\n    additionalKeys: string[],\n  ) {\n    let lastFetchedBlockNumber = -1;\n\n    for (const tx of remoteTxs) {\n      const currentBlockNumberValue = tx.blockNumber\n        ? parseInt(tx.blockNumber, 10)\n        : -1;\n\n      lastFetchedBlockNumber = Math.max(\n        lastFetchedBlockNumber,\n        currentBlockNumberValue,\n      );\n    }\n\n    if (lastFetchedBlockNumber === -1) {\n      return;\n    }\n\n    const lastFetchedKey = this.#getBlockNumberKey(additionalKeys);\n    const lastFetchedBlockNumbers = this.#getLastFetchedBlockNumbers();\n    const previousValue = lastFetchedBlockNumbers[lastFetchedKey];\n\n    if (previousValue >= lastFetchedBlockNumber) {\n      return;\n    }\n\n    lastFetchedBlockNumbers[lastFetchedKey] = lastFetchedBlockNumber;\n\n    this.hub.emit('updatedLastFetchedBlockNumbers', {\n      lastFetchedBlockNumbers,\n      blockNumber: lastFetchedBlockNumber,\n    });\n  }\n\n  #getBlockNumberKey(additionalKeys: string[]): string {\n    const currentChainId = this.#getCurrentChainId();\n    const currentAccount = this.#getCurrentAccount().toLowerCase();\n\n    return [currentChainId, currentAccount, ...additionalKeys].join('#');\n  }\n\n  #canStart(): boolean {\n    const isEnabled = this.#isEnabled();\n    const currentChainId = this.#getCurrentChainId();\n\n    const isSupportedNetwork =\n      this.#remoteTransactionSource.isSupportedNetwork(currentChainId);\n\n    return isEnabled && isSupportedNetwork;\n  }\n\n  #getCurrentChainId(): Hex {\n    return this.#getNetworkState().providerConfig.chainId;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/PendingTransactionTracker.d.ts b/dist/PendingTransactionTracker.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..999e1e91222b145091b59ee432f09470b401ef1f
--- /dev/null
+++ b/dist/PendingTransactionTracker.d.ts
@@ -0,0 +1,32 @@
+/// <reference types="node" />
+import type EthQuery from '@metamask/eth-query';
+import type { BlockTracker } from '@metamask/network-controller';
+import EventEmitter from 'events';
+import type { TransactionState } from './TransactionController';
+import type { TransactionMeta } from './types';
+declare type Events = {
+    'transaction-confirmed': [txMeta: TransactionMeta];
+    'transaction-dropped': [txMeta: TransactionMeta];
+    'transaction-failed': [txMeta: TransactionMeta, error: Error];
+    'transaction-updated': [txMeta: TransactionMeta, note: string];
+};
+export interface PendingTransactionTrackerEventEmitter extends EventEmitter {
+    on<T extends keyof Events>(eventName: T, listener: (...args: Events[T]) => void): this;
+    emit<T extends keyof Events>(eventName: T, ...args: Events[T]): boolean;
+}
+export declare class PendingTransactionTracker {
+    #private;
+    hub: PendingTransactionTrackerEventEmitter;
+    constructor({ approveTransaction, blockTracker, getChainId, getEthQuery, getTransactions, isResubmitEnabled, onStateChange, publishTransaction, }: {
+        approveTransaction: (transactionId: string) => Promise<void>;
+        blockTracker: BlockTracker;
+        getChainId: () => string;
+        getEthQuery: () => EthQuery;
+        getTransactions: () => TransactionMeta[];
+        isResubmitEnabled?: boolean;
+        onStateChange: (listener: (state: TransactionState) => void) => void;
+        publishTransaction: (rawTx: string) => Promise<string>;
+    });
+}
+export {};
+//# sourceMappingURL=PendingTransactionTracker.d.ts.map
\ No newline at end of file
diff --git a/dist/PendingTransactionTracker.js b/dist/PendingTransactionTracker.js
new file mode 100644
index 0000000000000000000000000000000000000000..b08d35e6572fdbe282ec43f2a337201503adf28d
--- /dev/null
+++ b/dist/PendingTransactionTracker.js
@@ -0,0 +1,308 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
+    if (kind === "m") throw new TypeError("Private method is not writable");
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
+    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
+};
+var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
+    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
+};
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+var _PendingTransactionTracker_instances, _PendingTransactionTracker_approveTransaction, _PendingTransactionTracker_blockTracker, _PendingTransactionTracker_droppedBlockCountByHash, _PendingTransactionTracker_getChainId, _PendingTransactionTracker_getEthQuery, _PendingTransactionTracker_getTransactions, _PendingTransactionTracker_isResubmitEnabled, _PendingTransactionTracker_listener, _PendingTransactionTracker_onStateChange, _PendingTransactionTracker_publishTransaction, _PendingTransactionTracker_running, _PendingTransactionTracker_start, _PendingTransactionTracker_stop, _PendingTransactionTracker_onLatestBlock, _PendingTransactionTracker_checkTransactions, _PendingTransactionTracker_resubmitTransactions, _PendingTransactionTracker_isKnownTransactionError, _PendingTransactionTracker_resubmitTransaction, _PendingTransactionTracker_isResubmitDue, _PendingTransactionTracker_checkTransaction, _PendingTransactionTracker_onTransactionConfirmed, _PendingTransactionTracker_isTransactionDropped, _PendingTransactionTracker_isNonceTaken, _PendingTransactionTracker_getPendingTransactions, _PendingTransactionTracker_warnTransaction, _PendingTransactionTracker_failTransaction, _PendingTransactionTracker_dropTransaction, _PendingTransactionTracker_updateTransaction, _PendingTransactionTracker_getTransactionReceipt, _PendingTransactionTracker_getBlockByHash, _PendingTransactionTracker_getNetworkTransactionCount;
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.PendingTransactionTracker = void 0;
+const controller_utils_1 = require("@metamask/controller-utils");
+const events_1 = __importDefault(require("events"));
+const logger_1 = require("./logger");
+const types_1 = require("./types");
+/**
+ * We wait this many blocks before emitting a 'transaction-dropped' event
+ * This is because we could be talking to a node that is out of sync
+ */
+const DROPPED_BLOCK_COUNT = 3;
+const MAX_RETRY_BLOCK_DISTANCE = 50;
+const KNOWN_TRANSACTION_ERRORS = [
+    'replacement transaction underpriced',
+    'known transaction',
+    'gas price too low to replace',
+    'transaction with the same hash was already imported',
+    'gateway timeout',
+    'nonce too low',
+];
+class PendingTransactionTracker {
+    constructor({ approveTransaction, blockTracker, getChainId, getEthQuery, getTransactions, isResubmitEnabled, onStateChange, publishTransaction, }) {
+        _PendingTransactionTracker_instances.add(this);
+        _PendingTransactionTracker_approveTransaction.set(this, void 0);
+        _PendingTransactionTracker_blockTracker.set(this, void 0);
+        _PendingTransactionTracker_droppedBlockCountByHash.set(this, void 0);
+        _PendingTransactionTracker_getChainId.set(this, void 0);
+        _PendingTransactionTracker_getEthQuery.set(this, void 0);
+        _PendingTransactionTracker_getTransactions.set(this, void 0);
+        _PendingTransactionTracker_isResubmitEnabled.set(this, void 0);
+        _PendingTransactionTracker_listener.set(this, void 0);
+        _PendingTransactionTracker_onStateChange.set(this, void 0);
+        _PendingTransactionTracker_publishTransaction.set(this, void 0);
+        _PendingTransactionTracker_running.set(this, void 0);
+        this.hub = new events_1.default();
+        __classPrivateFieldSet(this, _PendingTransactionTracker_approveTransaction, approveTransaction, "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_blockTracker, blockTracker, "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_droppedBlockCountByHash, new Map(), "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_getChainId, getChainId, "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_getEthQuery, getEthQuery, "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_getTransactions, getTransactions, "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_isResubmitEnabled, isResubmitEnabled !== null && isResubmitEnabled !== void 0 ? isResubmitEnabled : true, "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_listener, __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_onLatestBlock).bind(this), "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_onStateChange, onStateChange, "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_publishTransaction, publishTransaction, "f");
+        __classPrivateFieldSet(this, _PendingTransactionTracker_running, false, "f");
+        __classPrivateFieldGet(this, _PendingTransactionTracker_onStateChange, "f").call(this, (state) => {
+            const pendingTransactions = __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_getPendingTransactions).call(this, state.transactions);
+            if (pendingTransactions.length) {
+                __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_start).call(this);
+            }
+            else {
+                __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_stop).call(this);
+            }
+        });
+    }
+}
+exports.PendingTransactionTracker = PendingTransactionTracker;
+_PendingTransactionTracker_approveTransaction = new WeakMap(), _PendingTransactionTracker_blockTracker = new WeakMap(), _PendingTransactionTracker_droppedBlockCountByHash = new WeakMap(), _PendingTransactionTracker_getChainId = new WeakMap(), _PendingTransactionTracker_getEthQuery = new WeakMap(), _PendingTransactionTracker_getTransactions = new WeakMap(), _PendingTransactionTracker_isResubmitEnabled = new WeakMap(), _PendingTransactionTracker_listener = new WeakMap(), _PendingTransactionTracker_onStateChange = new WeakMap(), _PendingTransactionTracker_publishTransaction = new WeakMap(), _PendingTransactionTracker_running = new WeakMap(), _PendingTransactionTracker_instances = new WeakSet(), _PendingTransactionTracker_start = function _PendingTransactionTracker_start() {
+    if (__classPrivateFieldGet(this, _PendingTransactionTracker_running, "f")) {
+        return;
+    }
+    __classPrivateFieldGet(this, _PendingTransactionTracker_blockTracker, "f").on('latest', __classPrivateFieldGet(this, _PendingTransactionTracker_listener, "f"));
+    __classPrivateFieldSet(this, _PendingTransactionTracker_running, true, "f");
+    (0, logger_1.pendingTransactionsLogger)('Started polling');
+}, _PendingTransactionTracker_stop = function _PendingTransactionTracker_stop() {
+    if (!__classPrivateFieldGet(this, _PendingTransactionTracker_running, "f")) {
+        return;
+    }
+    __classPrivateFieldGet(this, _PendingTransactionTracker_blockTracker, "f").removeListener('latest', __classPrivateFieldGet(this, _PendingTransactionTracker_listener, "f"));
+    __classPrivateFieldSet(this, _PendingTransactionTracker_running, false, "f");
+    (0, logger_1.pendingTransactionsLogger)('Stopped polling');
+}, _PendingTransactionTracker_onLatestBlock = function _PendingTransactionTracker_onLatestBlock(latestBlockNumber) {
+    return __awaiter(this, void 0, void 0, function* () {
+        try {
+            yield __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_checkTransactions).call(this);
+        }
+        catch (error) {
+            /* istanbul ignore next */
+            (0, logger_1.pendingTransactionsLogger)('Failed to check transactions', error);
+        }
+        try {
+            yield __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_resubmitTransactions).call(this, latestBlockNumber);
+        }
+        catch (error) {
+            /* istanbul ignore next */
+            (0, logger_1.pendingTransactionsLogger)('Failed to resubmit transactions', error);
+        }
+    });
+}, _PendingTransactionTracker_checkTransactions = function _PendingTransactionTracker_checkTransactions() {
+    return __awaiter(this, void 0, void 0, function* () {
+        (0, logger_1.pendingTransactionsLogger)('Checking transactions');
+        const pendingTransactions = __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_getPendingTransactions).call(this);
+        if (!pendingTransactions.length) {
+            return;
+        }
+        (0, logger_1.pendingTransactionsLogger)('Found pending transactions to check', {
+            count: pendingTransactions.length,
+            ids: pendingTransactions.map((tx) => tx.id),
+        });
+        yield Promise.all(pendingTransactions.map((tx) => __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_checkTransaction).call(this, tx)));
+    });
+}, _PendingTransactionTracker_resubmitTransactions = function _PendingTransactionTracker_resubmitTransactions(latestBlockNumber) {
+    var _a, _b;
+    return __awaiter(this, void 0, void 0, function* () {
+        if (!__classPrivateFieldGet(this, _PendingTransactionTracker_isResubmitEnabled, "f")) {
+            return;
+        }
+        (0, logger_1.pendingTransactionsLogger)('Resubmitting transactions');
+        const pendingTransactions = __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_getPendingTransactions).call(this);
+        if (!pendingTransactions.length) {
+            return;
+        }
+        (0, logger_1.pendingTransactionsLogger)('Found pending transactions to resubmit', {
+            count: pendingTransactions.length,
+            ids: pendingTransactions.map((tx) => tx.id),
+        });
+        for (const txMeta of pendingTransactions) {
+            try {
+                yield __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_resubmitTransaction).call(this, txMeta, latestBlockNumber);
+            }
+            catch (error) {
+                /* istanbul ignore next */
+                const errorMessage = ((_b = (_a = error.value) === null || _a === void 0 ? void 0 : _a.message) === null || _b === void 0 ? void 0 : _b.toLowerCase()) || error.message.toLowerCase();
+                if (__classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_isKnownTransactionError).call(this, errorMessage)) {
+                    (0, logger_1.pendingTransactionsLogger)('Ignoring known transaction error', errorMessage);
+                    return;
+                }
+                __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_warnTransaction).call(this, txMeta, error.message, 'There was an error when resubmitting this transaction.');
+            }
+        }
+    });
+}, _PendingTransactionTracker_isKnownTransactionError = function _PendingTransactionTracker_isKnownTransactionError(errorMessage) {
+    return KNOWN_TRANSACTION_ERRORS.some((knownError) => errorMessage.includes(knownError));
+}, _PendingTransactionTracker_resubmitTransaction = function _PendingTransactionTracker_resubmitTransaction(txMeta, latestBlockNumber) {
+    var _a;
+    return __awaiter(this, void 0, void 0, function* () {
+        if (!__classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_isResubmitDue).call(this, txMeta, latestBlockNumber)) {
+            return;
+        }
+        (0, logger_1.pendingTransactionsLogger)('Resubmitting transaction', txMeta.id);
+        const { rawTx } = txMeta;
+        if (!(rawTx === null || rawTx === void 0 ? void 0 : rawTx.length)) {
+            (0, logger_1.pendingTransactionsLogger)('Approving transaction as no raw value');
+            yield __classPrivateFieldGet(this, _PendingTransactionTracker_approveTransaction, "f").call(this, txMeta.id);
+            return;
+        }
+        yield __classPrivateFieldGet(this, _PendingTransactionTracker_publishTransaction, "f").call(this, rawTx);
+        txMeta.retryCount = ((_a = txMeta.retryCount) !== null && _a !== void 0 ? _a : 0) + 1;
+        __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_updateTransaction).call(this, txMeta, 'PendingTransactionTracker:transaction-retry - Retry count increased');
+    });
+}, _PendingTransactionTracker_isResubmitDue = function _PendingTransactionTracker_isResubmitDue(txMeta, latestBlockNumber) {
+    if (!txMeta.firstRetryBlockNumber) {
+        txMeta.firstRetryBlockNumber = latestBlockNumber;
+        __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_updateTransaction).call(this, txMeta, 'PendingTransactionTracker:#isResubmitDue - First retry block number set');
+    }
+    const firstRetryBlockNumber = txMeta.firstRetryBlockNumber || latestBlockNumber;
+    const blocksSinceFirstRetry = Number.parseInt(latestBlockNumber, 16) -
+        Number.parseInt(firstRetryBlockNumber, 16);
+    const retryCount = txMeta.retryCount || 0;
+    // Exponential backoff to limit retries at publishing
+    // Capped at ~15 minutes between retries
+    const requiredBlocksSinceFirstRetry = Math.min(MAX_RETRY_BLOCK_DISTANCE, Math.pow(2, retryCount));
+    return blocksSinceFirstRetry >= requiredBlocksSinceFirstRetry;
+}, _PendingTransactionTracker_checkTransaction = function _PendingTransactionTracker_checkTransaction(txMeta) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const { hash, id } = txMeta;
+        if (!hash) {
+            const error = new Error('We had an error while submitting this transaction, please try again.');
+            error.name = 'NoTxHashError';
+            __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_failTransaction).call(this, txMeta, error);
+            return;
+        }
+        if (__classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_isNonceTaken).call(this, txMeta)) {
+            (0, logger_1.pendingTransactionsLogger)('Nonce already taken', id);
+            __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_dropTransaction).call(this, txMeta);
+            return;
+        }
+        try {
+            const receipt = yield __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_getTransactionReceipt).call(this, hash);
+            const isSuccess = (receipt === null || receipt === void 0 ? void 0 : receipt.status) === '0x1';
+            if (receipt && !isSuccess) {
+                (0, logger_1.pendingTransactionsLogger)('Transaction receipt has failed status');
+                __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_failTransaction).call(this, txMeta, new Error('Transaction dropped or replaced'));
+                return;
+            }
+            if ((receipt === null || receipt === void 0 ? void 0 : receipt.blockNumber) && isSuccess) {
+                yield __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_onTransactionConfirmed).call(this, txMeta, receipt);
+                return;
+            }
+        }
+        catch (error) {
+            (0, logger_1.pendingTransactionsLogger)('Failed to check transaction', id, error);
+            __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_warnTransaction).call(this, txMeta, error.message, 'There was a problem loading this transaction.');
+            return;
+        }
+        if (yield __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_isTransactionDropped).call(this, txMeta)) {
+            __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_dropTransaction).call(this, txMeta);
+        }
+    });
+}, _PendingTransactionTracker_onTransactionConfirmed = function _PendingTransactionTracker_onTransactionConfirmed(txMeta, receipt) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const { id } = txMeta;
+        (0, logger_1.pendingTransactionsLogger)('Transaction confirmed', id);
+        const { baseFeePerGas, timestamp: blockTimestamp } = yield __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_getBlockByHash).call(this, receipt.blockHash, false);
+        txMeta.baseFeePerGas = baseFeePerGas;
+        txMeta.blockTimestamp = blockTimestamp;
+        txMeta.status = types_1.TransactionStatus.confirmed;
+        txMeta.txParams.gasUsed = receipt.gasUsed;
+        txMeta.txReceipt = receipt;
+        txMeta.verifiedOnBlockchain = true;
+        __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_updateTransaction).call(this, txMeta, 'PendingTransactionTracker:#onTransactionConfirmed - Transaction confirmed');
+        this.hub.emit('transaction-confirmed', txMeta);
+    });
+}, _PendingTransactionTracker_isTransactionDropped = function _PendingTransactionTracker_isTransactionDropped(txMeta) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const { hash, id, txParams: { nonce, from }, } = txMeta;
+        /* istanbul ignore next */
+        if (!nonce || !hash) {
+            return false;
+        }
+        const networkNextNonceHex = yield __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_getNetworkTransactionCount).call(this, from);
+        const networkNextNonceNumber = parseInt(networkNextNonceHex, 16);
+        const nonceNumber = parseInt(nonce, 16);
+        if (nonceNumber >= networkNextNonceNumber) {
+            return false;
+        }
+        let droppedBlockCount = __classPrivateFieldGet(this, _PendingTransactionTracker_droppedBlockCountByHash, "f").get(hash);
+        if (droppedBlockCount === undefined) {
+            droppedBlockCount = 0;
+            __classPrivateFieldGet(this, _PendingTransactionTracker_droppedBlockCountByHash, "f").set(hash, droppedBlockCount);
+        }
+        if (droppedBlockCount < DROPPED_BLOCK_COUNT) {
+            (0, logger_1.pendingTransactionsLogger)('Incrementing dropped block count', { id, droppedBlockCount });
+            __classPrivateFieldGet(this, _PendingTransactionTracker_droppedBlockCountByHash, "f").set(hash, droppedBlockCount + 1);
+            return false;
+        }
+        (0, logger_1.pendingTransactionsLogger)('Hit dropped block count', id);
+        __classPrivateFieldGet(this, _PendingTransactionTracker_droppedBlockCountByHash, "f").delete(hash);
+        return true;
+    });
+}, _PendingTransactionTracker_isNonceTaken = function _PendingTransactionTracker_isNonceTaken(txMeta) {
+    const { id, txParams } = txMeta;
+    return __classPrivateFieldGet(this, _PendingTransactionTracker_getTransactions, "f").call(this).some((tx) => tx.id !== id &&
+        tx.txParams.from === txParams.from &&
+        tx.status === types_1.TransactionStatus.confirmed &&
+        tx.txParams.nonce === txParams.nonce);
+}, _PendingTransactionTracker_getPendingTransactions = function _PendingTransactionTracker_getPendingTransactions(transactions) {
+    const currentChainId = __classPrivateFieldGet(this, _PendingTransactionTracker_getChainId, "f").call(this);
+    return (transactions !== null && transactions !== void 0 ? transactions : __classPrivateFieldGet(this, _PendingTransactionTracker_getTransactions, "f").call(this)).filter((tx) => tx.status === types_1.TransactionStatus.submitted &&
+        tx.chainId === currentChainId &&
+        !tx.verifiedOnBlockchain);
+}, _PendingTransactionTracker_warnTransaction = function _PendingTransactionTracker_warnTransaction(txMeta, error, message) {
+    txMeta.warning = {
+        error,
+        message,
+    };
+    __classPrivateFieldGet(this, _PendingTransactionTracker_instances, "m", _PendingTransactionTracker_updateTransaction).call(this, txMeta, 'PendingTransactionTracker:#warnTransaction - Warning added');
+}, _PendingTransactionTracker_failTransaction = function _PendingTransactionTracker_failTransaction(txMeta, error) {
+    (0, logger_1.pendingTransactionsLogger)('Transaction failed', txMeta.id, error);
+    this.hub.emit('transaction-failed', txMeta, error);
+}, _PendingTransactionTracker_dropTransaction = function _PendingTransactionTracker_dropTransaction(txMeta) {
+    (0, logger_1.pendingTransactionsLogger)('Transaction dropped', txMeta.id);
+    this.hub.emit('transaction-dropped', txMeta);
+}, _PendingTransactionTracker_updateTransaction = function _PendingTransactionTracker_updateTransaction(txMeta, note) {
+    this.hub.emit('transaction-updated', txMeta, note);
+}, _PendingTransactionTracker_getTransactionReceipt = function _PendingTransactionTracker_getTransactionReceipt(txHash) {
+    return __awaiter(this, void 0, void 0, function* () {
+        return yield (0, controller_utils_1.query)(__classPrivateFieldGet(this, _PendingTransactionTracker_getEthQuery, "f").call(this), 'getTransactionReceipt', [txHash]);
+    });
+}, _PendingTransactionTracker_getBlockByHash = function _PendingTransactionTracker_getBlockByHash(blockHash, includeTransactionDetails) {
+    return __awaiter(this, void 0, void 0, function* () {
+        return yield (0, controller_utils_1.query)(__classPrivateFieldGet(this, _PendingTransactionTracker_getEthQuery, "f").call(this), 'getBlockByHash', [
+            blockHash,
+            includeTransactionDetails,
+        ]);
+    });
+}, _PendingTransactionTracker_getNetworkTransactionCount = function _PendingTransactionTracker_getNetworkTransactionCount(address) {
+    return __awaiter(this, void 0, void 0, function* () {
+        return yield (0, controller_utils_1.query)(__classPrivateFieldGet(this, _PendingTransactionTracker_getEthQuery, "f").call(this), 'getTransactionCount', [address]);
+    });
+};
+//# sourceMappingURL=PendingTransactionTracker.js.map
\ No newline at end of file
diff --git a/dist/TransactionController.d.ts b/dist/TransactionController.d.ts
index d8fa996c21bc45df84598be8aa7f870910184244..22e54f57414eab099a95a5f6b490b0b7196d9d9a 100644
--- a/dist/TransactionController.d.ts
+++ b/dist/TransactionController.d.ts
@@ -4,10 +4,12 @@ import type { TypedTransaction } from '@ethereumjs/tx';
 import type { AddApprovalRequest } from '@metamask/approval-controller';
 import type { BaseConfig, BaseState, RestrictedControllerMessenger } from '@metamask/base-controller';
 import { BaseController } from '@metamask/base-controller';
+import type { GasFeeState } from '@metamask/gas-fee-controller';
 import type { BlockTracker, NetworkState, Provider } from '@metamask/network-controller';
 import type { Hex } from '@metamask/utils';
 import { EventEmitter } from 'events';
-import type { TransactionParams, TransactionMeta, TransactionReceipt, SendFlowHistoryEntry, WalletDevice } from './types';
+import type { NonceLock } from 'nonce-tracker/dist/NonceTracker';
+import type { TransactionParams, TransactionMeta, TransactionReceipt, SecurityProviderRequest, SendFlowHistoryEntry, WalletDevice } from './types';
 import { TransactionType } from './types';
 export declare const HARDFORK = Hardfork.London;
 /**
@@ -30,12 +32,10 @@ export interface FeeMarketEIP1559Values {
  * @type TransactionConfig
  *
  * Transaction controller configuration
- * @property interval - Polling interval used to fetch new currency rate
  * @property provider - Provider used to create a new underlying EthQuery instance
  * @property sign - Method used to sign transactions
  */
 export interface TransactionConfig extends BaseConfig {
-    interval: number;
     sign?: (txParams: TransactionParams, from: string) => Promise<any>;
     txHistoryLimit: number;
 }
@@ -96,13 +96,18 @@ export declare class TransactionController extends BaseController<TransactionCon
     private readonly nonceTracker;
     private registry;
     private readonly provider;
-    private handle?;
+    private readonly handle?;
     private readonly mutex;
     private readonly getNetworkState;
     private readonly getCurrentAccountEIP1559Compatibility;
     private readonly getCurrentNetworkEIP1559Compatibility;
+    private readonly getGasFeeEstimates;
+    private readonly getPermittedAccounts;
+    private readonly getSelectedAddress;
     private readonly messagingSystem;
     private readonly incomingTransactionHelper;
+    private readonly securityProviderRequest?;
+    private readonly pendingTransactionTracker;
     private failTransaction;
     private registryLookup;
     /**
@@ -126,7 +131,9 @@ export declare class TransactionController extends BaseController<TransactionCon
      * @param options.disableSendFlowHistory - Explicitly disable transaction metadata history.
      * @param options.getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.
      * @param options.getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.
+     * @param options.getGasFeeEstimates -
      * @param options.getNetworkState - Gets the state of the network controller.
+     * @param options.getPermittedAccounts - Get accounts that a given origin has permissions for.
      * @param options.getSelectedAddress - Gets the address of the currently selected account.
      * @param options.incomingTransactions - Configuration options for incoming transaction support.
      * @param options.incomingTransactions.includeTokenTransfers - Whether or not to include ERC20 token transfers.
@@ -136,16 +143,19 @@ export declare class TransactionController extends BaseController<TransactionCon
      * @param options.messenger - The controller messenger.
      * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.
      * @param options.provider - The provider used to create the underlying EthQuery instance.
+     * @param options.securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.
      * @param config - Initial options used to configure this controller.
      * @param state - Initial state to set on this controller.
      */
-    constructor({ blockTracker, disableHistory, disableSendFlowHistory, getCurrentAccountEIP1559Compatibility, getCurrentNetworkEIP1559Compatibility, getNetworkState, getSelectedAddress, incomingTransactions, messenger, onNetworkStateChange, provider, }: {
+    constructor({ blockTracker, disableHistory, disableSendFlowHistory, getCurrentAccountEIP1559Compatibility, getCurrentNetworkEIP1559Compatibility, getGasFeeEstimates, getNetworkState, getPermittedAccounts, getSelectedAddress, incomingTransactions, messenger, onNetworkStateChange, provider, securityProviderRequest, }: {
         blockTracker: BlockTracker;
         disableHistory: boolean;
         disableSendFlowHistory: boolean;
         getCurrentAccountEIP1559Compatibility: () => Promise<boolean>;
         getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;
+        getGasFeeEstimates: () => Promise<GasFeeState>;
         getNetworkState: () => NetworkState;
+        getPermittedAccounts: (origin?: string) => Promise<string[]>;
         getSelectedAddress: () => string;
         incomingTransactions: {
             includeTokenTransfers?: boolean;
@@ -156,13 +166,8 @@ export declare class TransactionController extends BaseController<TransactionCon
         messenger: TransactionControllerMessenger;
         onNetworkStateChange: (listener: (state: NetworkState) => void) => void;
         provider: Provider;
+        securityProviderRequest?: SecurityProviderRequest;
     }, config?: Partial<TransactionConfig>, state?: Partial<TransactionState>);
-    /**
-     * Starts a new polling interval.
-     *
-     * @param interval - The polling interval used to fetch new transaction statuses.
-     */
-    poll(interval?: number): Promise<void>;
     /**
      * Handle new method data request.
      *
@@ -179,20 +184,29 @@ export declare class TransactionController extends BaseController<TransactionCon
      * @param opts - Additional options to control how the transaction is added.
      * @param opts.actionId - Unique ID to prevent duplicate requests.
      * @param opts.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.
+     * @param opts.method - RPC method that requested the transaction.
      * @param opts.origin - The origin of the transaction request, such as a dApp hostname.
      * @param opts.requireApproval - Whether the transaction requires approval by the user, defaults to true unless explicitly disabled.
      * @param opts.securityAlertResponse - Response from security validator.
      * @param opts.sendFlowHistory - The sendFlowHistory entries to add.
+     * @param opts.swaps -
+     * @param opts.swaps.hasApproveTx -
+     * @param opts.swaps.meta -
      * @param opts.type - Type of transaction to add, such as 'cancel' or 'swap'.
      * @returns Object containing a promise resolving to the transaction hash if approved.
      */
-    addTransaction(txParams: TransactionParams, { actionId, deviceConfirmedOn, origin, requireApproval, securityAlertResponse, sendFlowHistory, type, }?: {
+    addTransaction(txParams: TransactionParams, { actionId, deviceConfirmedOn, method, origin, requireApproval, securityAlertResponse, sendFlowHistory, swaps, type, }?: {
         actionId?: string;
         deviceConfirmedOn?: WalletDevice;
+        method?: string;
         origin?: string;
         requireApproval?: boolean | undefined;
         securityAlertResponse?: Record<string, unknown>;
         sendFlowHistory?: SendFlowHistoryEntry[];
+        swaps?: {
+            hasApproveTx?: boolean;
+            meta?: any;
+        };
         type?: TransactionType;
     }): Promise<Result>;
     startIncomingTransactionPolling(): void;
@@ -235,18 +249,15 @@ export declare class TransactionController extends BaseController<TransactionCon
      */
     estimateGas(transaction: TransactionParams): Promise<{
         gas: string;
-        gasPrice: any;
-        estimateGasError?: undefined;
-    } | {
-        gas: string;
-        gasPrice: any;
-        estimateGasError: string | undefined;
+        simulationFails: {
+            reason: any;
+            errorKey: any;
+            debug: {
+                blockNumber: string;
+                blockGasLimit: string;
+            };
+        } | undefined;
     }>;
-    /**
-     * Check the status of submitted transactions on the network to determine whether they have
-     * been included in a block. Any that have been included in a block are marked as confirmed.
-     */
-    queryTransactionStatuses(): Promise<void>;
     /**
      * Updates an existing transaction in state.
      *
@@ -323,6 +334,7 @@ export declare class TransactionController extends BaseController<TransactionCon
      * @param transactionId - The ID of the transaction to approve.
      */
     private approveTransaction;
+    private publishTransaction;
     /**
      * Cancels a transaction based on its ID by setting its status to "rejected"
      * and emitting a `<tx.id>:finished` hub event.
@@ -359,23 +371,6 @@ export declare class TransactionController extends BaseController<TransactionCon
      * @returns Whether the transaction is in a final state.
      */
     private isLocalFinalState;
-    /**
-     * Method to verify the state of a transaction using the Blockchain as a source of truth.
-     *
-     * @param meta - The local transaction to verify on the blockchain.
-     * @returns A tuple containing the updated transaction, and whether or not an update was required.
-     */
-    private blockchainTransactionStateReconciler;
-    /**
-     * Method to check if a tx has failed according to their receipt
-     * According to the Web3 docs:
-     * TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.
-     * The receipt is not available for pending transactions and returns null.
-     *
-     * @param txHash - The transaction hash.
-     * @returns Whether the transaction has failed.
-     */
-    private checkTxReceiptStatusIsFailed;
     private requestApproval;
     private getTransaction;
     private getApprovalId;
@@ -431,6 +426,27 @@ export declare class TransactionController extends BaseController<TransactionCon
      */
     private updateTransactionMetaRSV;
     private getEIP1559Compatibility;
+    resetState(): void;
+    clearUnapproved(): void;
+    getNonceLock(address: string): Promise<NonceLock>;
+    updateEditableParams(txId: string, { data, from, to, value, gas, gasPrice, }: {
+        data?: string;
+        from?: string;
+        to?: string;
+        value?: string;
+        gas?: string;
+        gasPrice?: string;
+    }): Promise<TransactionMeta | undefined>;
+    updatePreviousGasParams(txId: string, { maxFeePerGas, maxPriorityFeePerGas, gasLimit, }: {
+        maxFeePerGas?: string;
+        maxPriorityFeePerGas?: string;
+        gasLimit?: string;
+    }): TransactionMeta | undefined;
+    private addTxGasDefaults;
+    private createSwapsTransaction;
+    private updateSwapApprovalTransaction;
+    private updateSwapTransaction;
+    private addPendingTransactionTrackerListeners;
 }
 export default TransactionController;
 //# sourceMappingURL=TransactionController.d.ts.map
\ No newline at end of file
diff --git a/dist/TransactionController.d.ts.map b/dist/TransactionController.d.ts.map
deleted file mode 100644
index 083b07c332887c5dc2bca0074f22794962934600..0000000000000000000000000000000000000000
--- a/dist/TransactionController.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"TransactionController.d.ts","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/TransactionController.js b/dist/TransactionController.js
index bfa28719cf6450321d54123b47563ae0c102f1e4..9ac0b83e6fd4c4dfb0310ccfd63059c9330ec61f 100644
--- a/dist/TransactionController.js
+++ b/dist/TransactionController.js
@@ -28,11 +28,16 @@ const nonce_tracker_1 = __importDefault(require("nonce-tracker"));
 const uuid_1 = require("uuid");
 const EtherscanRemoteTransactionSource_1 = require("./EtherscanRemoteTransactionSource");
 const external_transactions_1 = require("./external-transactions");
+const gas_1 = require("./gas");
+const gas_fees_1 = require("./gas-fees");
 const history_1 = require("./history");
 const IncomingTransactionHelper_1 = require("./IncomingTransactionHelper");
+const logger_1 = require("./logger");
+const PendingTransactionTracker_1 = require("./PendingTransactionTracker");
 const transaction_type_1 = require("./transaction-type");
 const types_1 = require("./types");
 const utils_1 = require("./utils");
+const validation_1 = require("./validation");
 exports.HARDFORK = common_1.Hardfork.London;
 /**
  * Multiplier used to determine a transaction's increased gas fee during cancellation
@@ -59,7 +64,9 @@ class TransactionController extends base_controller_1.BaseController {
      * @param options.disableSendFlowHistory - Explicitly disable transaction metadata history.
      * @param options.getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.
      * @param options.getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.
+     * @param options.getGasFeeEstimates -
      * @param options.getNetworkState - Gets the state of the network controller.
+     * @param options.getPermittedAccounts - Get accounts that a given origin has permissions for.
      * @param options.getSelectedAddress - Gets the address of the currently selected account.
      * @param options.incomingTransactions - Configuration options for incoming transaction support.
      * @param options.incomingTransactions.includeTokenTransfers - Whether or not to include ERC20 token transfers.
@@ -69,10 +76,11 @@ class TransactionController extends base_controller_1.BaseController {
      * @param options.messenger - The controller messenger.
      * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.
      * @param options.provider - The provider used to create the underlying EthQuery instance.
+     * @param options.securityProviderRequest - A function for verifying a transaction, whether it is malicious or not.
      * @param config - Initial options used to configure this controller.
      * @param state - Initial state to set on this controller.
      */
-    constructor({ blockTracker, disableHistory, disableSendFlowHistory, getCurrentAccountEIP1559Compatibility, getCurrentNetworkEIP1559Compatibility, getNetworkState, getSelectedAddress, incomingTransactions = {}, messenger, onNetworkStateChange, provider, }, config, state) {
+    constructor({ blockTracker, disableHistory, disableSendFlowHistory, getCurrentAccountEIP1559Compatibility, getCurrentNetworkEIP1559Compatibility, getGasFeeEstimates, getNetworkState, getPermittedAccounts, getSelectedAddress, incomingTransactions = {}, messenger, onNetworkStateChange, provider, securityProviderRequest, }, config, state) {
         super(config, state);
         this.mutex = new async_mutex_1.Mutex();
         /**
@@ -84,7 +92,6 @@ class TransactionController extends base_controller_1.BaseController {
          */
         this.name = 'TransactionController';
         this.defaultConfig = {
-            interval: 15000,
             txHistoryLimit: 40,
         };
         this.defaultState = {
@@ -96,6 +103,7 @@ class TransactionController extends base_controller_1.BaseController {
         this.provider = provider;
         this.messagingSystem = messenger;
         this.getNetworkState = getNetworkState;
+        // @ts-expect-error TODO: Provider type alignment
         this.ethQuery = new eth_query_1.default(provider);
         this.isSendFlowHistoryDisabled = disableSendFlowHistory !== null && disableSendFlowHistory !== void 0 ? disableSendFlowHistory : false;
         this.isHistoryDisabled = disableHistory !== null && disableHistory !== void 0 ? disableHistory : false;
@@ -104,6 +112,10 @@ class TransactionController extends base_controller_1.BaseController {
             getCurrentAccountEIP1559Compatibility;
         this.getCurrentNetworkEIP1559Compatibility =
             getCurrentNetworkEIP1559Compatibility;
+        this.getGasFeeEstimates = getGasFeeEstimates;
+        this.getPermittedAccounts = getPermittedAccounts;
+        this.getSelectedAddress = getSelectedAddress;
+        this.securityProviderRequest = securityProviderRequest;
         this.nonceTracker = new nonce_tracker_1.default({
             provider,
             blockTracker,
@@ -125,14 +137,31 @@ class TransactionController extends base_controller_1.BaseController {
         });
         this.incomingTransactionHelper.hub.on('transactions', this.onIncomingTransactions.bind(this));
         this.incomingTransactionHelper.hub.on('updatedLastFetchedBlockNumbers', this.onUpdatedLastFetchedBlockNumbers.bind(this));
+        this.pendingTransactionTracker = new PendingTransactionTracker_1.PendingTransactionTracker({
+            approveTransaction: this.approveTransaction.bind(this),
+            blockTracker,
+            getChainId: this.getChainId.bind(this),
+            getEthQuery: () => this.ethQuery,
+            getTransactions: () => this.state.transactions,
+            onStateChange: this.subscribe.bind(this),
+            publishTransaction: this.publishTransaction.bind(this),
+        });
+        this.addPendingTransactionTrackerListeners();
         onNetworkStateChange(() => {
+            // @ts-expect-error TODO: Provider type alignment
             this.ethQuery = new eth_query_1.default(this.provider);
             this.registry = new eth_method_registry_1.default({ provider: this.provider });
         });
-        this.poll();
     }
     failTransaction(transactionMeta, error) {
-        const newTransactionMeta = Object.assign(Object.assign({}, transactionMeta), { error, status: types_1.TransactionStatus.failed });
+        var _a;
+        const errorData = {
+            message: ((_a = error.message) === null || _a === void 0 ? void 0 : _a.toString()) || error.toString(),
+            rpc: error.value,
+            stack: error.stack,
+        };
+        const newTransactionMeta = Object.assign(Object.assign({}, transactionMeta), { error: errorData, err: errorData, status: types_1.TransactionStatus.failed });
+        (0, logger_1.projectLogger)('Transaction failed', { transactionMeta, error });
         this.updateTransaction(newTransactionMeta, 'TransactionController#failTransaction - Add error message and set status to failed');
         this.hub.emit(`${transactionMeta.id}:finished`, newTransactionMeta);
     }
@@ -143,21 +172,6 @@ class TransactionController extends base_controller_1.BaseController {
             return { registryMethod, parsedRegistryMethod };
         });
     }
-    /**
-     * Starts a new polling interval.
-     *
-     * @param interval - The polling interval used to fetch new transaction statuses.
-     */
-    poll(interval) {
-        return __awaiter(this, void 0, void 0, function* () {
-            interval && this.configure({ interval }, false, false);
-            this.handle && clearTimeout(this.handle);
-            yield (0, controller_utils_1.safelyExecute)(() => this.queryTransactionStatuses());
-            this.handle = setTimeout(() => {
-                this.poll(this.config.interval);
-            }, this.config.interval);
-        });
-    }
     /**
      * Handle new method data request.
      *
@@ -193,25 +207,32 @@ class TransactionController extends base_controller_1.BaseController {
      * @param opts - Additional options to control how the transaction is added.
      * @param opts.actionId - Unique ID to prevent duplicate requests.
      * @param opts.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.
+     * @param opts.method - RPC method that requested the transaction.
      * @param opts.origin - The origin of the transaction request, such as a dApp hostname.
      * @param opts.requireApproval - Whether the transaction requires approval by the user, defaults to true unless explicitly disabled.
      * @param opts.securityAlertResponse - Response from security validator.
      * @param opts.sendFlowHistory - The sendFlowHistory entries to add.
+     * @param opts.swaps -
+     * @param opts.swaps.hasApproveTx -
+     * @param opts.swaps.meta -
      * @param opts.type - Type of transaction to add, such as 'cancel' or 'swap'.
      * @returns Object containing a promise resolving to the transaction hash if approved.
      */
-    addTransaction(txParams, { actionId, deviceConfirmedOn, origin, requireApproval, securityAlertResponse, sendFlowHistory, type, } = {}) {
+    addTransaction(txParams, { actionId, deviceConfirmedOn, method, origin, requireApproval, securityAlertResponse, sendFlowHistory, swaps, type, } = {}) {
         return __awaiter(this, void 0, void 0, function* () {
             const chainId = this.getChainId();
             const { transactions } = this.state;
             txParams = (0, utils_1.normalizeTxParams)(txParams);
             const isEIP1559Compatible = yield this.getEIP1559Compatibility();
-            (0, utils_1.validateTxParams)(txParams, isEIP1559Compatible);
+            (0, validation_1.validateTxParams)(txParams, isEIP1559Compatible);
+            if (origin) {
+                yield (0, validation_1.validateTransactionOrigin)(yield this.getPermittedAccounts(origin), this.getSelectedAddress(), txParams.from, origin);
+            }
             const dappSuggestedGasFees = this.generateDappSuggestedGasFees(txParams, origin);
             const transactionType = type !== null && type !== void 0 ? type : (yield (0, transaction_type_1.determineTransactionType)(txParams, this.ethQuery)).type;
             const existingTransactionMeta = this.getTransactionWithActionId(actionId);
             // If a request to add a transaction with the same actionId is submitted again, a new transaction will not be created for it.
-            const transactionMeta = existingTransactionMeta || {
+            let transactionMeta = existingTransactionMeta || {
                 // Add actionId to txMeta to check if same actionId is seen again
                 actionId,
                 chainId,
@@ -227,18 +248,17 @@ class TransactionController extends base_controller_1.BaseController {
                 verifiedOnBlockchain: false,
                 type: transactionType,
             };
-            try {
-                const { gas, estimateGasError } = yield this.estimateGas(txParams);
-                txParams.gas = gas;
-                txParams.estimateGasError = estimateGasError;
-                transactionMeta.originalGasEstimate = gas;
-            }
-            catch (error) {
-                this.failTransaction(transactionMeta, error);
-                return Promise.reject(error);
+            yield this.addTxGasDefaults(transactionMeta, isEIP1559Compatible);
+            if ([types_1.TransactionType.swap, types_1.TransactionType.swapApproval].includes(transactionType)) {
+                transactionMeta = yield this.createSwapsTransaction(swaps, transactionType, transactionMeta);
             }
             // Checks if a transaction already exists with a given actionId
             if (!existingTransactionMeta) {
+                // Set security provider response
+                if (method && this.securityProviderRequest) {
+                    const securityProviderResponse = yield this.securityProviderRequest(transactionMeta, method);
+                    transactionMeta.securityProviderResponse = securityProviderResponse;
+                }
                 if (!this.isSendFlowHistoryDisabled) {
                     transactionMeta.sendFlowHistory = sendFlowHistory !== null && sendFlowHistory !== void 0 ? sendFlowHistory : [];
                 }
@@ -287,6 +307,14 @@ class TransactionController extends base_controller_1.BaseController {
                 console.error('Error during persisted transaction approval', error);
             });
         }
+        const approvedTxs = this.state.transactions.filter((transaction) => transaction.status === types_1.TransactionStatus.approved &&
+            transaction.chainId === chainId);
+        for (const txMeta of approvedTxs) {
+            this.approveTransaction(txMeta.id).catch((error) => {
+                /* istanbul ignore next */
+                console.error('Error during persisted transaction submission', error);
+            });
+        }
     }
     /**
      * Attempts to cancel a transaction based on its ID by setting its status to "rejected"
@@ -432,93 +460,11 @@ class TransactionController extends base_controller_1.BaseController {
      */
     estimateGas(transaction) {
         return __awaiter(this, void 0, void 0, function* () {
-            const estimatedTransaction = Object.assign({}, transaction);
-            const { gas, gasPrice: providedGasPrice, to, value, data, } = estimatedTransaction;
-            const gasPrice = typeof providedGasPrice === 'undefined'
-                ? yield (0, controller_utils_1.query)(this.ethQuery, 'gasPrice')
-                : providedGasPrice;
-            const { providerConfig } = this.getNetworkState();
-            const isCustomNetwork = providerConfig.type === controller_utils_1.NetworkType.rpc;
-            // 1. If gas is already defined on the transaction, use it
-            if (typeof gas !== 'undefined') {
-                return { gas, gasPrice };
-            }
-            const { gasLimit } = yield (0, controller_utils_1.query)(this.ethQuery, 'getBlockByNumber', [
-                'latest',
-                false,
-            ]);
-            // 2. If to is not defined or this is not a contract address, and there is no data use 0x5208 / 21000.
-            // If the network is a custom network then bypass this check and fetch 'estimateGas'.
-            /* istanbul ignore next */
-            const code = to ? yield (0, controller_utils_1.query)(this.ethQuery, 'getCode', [to]) : undefined;
-            /* istanbul ignore next */
-            if (!isCustomNetwork &&
-                (!to || (to && !data && (!code || code === '0x')))) {
-                return { gas: '0x5208', gasPrice };
-            }
-            // if data, should be hex string format
-            estimatedTransaction.data = !data
-                ? data
-                : /* istanbul ignore next */ (0, ethereumjs_util_1.addHexPrefix)(data);
-            // 3. If this is a contract address, safely estimate gas using RPC
-            estimatedTransaction.value =
-                typeof value === 'undefined' ? '0x0' : /* istanbul ignore next */ value;
-            const gasLimitBN = (0, controller_utils_1.hexToBN)(gasLimit);
-            estimatedTransaction.gas = (0, controller_utils_1.BNToHex)((0, controller_utils_1.fractionBN)(gasLimitBN, 19, 20));
-            let gasHex;
-            let estimateGasError;
-            try {
-                gasHex = yield (0, controller_utils_1.query)(this.ethQuery, 'estimateGas', [
-                    estimatedTransaction,
-                ]);
-            }
-            catch (error) {
-                estimateGasError = utils_1.ESTIMATE_GAS_ERROR;
-            }
-            // 4. Pad estimated gas without exceeding the most recent block gasLimit. If the network is a
-            // a custom network then return the eth_estimateGas value.
-            const gasBN = (0, controller_utils_1.hexToBN)(gasHex);
-            const maxGasBN = gasLimitBN.muln(0.9);
-            const paddedGasBN = gasBN.muln(1.5);
-            /* istanbul ignore next */
-            if (gasBN.gt(maxGasBN) || isCustomNetwork) {
-                return { gas: (0, ethereumjs_util_1.addHexPrefix)(gasHex), gasPrice, estimateGasError };
-            }
-            /* istanbul ignore next */
-            if (paddedGasBN.lt(maxGasBN)) {
-                return {
-                    gas: (0, ethereumjs_util_1.addHexPrefix)((0, controller_utils_1.BNToHex)(paddedGasBN)),
-                    gasPrice,
-                    estimateGasError,
-                };
-            }
-            return { gas: (0, ethereumjs_util_1.addHexPrefix)((0, controller_utils_1.BNToHex)(maxGasBN)), gasPrice, estimateGasError };
-        });
-    }
-    /**
-     * Check the status of submitted transactions on the network to determine whether they have
-     * been included in a block. Any that have been included in a block are marked as confirmed.
-     */
-    queryTransactionStatuses() {
-        return __awaiter(this, void 0, void 0, function* () {
-            const { transactions } = this.state;
-            const currentChainId = this.getChainId();
-            let gotUpdates = false;
-            yield (0, controller_utils_1.safelyExecute)(() => Promise.all(transactions.map((meta, index) => __awaiter(this, void 0, void 0, function* () {
-                if (!meta.verifiedOnBlockchain && meta.chainId === currentChainId) {
-                    const [reconciledTx, updateRequired] = yield this.blockchainTransactionStateReconciler(meta);
-                    if (updateRequired) {
-                        transactions[index] = reconciledTx;
-                        gotUpdates = updateRequired;
-                    }
-                }
-            }))));
-            /* istanbul ignore else */
-            if (gotUpdates) {
-                this.update({
-                    transactions: this.trimTransactionsForState(transactions),
-                });
-            }
+            const { estimatedGas: gas, simulationFails } = yield (0, gas_1.estimateGas)(transaction, this.ethQuery);
+            return {
+                gas,
+                simulationFails,
+            };
         });
     }
     /**
@@ -530,7 +476,7 @@ class TransactionController extends base_controller_1.BaseController {
     updateTransaction(transactionMeta, note) {
         const { transactions } = this.state;
         transactionMeta.txParams = (0, utils_1.normalizeTxParams)(transactionMeta.txParams);
-        (0, utils_1.validateTxParams)(transactionMeta.txParams);
+        (0, validation_1.validateTxParams)(transactionMeta.txParams);
         if (!this.isHistoryDisabled) {
             (0, history_1.updateTransactionHistory)(transactionMeta, note);
         }
@@ -702,7 +648,7 @@ class TransactionController extends base_controller_1.BaseController {
                     if (!isTxCompleted) {
                         if (error.code === rpc_errors_1.errorCodes.provider.userRejectedRequest) {
                             this.cancelTransaction(transactionId);
-                            throw rpc_errors_1.providerErrors.userRejectedRequest('User rejected the transaction');
+                            throw rpc_errors_1.providerErrors.userRejectedRequest('MetaMask Tx Signature: User denied transaction signature.');
                         }
                         else {
                             this.failTransaction(meta, error);
@@ -739,6 +685,7 @@ class TransactionController extends base_controller_1.BaseController {
      */
     approveTransaction(transactionId) {
         return __awaiter(this, void 0, void 0, function* () {
+            (0, logger_1.projectLogger)('Approved transaction', transactionId);
             const { transactions } = this.state;
             const releaseLock = yield this.mutex.acquire();
             const chainId = this.getChainId();
@@ -771,13 +718,9 @@ class TransactionController extends base_controller_1.BaseController {
                 const baseTxParams = Object.assign(Object.assign({}, transactionMeta.txParams), { gasLimit: transactionMeta.txParams.gas });
                 const isEIP1559 = (0, utils_1.isEIP1559Transaction)(transactionMeta.txParams);
                 const txParams = isEIP1559
-                    ? Object.assign(Object.assign({}, baseTxParams), { maxFeePerGas: transactionMeta.txParams.maxFeePerGas, maxPriorityFeePerGas: transactionMeta.txParams.maxPriorityFeePerGas, estimatedBaseFee: transactionMeta.txParams.estimatedBaseFee, 
+                    ? Object.assign(Object.assign({}, baseTxParams), { estimatedBaseFee: transactionMeta.txParams.estimatedBaseFee, 
                         // specify type 2 if maxFeePerGas and maxPriorityFeePerGas are set
                         type: 2 }) : baseTxParams;
-                // delete gasPrice if maxFeePerGas and maxPriorityFeePerGas are set
-                if (isEIP1559) {
-                    delete txParams.gasPrice;
-                }
                 const unsignedEthTx = this.prepareUnsignedEthTx(txParams);
                 const signedTx = yield this.sign(unsignedEthTx, from);
                 yield this.updateTransactionMetaRSV(transactionMeta, signedTx);
@@ -786,8 +729,9 @@ class TransactionController extends base_controller_1.BaseController {
                 const rawTx = (0, ethereumjs_util_1.bufferToHex)(signedTx.serialize());
                 transactionMeta.rawTx = rawTx;
                 this.updateTransaction(transactionMeta, 'TransactionController#approveTransaction - RawTransaction added');
-                const hash = yield (0, controller_utils_1.query)(this.ethQuery, 'sendRawTransaction', [rawTx]);
+                const hash = yield this.publishTransaction(rawTx);
                 transactionMeta.hash = hash;
+                (0, logger_1.projectLogger)('Submitted transaction', { txParams, rawTx, hash });
                 transactionMeta.status = types_1.TransactionStatus.submitted;
                 transactionMeta.submittedTime = new Date().getTime();
                 this.updateTransaction(transactionMeta, 'TransactionController#approveTransaction - Transaction submitted');
@@ -805,6 +749,11 @@ class TransactionController extends base_controller_1.BaseController {
             }
         });
     }
+    publishTransaction(rawTransaction) {
+        return __awaiter(this, void 0, void 0, function* () {
+            return yield (0, controller_utils_1.query)(this.ethQuery, 'sendRawTransaction', [rawTransaction]);
+        });
+    }
     /**
      * Cancels a transaction based on its ID by setting its status to "rejected"
      * and emitting a `<tx.id>:finished` hub event.
@@ -884,85 +833,6 @@ class TransactionController extends base_controller_1.BaseController {
             types_1.TransactionStatus.submitted,
         ].includes(status);
     }
-    /**
-     * Method to verify the state of a transaction using the Blockchain as a source of truth.
-     *
-     * @param meta - The local transaction to verify on the blockchain.
-     * @returns A tuple containing the updated transaction, and whether or not an update was required.
-     */
-    blockchainTransactionStateReconciler(meta) {
-        return __awaiter(this, void 0, void 0, function* () {
-            const { status, hash } = meta;
-            switch (status) {
-                case types_1.TransactionStatus.confirmed:
-                    const txReceipt = yield (0, controller_utils_1.query)(this.ethQuery, 'getTransactionReceipt', [
-                        hash,
-                    ]);
-                    if (!txReceipt) {
-                        return [meta, false];
-                    }
-                    const txBlock = yield (0, controller_utils_1.query)(this.ethQuery, 'getBlockByHash', [
-                        txReceipt.blockHash,
-                    ]);
-                    meta.verifiedOnBlockchain = true;
-                    meta.txParams.gasUsed = txReceipt.gasUsed;
-                    meta.txReceipt = txReceipt;
-                    meta.baseFeePerGas = txBlock === null || txBlock === void 0 ? void 0 : txBlock.baseFeePerGas;
-                    meta.blockTimestamp = txBlock === null || txBlock === void 0 ? void 0 : txBlock.timestamp;
-                    // According to the Web3 docs:
-                    // TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.
-                    if (Number(txReceipt.status) === 0) {
-                        const error = new Error('Transaction failed. The transaction was reversed');
-                        this.failTransaction(meta, error);
-                        return [meta, false];
-                    }
-                    return [meta, true];
-                case types_1.TransactionStatus.submitted:
-                    const txObj = yield (0, controller_utils_1.query)(this.ethQuery, 'getTransactionByHash', [
-                        hash,
-                    ]);
-                    if (!txObj) {
-                        const receiptShowsFailedStatus = yield this.checkTxReceiptStatusIsFailed(hash);
-                        // Case the txObj is evaluated as false, a second check will
-                        // determine if the tx failed or it is pending or confirmed
-                        if (receiptShowsFailedStatus) {
-                            const error = new Error('Transaction failed. The transaction was dropped or replaced by a new one');
-                            this.failTransaction(meta, error);
-                        }
-                    }
-                    /* istanbul ignore next */
-                    if (txObj === null || txObj === void 0 ? void 0 : txObj.blockNumber) {
-                        meta.status = types_1.TransactionStatus.confirmed;
-                        this.hub.emit(`${meta.id}:confirmed`, meta);
-                        return [meta, true];
-                    }
-                    return [meta, false];
-                default:
-                    return [meta, false];
-            }
-        });
-    }
-    /**
-     * Method to check if a tx has failed according to their receipt
-     * According to the Web3 docs:
-     * TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.
-     * The receipt is not available for pending transactions and returns null.
-     *
-     * @param txHash - The transaction hash.
-     * @returns Whether the transaction has failed.
-     */
-    checkTxReceiptStatusIsFailed(txHash) {
-        return __awaiter(this, void 0, void 0, function* () {
-            const txReceipt = yield (0, controller_utils_1.query)(this.ethQuery, 'getTransactionReceipt', [
-                txHash,
-            ]);
-            if (!txReceipt) {
-                // Transaction is pending
-                return false;
-            }
-            return Number(txReceipt.status) === 0;
-        });
-    }
     requestApproval(txMeta, { shouldShowRequest }) {
         return __awaiter(this, void 0, void 0, function* () {
             const id = this.getApprovalId(txMeta);
@@ -1182,6 +1052,141 @@ class TransactionController extends base_controller_1.BaseController {
             return (currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible);
         });
     }
+    // Patch
+    resetState() {
+        this.update(this.defaultState);
+    }
+    clearUnapproved() {
+        this.update({
+            transactions: this.state.transactions.filter(({ status }) => status !== types_1.TransactionStatus.unapproved),
+        });
+    }
+    getNonceLock(address) {
+        return this.nonceTracker.getNonceLock(address);
+    }
+    updateEditableParams(txId, { data, from, to, value, gas, gasPrice, }) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const transactionMeta = this.getTransaction(txId);
+            if (!transactionMeta) {
+                throw new Error(`Cannot update editable params as no transaction metadata found`);
+            }
+            (0, utils_1.validateIfTransactionUnapproved)(transactionMeta, 'updateEditableParams');
+            const editableParams = {
+                txParams: {
+                    data,
+                    from,
+                    to,
+                    value,
+                    gas,
+                    gasPrice,
+                },
+            };
+            editableParams.txParams = (0, lodash_1.pickBy)(editableParams.txParams);
+            const updatedTransaction = (0, lodash_1.merge)(transactionMeta, editableParams);
+            // update transaction type in case it has changes
+            const { type } = yield (0, transaction_type_1.determineTransactionType)(updatedTransaction.txParams, this.ethQuery);
+            updatedTransaction.type = type;
+            const note = `Update Editable Params for ${txId}`;
+            this.updateTransaction(updatedTransaction, note);
+            return this.getTransaction(txId);
+        });
+    }
+    updatePreviousGasParams(txId, { maxFeePerGas, maxPriorityFeePerGas, gasLimit, }) {
+        const transactionMeta = this.getTransaction(txId);
+        if (!transactionMeta) {
+            throw new Error(`Cannot update previous gas params as no transaction metadata found`);
+        }
+        transactionMeta.previousGas = (0, lodash_1.pickBy)({
+            maxFeePerGas,
+            maxPriorityFeePerGas,
+            gasLimit,
+        });
+        const note = `Update Previous Gas for ${txId}`;
+        this.updateTransaction(transactionMeta, note);
+        return this.getTransaction(txId);
+    }
+    addTxGasDefaults(txMeta, eip1559) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const eip1559Compatibility = txMeta.txParams.type !== types_1.TransactionEnvelopeType.legacy && eip1559;
+            const { providerConfig } = this.getNetworkState();
+            yield (0, gas_fees_1.updateGasFees)({
+                eip1559: eip1559Compatibility,
+                ethQuery: this.ethQuery,
+                getGasFeeEstimates: this.getGasFeeEstimates.bind(this),
+                txMeta,
+            });
+            yield (0, gas_1.updateGas)({
+                ethQuery: this.ethQuery,
+                txMeta,
+                providerConfig,
+            });
+            // txMeta.defaultGasEstimates = {
+            //   estimateType: txMeta.userFeeLevel,
+            //   gas: txMeta.txParams.gas,
+            //   gasPrice: txMeta.txParams.gasPrice,
+            //   maxFeePerGas: txMeta.txParams.maxFeePerGas,
+            //   maxPriorityFeePerGas: txMeta.txParams.maxPriorityFeePerGas,
+            // };
+            return txMeta;
+        });
+    }
+    createSwapsTransaction(swapOptions, transactionType, txMeta) {
+        return __awaiter(this, void 0, void 0, function* () {
+            // The simulationFails property is added if the estimateGas call fails. In cases
+            // when no swaps approval tx is required, this indicates that the swap will likely
+            // fail. There was an earlier estimateGas call made by the swaps controller,
+            // but it is possible that external conditions have change since then, and
+            // a previously succeeding estimate gas call could now fail. By checking for
+            // the `simulationFails` property here, we can reduce the number of swap
+            // transactions that get published to the blockchain only to fail and thereby
+            // waste the user's funds on gas.
+            if (transactionType === types_1.TransactionType.swap &&
+                (swapOptions === null || swapOptions === void 0 ? void 0 : swapOptions.hasApproveTx) === false &&
+                txMeta.simulationFails) {
+                yield this.cancelTransaction(txMeta.id);
+                throw new Error('Simulation failed');
+            }
+            const swapsMeta = swapOptions === null || swapOptions === void 0 ? void 0 : swapOptions.meta;
+            if (!swapsMeta) {
+                return txMeta;
+            }
+            if (transactionType === types_1.TransactionType.swapApproval) {
+                this.hub.emit('newSwapApproval', txMeta);
+                return this.updateSwapApprovalTransaction(txMeta, swapsMeta);
+            }
+            if (transactionType === types_1.TransactionType.swap) {
+                this.hub.emit('newSwap', txMeta);
+                return this.updateSwapTransaction(txMeta, swapsMeta);
+            }
+            return txMeta;
+        });
+    }
+    updateSwapApprovalTransaction(txMeta, { type, sourceTokenSymbol, }) {
+        (0, utils_1.validateIfTransactionUnapproved)(txMeta, 'updateSwapApprovalTransaction');
+        const swapApprovalTransaction = (0, lodash_1.pickBy)({ type, sourceTokenSymbol });
+        return (0, lodash_1.merge)(txMeta, swapApprovalTransaction);
+    }
+    updateSwapTransaction(txMeta, { sourceTokenSymbol, destinationTokenSymbol, type, destinationTokenDecimals, destinationTokenAddress, swapMetaData, swapTokenValue, estimatedBaseFee, approvalTxId, }) {
+        (0, utils_1.validateIfTransactionUnapproved)(txMeta, 'updateSwapTransaction');
+        const swapTransaction = (0, lodash_1.pickBy)({
+            sourceTokenSymbol,
+            destinationTokenSymbol,
+            type,
+            destinationTokenDecimals,
+            destinationTokenAddress,
+            swapMetaData,
+            swapTokenValue,
+            estimatedBaseFee,
+            approvalTxId,
+        });
+        return (0, lodash_1.merge)(txMeta, swapTransaction);
+    }
+    addPendingTransactionTrackerListeners() {
+        this.pendingTransactionTracker.hub.on('transaction-confirmed', (transactionMeta) => this.hub.emit(`${transactionMeta.id}:confirmed`, transactionMeta));
+        this.pendingTransactionTracker.hub.on('transaction-dropped', this.setTransactionStatusDropped.bind(this));
+        this.pendingTransactionTracker.hub.on('transaction-failed', this.failTransaction.bind(this));
+        this.pendingTransactionTracker.hub.on('transaction-updated', this.updateTransaction.bind(this));
+    }
 }
 exports.TransactionController = TransactionController;
 exports.default = TransactionController;
diff --git a/dist/TransactionController.js.map b/dist/TransactionController.js.map
deleted file mode 100644
index b4ead511ade2915c1cf256106e6737fb80ccdaf6..0000000000000000000000000000000000000000
--- a/dist/TransactionController.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"TransactionController.js","sourceRoot":"","sources":["../src/TransactionController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Hardfork, Common, type ChainConfig } from '@ethereumjs/common';\nimport type { TypedTransaction } from '@ethereumjs/tx';\nimport { TransactionFactory } from '@ethereumjs/tx';\nimport type {\n  AcceptResultCallbacks,\n  AddApprovalRequest,\n  AddResult,\n} from '@metamask/approval-controller';\nimport type {\n  BaseConfig,\n  BaseState,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport {\n  BNToHex,\n  fractionBN,\n  hexToBN,\n  safelyExecute,\n  query,\n  NetworkType,\n  RPC,\n  ApprovalType,\n  ORIGIN_METAMASK,\n  convertHexToDecimal,\n} from '@metamask/controller-utils';\nimport EthQuery from '@metamask/eth-query';\nimport type {\n  BlockTracker,\n  NetworkState,\n  Provider,\n} from '@metamask/network-controller';\nimport { errorCodes, rpcErrors, providerErrors } from '@metamask/rpc-errors';\nimport type { Hex } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\nimport MethodRegistry from 'eth-method-registry';\nimport { addHexPrefix, bufferToHex } from 'ethereumjs-util';\nimport { EventEmitter } from 'events';\nimport { merge, pickBy } from 'lodash';\nimport NonceTracker from 'nonce-tracker';\nimport { v1 as random } from 'uuid';\n\nimport { EtherscanRemoteTransactionSource } from './EtherscanRemoteTransactionSource';\nimport { validateConfirmedExternalTransaction } from './external-transactions';\nimport { addInitialHistorySnapshot, updateTransactionHistory } from './history';\nimport { IncomingTransactionHelper } from './IncomingTransactionHelper';\nimport { determineTransactionType } from './transaction-type';\nimport type {\n  DappSuggestedGasFees,\n  TransactionParams,\n  TransactionMeta,\n  TransactionReceipt,\n  SendFlowHistoryEntry,\n  WalletDevice,\n} from './types';\nimport { TransactionType, TransactionStatus } from './types';\nimport {\n  getAndFormatTransactionsForNonceTracker,\n  getIncreasedPriceFromExisting,\n  normalizeTxParams,\n  isEIP1559Transaction,\n  isFeeMarketEIP1559Values,\n  isGasPriceValue,\n  validateGasValues,\n  validateIfTransactionUnapproved,\n  validateMinimumIncrease,\n  validateTxParams,\n  ESTIMATE_GAS_ERROR,\n} from './utils';\n\nexport const HARDFORK = Hardfork.London;\n\n/**\n * @type Result\n * @property result - Promise resolving to a new transaction hash\n * @property transactionMeta - Meta information about this new transaction\n */\nexport interface Result {\n  result: Promise<string>;\n  transactionMeta: TransactionMeta;\n}\n\nexport interface GasPriceValue {\n  gasPrice: string;\n}\n\nexport interface FeeMarketEIP1559Values {\n  maxFeePerGas: string;\n  maxPriorityFeePerGas: string;\n}\n\n/**\n * @type TransactionConfig\n *\n * Transaction controller configuration\n * @property interval - Polling interval used to fetch new currency rate\n * @property provider - Provider used to create a new underlying EthQuery instance\n * @property sign - Method used to sign transactions\n */\nexport interface TransactionConfig extends BaseConfig {\n  interval: number;\n  sign?: (txParams: TransactionParams, from: string) => Promise<any>;\n  txHistoryLimit: number;\n}\n\n/**\n * @type MethodData\n *\n * Method data registry object\n * @property registryMethod - Registry method raw string\n * @property parsedRegistryMethod - Registry method object, containing name and method arguments\n */\nexport interface MethodData {\n  registryMethod: string;\n  parsedRegistryMethod: Record<string, unknown>;\n}\n\n/**\n * @type TransactionState\n *\n * Transaction controller state\n * @property transactions - A list of TransactionMeta objects\n * @property methodData - Object containing all known method data information\n */\nexport interface TransactionState extends BaseState {\n  transactions: TransactionMeta[];\n  methodData: { [key: string]: MethodData };\n  lastFetchedBlockNumbers: { [key: string]: number };\n}\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during cancellation\n */\nexport const CANCEL_RATE = 1.5;\n\n/**\n * Multiplier used to determine a transaction's increased gas fee during speed up\n */\nexport const SPEED_UP_RATE = 1.1;\n\n/**\n * The name of the {@link TransactionController}.\n */\nconst controllerName = 'TransactionController';\n\n/**\n * The external actions available to the {@link TransactionController}.\n */\ntype AllowedActions = AddApprovalRequest;\n\n/**\n * The messenger of the {@link TransactionController}.\n */\nexport type TransactionControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  AllowedActions,\n  never,\n  AllowedActions['type'],\n  never\n>;\n\n/**\n * Controller responsible for submitting and managing transactions.\n */\nexport class TransactionController extends BaseController<\n  TransactionConfig,\n  TransactionState\n> {\n  private ethQuery: EthQuery;\n\n  private readonly isHistoryDisabled: boolean;\n\n  private readonly isSendFlowHistoryDisabled: boolean;\n\n  private readonly nonceTracker: NonceTracker;\n\n  private registry: any;\n\n  private readonly provider: Provider;\n\n  private handle?: ReturnType<typeof setTimeout>;\n\n  private readonly mutex = new Mutex();\n\n  private readonly getNetworkState: () => NetworkState;\n\n  private readonly getCurrentAccountEIP1559Compatibility: () => Promise<boolean>;\n\n  private readonly getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;\n\n  private readonly messagingSystem: TransactionControllerMessenger;\n\n  private readonly incomingTransactionHelper: IncomingTransactionHelper;\n\n  private failTransaction(transactionMeta: TransactionMeta, error: Error) {\n    const newTransactionMeta = {\n      ...transactionMeta,\n      error,\n      status: TransactionStatus.failed,\n    };\n    this.updateTransaction(\n      newTransactionMeta,\n      'TransactionController#failTransaction - Add error message and set status to failed',\n    );\n    this.hub.emit(`${transactionMeta.id}:finished`, newTransactionMeta);\n  }\n\n  private async registryLookup(fourBytePrefix: string): Promise<MethodData> {\n    const registryMethod = await this.registry.lookup(fourBytePrefix);\n    const parsedRegistryMethod = this.registry.parse(registryMethod);\n    return { registryMethod, parsedRegistryMethod };\n  }\n\n  /**\n   * EventEmitter instance used to listen to specific transactional events\n   */\n  hub = new EventEmitter();\n\n  /**\n   * Name of this controller used during composition\n   */\n  override name = 'TransactionController';\n\n  /**\n   * Method used to sign transactions\n   */\n  sign?: (\n    transaction: TypedTransaction,\n    from: string,\n  ) => Promise<TypedTransaction>;\n\n  /**\n   * Creates a TransactionController instance.\n   *\n   * @param options - The controller options.\n   * @param options.blockTracker - The block tracker used to poll for new blocks data.\n   * @param options.disableHistory - Whether to disable storing history in transaction metadata.\n   * @param options.disableSendFlowHistory - Explicitly disable transaction metadata history.\n   * @param options.getCurrentAccountEIP1559Compatibility - Whether or not the account supports EIP-1559.\n   * @param options.getCurrentNetworkEIP1559Compatibility - Whether or not the network supports EIP-1559.\n   * @param options.getNetworkState - Gets the state of the network controller.\n   * @param options.getSelectedAddress - Gets the address of the currently selected account.\n   * @param options.incomingTransactions - Configuration options for incoming transaction support.\n   * @param options.incomingTransactions.includeTokenTransfers - Whether or not to include ERC20 token transfers.\n   * @param options.incomingTransactions.isEnabled - Whether or not incoming transaction retrieval is enabled.\n   * @param options.incomingTransactions.queryEntireHistory - Whether to initially query the entire transaction history or only recent blocks.\n   * @param options.incomingTransactions.updateTransactions - Whether to update local transactions using remote transaction data.\n   * @param options.messenger - The controller messenger.\n   * @param options.onNetworkStateChange - Allows subscribing to network controller state changes.\n   * @param options.provider - The provider used to create the underlying EthQuery instance.\n   * @param config - Initial options used to configure this controller.\n   * @param state - Initial state to set on this controller.\n   */\n  constructor(\n    {\n      blockTracker,\n      disableHistory,\n      disableSendFlowHistory,\n      getCurrentAccountEIP1559Compatibility,\n      getCurrentNetworkEIP1559Compatibility,\n      getNetworkState,\n      getSelectedAddress,\n      incomingTransactions = {},\n      messenger,\n      onNetworkStateChange,\n      provider,\n    }: {\n      blockTracker: BlockTracker;\n      disableHistory: boolean;\n      disableSendFlowHistory: boolean;\n      getCurrentAccountEIP1559Compatibility: () => Promise<boolean>;\n      getCurrentNetworkEIP1559Compatibility: () => Promise<boolean>;\n      getNetworkState: () => NetworkState;\n      getSelectedAddress: () => string;\n      incomingTransactions: {\n        includeTokenTransfers?: boolean;\n        isEnabled?: () => boolean;\n        queryEntireHistory?: boolean;\n        updateTransactions?: boolean;\n      };\n      messenger: TransactionControllerMessenger;\n      onNetworkStateChange: (listener: (state: NetworkState) => void) => void;\n      provider: Provider;\n    },\n    config?: Partial<TransactionConfig>,\n    state?: Partial<TransactionState>,\n  ) {\n    super(config, state);\n\n    this.defaultConfig = {\n      interval: 15000,\n      txHistoryLimit: 40,\n    };\n\n    this.defaultState = {\n      methodData: {},\n      transactions: [],\n      lastFetchedBlockNumbers: {},\n    };\n\n    this.initialize();\n\n    this.provider = provider;\n    this.messagingSystem = messenger;\n    this.getNetworkState = getNetworkState;\n    this.ethQuery = new EthQuery(provider);\n    this.isSendFlowHistoryDisabled = disableSendFlowHistory ?? false;\n    this.isHistoryDisabled = disableHistory ?? false;\n    this.registry = new MethodRegistry({ provider });\n    this.getCurrentAccountEIP1559Compatibility =\n      getCurrentAccountEIP1559Compatibility;\n    this.getCurrentNetworkEIP1559Compatibility =\n      getCurrentNetworkEIP1559Compatibility;\n\n    this.nonceTracker = new NonceTracker({\n      provider,\n      blockTracker,\n      getPendingTransactions: (address) =>\n        getAndFormatTransactionsForNonceTracker(\n          address,\n          TransactionStatus.submitted,\n          this.state.transactions,\n        ),\n      getConfirmedTransactions: (address) =>\n        getAndFormatTransactionsForNonceTracker(\n          address,\n          TransactionStatus.confirmed,\n          this.state.transactions,\n        ),\n    });\n\n    this.incomingTransactionHelper = new IncomingTransactionHelper({\n      blockTracker,\n      getCurrentAccount: getSelectedAddress,\n      getLastFetchedBlockNumbers: () => this.state.lastFetchedBlockNumbers,\n      getNetworkState,\n      isEnabled: incomingTransactions.isEnabled,\n      queryEntireHistory: incomingTransactions.queryEntireHistory,\n      remoteTransactionSource: new EtherscanRemoteTransactionSource({\n        includeTokenTransfers: incomingTransactions.includeTokenTransfers,\n      }),\n      transactionLimit: this.config.txHistoryLimit,\n      updateTransactions: incomingTransactions.updateTransactions,\n    });\n\n    this.incomingTransactionHelper.hub.on(\n      'transactions',\n      this.onIncomingTransactions.bind(this),\n    );\n\n    this.incomingTransactionHelper.hub.on(\n      'updatedLastFetchedBlockNumbers',\n      this.onUpdatedLastFetchedBlockNumbers.bind(this),\n    );\n\n    onNetworkStateChange(() => {\n      this.ethQuery = new EthQuery(this.provider);\n      this.registry = new MethodRegistry({ provider: this.provider });\n    });\n\n    this.poll();\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - The polling interval used to fetch new transaction statuses.\n   */\n  async poll(interval?: number): Promise<void> {\n    interval && this.configure({ interval }, false, false);\n    this.handle && clearTimeout(this.handle);\n    await safelyExecute(() => this.queryTransactionStatuses());\n    this.handle = setTimeout(() => {\n      this.poll(this.config.interval);\n    }, this.config.interval);\n  }\n\n  /**\n   * Handle new method data request.\n   *\n   * @param fourBytePrefix - The method prefix.\n   * @returns The method data object corresponding to the given signature prefix.\n   */\n  async handleMethodData(fourBytePrefix: string): Promise<MethodData> {\n    const releaseLock = await this.mutex.acquire();\n    try {\n      const { methodData } = this.state;\n      const knownMethod = Object.keys(methodData).find(\n        (knownFourBytePrefix) => fourBytePrefix === knownFourBytePrefix,\n      );\n      if (knownMethod) {\n        return methodData[fourBytePrefix];\n      }\n      const registry = await this.registryLookup(fourBytePrefix);\n      this.update({\n        methodData: { ...methodData, ...{ [fourBytePrefix]: registry } },\n      });\n      return registry;\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Add a new unapproved transaction to state. Parameters will be validated, a\n   * unique transaction id will be generated, and gas and gasPrice will be calculated\n   * if not provided. If A `<tx.id>:unapproved` hub event will be emitted once added.\n   *\n   * @param txParams - Standard parameters for an Ethereum transaction.\n   * @param opts - Additional options to control how the transaction is added.\n   * @param opts.actionId - Unique ID to prevent duplicate requests.\n   * @param opts.deviceConfirmedOn - An enum to indicate what device confirmed the transaction.\n   * @param opts.origin - The origin of the transaction request, such as a dApp hostname.\n   * @param opts.requireApproval - Whether the transaction requires approval by the user, defaults to true unless explicitly disabled.\n   * @param opts.securityAlertResponse - Response from security validator.\n   * @param opts.sendFlowHistory - The sendFlowHistory entries to add.\n   * @param opts.type - Type of transaction to add, such as 'cancel' or 'swap'.\n   * @returns Object containing a promise resolving to the transaction hash if approved.\n   */\n  async addTransaction(\n    txParams: TransactionParams,\n    {\n      actionId,\n      deviceConfirmedOn,\n      origin,\n      requireApproval,\n      securityAlertResponse,\n      sendFlowHistory,\n      type,\n    }: {\n      actionId?: string;\n      deviceConfirmedOn?: WalletDevice;\n      origin?: string;\n      requireApproval?: boolean | undefined;\n      securityAlertResponse?: Record<string, unknown>;\n      sendFlowHistory?: SendFlowHistoryEntry[];\n      type?: TransactionType;\n    } = {},\n  ): Promise<Result> {\n    const chainId = this.getChainId();\n    const { transactions } = this.state;\n    txParams = normalizeTxParams(txParams);\n    const isEIP1559Compatible = await this.getEIP1559Compatibility();\n    validateTxParams(txParams, isEIP1559Compatible);\n\n    const dappSuggestedGasFees = this.generateDappSuggestedGasFees(\n      txParams,\n      origin,\n    );\n\n    const transactionType =\n      type ?? (await determineTransactionType(txParams, this.ethQuery)).type;\n\n    const existingTransactionMeta = this.getTransactionWithActionId(actionId);\n    // If a request to add a transaction with the same actionId is submitted again, a new transaction will not be created for it.\n    const transactionMeta: TransactionMeta = existingTransactionMeta || {\n      // Add actionId to txMeta to check if same actionId is seen again\n      actionId,\n      chainId,\n      dappSuggestedGasFees,\n      deviceConfirmedOn,\n      id: random(),\n      origin,\n      securityAlertResponse,\n      status: TransactionStatus.unapproved as TransactionStatus.unapproved,\n      time: Date.now(),\n      txParams,\n      userEditedGasLimit: false,\n      verifiedOnBlockchain: false,\n      type: transactionType,\n    };\n\n    try {\n      const { gas, estimateGasError } = await this.estimateGas(txParams);\n      txParams.gas = gas;\n      txParams.estimateGasError = estimateGasError;\n      transactionMeta.originalGasEstimate = gas;\n    } catch (error: any) {\n      this.failTransaction(transactionMeta, error);\n      return Promise.reject(error);\n    }\n\n    // Checks if a transaction already exists with a given actionId\n    if (!existingTransactionMeta) {\n      if (!this.isSendFlowHistoryDisabled) {\n        transactionMeta.sendFlowHistory = sendFlowHistory ?? [];\n      }\n      // Initial history push\n      if (!this.isHistoryDisabled) {\n        addInitialHistorySnapshot(transactionMeta);\n      }\n      transactions.push(transactionMeta);\n      this.update({\n        transactions: this.trimTransactionsForState(transactions),\n      });\n      this.hub.emit(`unapprovedTransaction`, transactionMeta);\n    }\n\n    return {\n      result: this.processApproval(transactionMeta, {\n        isExisting: Boolean(existingTransactionMeta),\n        requireApproval,\n      }),\n      transactionMeta,\n    };\n  }\n\n  startIncomingTransactionPolling() {\n    this.incomingTransactionHelper.start();\n  }\n\n  stopIncomingTransactionPolling() {\n    this.incomingTransactionHelper.stop();\n  }\n\n  async updateIncomingTransactions() {\n    await this.incomingTransactionHelper.update();\n  }\n\n  /**\n   * Creates approvals for all unapproved transactions persisted.\n   */\n  initApprovals() {\n    const chainId = this.getChainId();\n    const unapprovedTxs = this.state.transactions.filter(\n      (transaction) =>\n        transaction.status === TransactionStatus.unapproved &&\n        transaction.chainId === chainId,\n    );\n\n    for (const txMeta of unapprovedTxs) {\n      this.processApproval(txMeta, {\n        shouldShowRequest: false,\n      }).catch((error) => {\n        /* istanbul ignore next */\n        console.error('Error during persisted transaction approval', error);\n      });\n    }\n  }\n\n  /**\n   * Attempts to cancel a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionId - The ID of the transaction to cancel.\n   * @param gasValues - The gas values to use for the cancellation transaction.\n   * @param options - The options for the cancellation transaction.\n   * @param options.estimatedBaseFee - The estimated base fee of the transaction.\n   */\n  async stopTransaction(\n    transactionId: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n    { estimatedBaseFee }: { estimatedBaseFee?: string } = {},\n  ) {\n    if (gasValues) {\n      validateGasValues(gasValues);\n    }\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionId,\n    );\n    if (!transactionMeta) {\n      return;\n    }\n\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    // gasPrice (legacy non EIP1559)\n    const minGasPrice = getIncreasedPriceFromExisting(\n      transactionMeta.txParams.gasPrice,\n      CANCEL_RATE,\n    );\n\n    const gasPriceFromValues = isGasPriceValue(gasValues) && gasValues.gasPrice;\n\n    const newGasPrice =\n      (gasPriceFromValues &&\n        validateMinimumIncrease(gasPriceFromValues, minGasPrice)) ||\n      minGasPrice;\n\n    // maxFeePerGas (EIP1559)\n    const existingMaxFeePerGas = transactionMeta.txParams?.maxFeePerGas;\n    const minMaxFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxFeePerGas,\n      CANCEL_RATE,\n    );\n    const maxFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxFeePerGas;\n    const newMaxFeePerGas =\n      (maxFeePerGasValues &&\n        validateMinimumIncrease(maxFeePerGasValues, minMaxFeePerGas)) ||\n      (existingMaxFeePerGas && minMaxFeePerGas);\n\n    // maxPriorityFeePerGas (EIP1559)\n    const existingMaxPriorityFeePerGas =\n      transactionMeta.txParams?.maxPriorityFeePerGas;\n    const minMaxPriorityFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxPriorityFeePerGas,\n      CANCEL_RATE,\n    );\n    const maxPriorityFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxPriorityFeePerGas;\n    const newMaxPriorityFeePerGas =\n      (maxPriorityFeePerGasValues &&\n        validateMinimumIncrease(\n          maxPriorityFeePerGasValues,\n          minMaxPriorityFeePerGas,\n        )) ||\n      (existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas);\n\n    const txParams =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            from: transactionMeta.txParams.from,\n            gasLimit: transactionMeta.txParams.gas,\n            maxFeePerGas: newMaxFeePerGas,\n            maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            type: 2,\n            nonce: transactionMeta.txParams.nonce,\n            to: transactionMeta.txParams.from,\n            value: '0x0',\n          }\n        : {\n            from: transactionMeta.txParams.from,\n            gasLimit: transactionMeta.txParams.gas,\n            gasPrice: newGasPrice,\n            nonce: transactionMeta.txParams.nonce,\n            to: transactionMeta.txParams.from,\n            value: '0x0',\n          };\n\n    const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.txParams.from,\n    );\n    await this.updateTransactionMetaRSV(transactionMeta, signedTx);\n    const rawTx = bufferToHex(signedTx.serialize());\n    await query(this.ethQuery, 'sendRawTransaction', [rawTx]);\n    transactionMeta.estimatedBaseFee = estimatedBaseFee;\n    transactionMeta.status = TransactionStatus.cancelled;\n    this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n  }\n\n  /**\n   * Attempts to speed up a transaction increasing transaction gasPrice by ten percent.\n   *\n   * @param transactionId - The ID of the transaction to speed up.\n   * @param gasValues - The gas values to use for the speed up transaction.\n   * @param options - The options for the speed up transaction.\n   * @param options.actionId - Unique ID to prevent duplicate requests\n   * @param options.estimatedBaseFee - The estimated base fee of the transaction.\n   */\n  async speedUpTransaction(\n    transactionId: string,\n    gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n    {\n      actionId,\n      estimatedBaseFee,\n    }: { actionId?: string; estimatedBaseFee?: string } = {},\n  ) {\n    // If transaction is found for same action id, do not create a new speed up transaction.\n    if (this.getTransactionWithActionId(actionId)) {\n      return;\n    }\n\n    if (gasValues) {\n      validateGasValues(gasValues);\n    }\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionId,\n    );\n    /* istanbul ignore next */\n    if (!transactionMeta) {\n      return;\n    }\n\n    /* istanbul ignore next */\n    if (!this.sign) {\n      throw new Error('No sign method defined.');\n    }\n\n    const { transactions } = this.state;\n\n    // gasPrice (legacy non EIP1559)\n    const minGasPrice = getIncreasedPriceFromExisting(\n      transactionMeta.txParams.gasPrice,\n      SPEED_UP_RATE,\n    );\n\n    const gasPriceFromValues = isGasPriceValue(gasValues) && gasValues.gasPrice;\n\n    const newGasPrice =\n      (gasPriceFromValues &&\n        validateMinimumIncrease(gasPriceFromValues, minGasPrice)) ||\n      minGasPrice;\n\n    // maxFeePerGas (EIP1559)\n    const existingMaxFeePerGas = transactionMeta.txParams?.maxFeePerGas;\n    const minMaxFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxFeePerGas,\n      SPEED_UP_RATE,\n    );\n    const maxFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxFeePerGas;\n    const newMaxFeePerGas =\n      (maxFeePerGasValues &&\n        validateMinimumIncrease(maxFeePerGasValues, minMaxFeePerGas)) ||\n      (existingMaxFeePerGas && minMaxFeePerGas);\n\n    // maxPriorityFeePerGas (EIP1559)\n    const existingMaxPriorityFeePerGas =\n      transactionMeta.txParams?.maxPriorityFeePerGas;\n    const minMaxPriorityFeePerGas = getIncreasedPriceFromExisting(\n      existingMaxPriorityFeePerGas,\n      SPEED_UP_RATE,\n    );\n    const maxPriorityFeePerGasValues =\n      isFeeMarketEIP1559Values(gasValues) && gasValues.maxPriorityFeePerGas;\n    const newMaxPriorityFeePerGas =\n      (maxPriorityFeePerGasValues &&\n        validateMinimumIncrease(\n          maxPriorityFeePerGasValues,\n          minMaxPriorityFeePerGas,\n        )) ||\n      (existingMaxPriorityFeePerGas && minMaxPriorityFeePerGas);\n\n    const txParams =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            ...transactionMeta.txParams,\n            gasLimit: transactionMeta.txParams.gas,\n            maxFeePerGas: newMaxFeePerGas,\n            maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            type: 2,\n          }\n        : {\n            ...transactionMeta.txParams,\n            gasLimit: transactionMeta.txParams.gas,\n            gasPrice: newGasPrice,\n          };\n\n    const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n\n    const signedTx = await this.sign(\n      unsignedEthTx,\n      transactionMeta.txParams.from,\n    );\n    await this.updateTransactionMetaRSV(transactionMeta, signedTx);\n    const rawTx = bufferToHex(signedTx.serialize());\n    const hash = await query(this.ethQuery, 'sendRawTransaction', [rawTx]);\n    const baseTransactionMeta = {\n      ...transactionMeta,\n      estimatedBaseFee,\n      id: random(),\n      time: Date.now(),\n      hash,\n      actionId,\n      originalGasEstimate: transactionMeta.txParams.gas,\n      type: TransactionType.retry,\n    };\n    const newTransactionMeta =\n      newMaxFeePerGas && newMaxPriorityFeePerGas\n        ? {\n            ...baseTransactionMeta,\n            txParams: {\n              ...transactionMeta.txParams,\n              maxFeePerGas: newMaxFeePerGas,\n              maxPriorityFeePerGas: newMaxPriorityFeePerGas,\n            },\n          }\n        : {\n            ...baseTransactionMeta,\n            txParams: {\n              ...transactionMeta.txParams,\n              gasPrice: newGasPrice,\n            },\n          };\n    transactions.push(newTransactionMeta);\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n    this.hub.emit(`${transactionMeta.id}:speedup`, newTransactionMeta);\n  }\n\n  /**\n   * Estimates required gas for a given transaction.\n   *\n   * @param transaction - The transaction to estimate gas for.\n   * @returns The gas and gas price.\n   */\n  async estimateGas(transaction: TransactionParams) {\n    const estimatedTransaction = { ...transaction };\n    const {\n      gas,\n      gasPrice: providedGasPrice,\n      to,\n      value,\n      data,\n    } = estimatedTransaction;\n    const gasPrice =\n      typeof providedGasPrice === 'undefined'\n        ? await query(this.ethQuery, 'gasPrice')\n        : providedGasPrice;\n    const { providerConfig } = this.getNetworkState();\n    const isCustomNetwork = providerConfig.type === NetworkType.rpc;\n    // 1. If gas is already defined on the transaction, use it\n    if (typeof gas !== 'undefined') {\n      return { gas, gasPrice };\n    }\n    const { gasLimit } = await query(this.ethQuery, 'getBlockByNumber', [\n      'latest',\n      false,\n    ]);\n\n    // 2. If to is not defined or this is not a contract address, and there is no data use 0x5208 / 21000.\n    // If the network is a custom network then bypass this check and fetch 'estimateGas'.\n    /* istanbul ignore next */\n    const code = to ? await query(this.ethQuery, 'getCode', [to]) : undefined;\n    /* istanbul ignore next */\n    if (\n      !isCustomNetwork &&\n      (!to || (to && !data && (!code || code === '0x')))\n    ) {\n      return { gas: '0x5208', gasPrice };\n    }\n\n    // if data, should be hex string format\n    estimatedTransaction.data = !data\n      ? data\n      : /* istanbul ignore next */ addHexPrefix(data);\n\n    // 3. If this is a contract address, safely estimate gas using RPC\n    estimatedTransaction.value =\n      typeof value === 'undefined' ? '0x0' : /* istanbul ignore next */ value;\n    const gasLimitBN = hexToBN(gasLimit);\n    estimatedTransaction.gas = BNToHex(fractionBN(gasLimitBN, 19, 20));\n\n    let gasHex;\n    let estimateGasError;\n    try {\n      gasHex = await query(this.ethQuery, 'estimateGas', [\n        estimatedTransaction,\n      ]);\n    } catch (error) {\n      estimateGasError = ESTIMATE_GAS_ERROR;\n    }\n    // 4. Pad estimated gas without exceeding the most recent block gasLimit. If the network is a\n    // a custom network then return the eth_estimateGas value.\n    const gasBN = hexToBN(gasHex);\n    const maxGasBN = gasLimitBN.muln(0.9);\n    const paddedGasBN = gasBN.muln(1.5);\n    /* istanbul ignore next */\n    if (gasBN.gt(maxGasBN) || isCustomNetwork) {\n      return { gas: addHexPrefix(gasHex), gasPrice, estimateGasError };\n    }\n\n    /* istanbul ignore next */\n    if (paddedGasBN.lt(maxGasBN)) {\n      return {\n        gas: addHexPrefix(BNToHex(paddedGasBN)),\n        gasPrice,\n        estimateGasError,\n      };\n    }\n    return { gas: addHexPrefix(BNToHex(maxGasBN)), gasPrice, estimateGasError };\n  }\n\n  /**\n   * Check the status of submitted transactions on the network to determine whether they have\n   * been included in a block. Any that have been included in a block are marked as confirmed.\n   */\n  async queryTransactionStatuses() {\n    const { transactions } = this.state;\n    const currentChainId = this.getChainId();\n    let gotUpdates = false;\n    await safelyExecute(() =>\n      Promise.all(\n        transactions.map(async (meta, index) => {\n          if (!meta.verifiedOnBlockchain && meta.chainId === currentChainId) {\n            const [reconciledTx, updateRequired] =\n              await this.blockchainTransactionStateReconciler(meta);\n            if (updateRequired) {\n              transactions[index] = reconciledTx;\n              gotUpdates = updateRequired;\n            }\n          }\n        }),\n      ),\n    );\n\n    /* istanbul ignore else */\n    if (gotUpdates) {\n      this.update({\n        transactions: this.trimTransactionsForState(transactions),\n      });\n    }\n  }\n\n  /**\n   * Updates an existing transaction in state.\n   *\n   * @param transactionMeta - The new transaction to store in state.\n   * @param note - A note or update reason to include in the transaction history.\n   */\n  updateTransaction(transactionMeta: TransactionMeta, note: string) {\n    const { transactions } = this.state;\n    transactionMeta.txParams = normalizeTxParams(transactionMeta.txParams);\n    validateTxParams(transactionMeta.txParams);\n    if (!this.isHistoryDisabled) {\n      updateTransactionHistory(transactionMeta, note);\n    }\n    const index = transactions.findIndex(({ id }) => transactionMeta.id === id);\n    transactions[index] = transactionMeta;\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n  }\n\n  /**\n   * Removes all transactions from state, optionally based on the current network.\n   *\n   * @param ignoreNetwork - Determines whether to wipe all transactions, or just those on the\n   * current network. If `true`, all transactions are wiped.\n   * @param address - If specified, only transactions originating from this address will be\n   * wiped on current network.\n   */\n  wipeTransactions(ignoreNetwork?: boolean, address?: string) {\n    /* istanbul ignore next */\n    if (ignoreNetwork && !address) {\n      this.update({ transactions: [] });\n      return;\n    }\n    const currentChainId = this.getChainId();\n    const newTransactions = this.state.transactions.filter(\n      ({ chainId, txParams }) => {\n        const isMatchingNetwork = ignoreNetwork || chainId === currentChainId;\n\n        if (!isMatchingNetwork) {\n          return true;\n        }\n\n        const isMatchingAddress =\n          !address || txParams.from?.toLowerCase() === address.toLowerCase();\n\n        return !isMatchingAddress;\n      },\n    );\n\n    this.update({\n      transactions: this.trimTransactionsForState(newTransactions),\n    });\n  }\n\n  startIncomingTransactionProcessing() {\n    this.incomingTransactionHelper.start();\n  }\n\n  stopIncomingTransactionProcessing() {\n    this.incomingTransactionHelper.stop();\n  }\n\n  /**\n   * Adds external provided transaction to state as confirmed transaction.\n   *\n   * @param transactionMeta - TransactionMeta to add transactions.\n   * @param transactionReceipt - TransactionReceipt of the external transaction.\n   * @param baseFeePerGas - Base fee per gas of the external transaction.\n   */\n  async confirmExternalTransaction(\n    transactionMeta: TransactionMeta,\n    transactionReceipt: TransactionReceipt,\n    baseFeePerGas: Hex,\n  ) {\n    // Run validation and add external transaction to state.\n    this.addExternalTransaction(transactionMeta);\n\n    try {\n      const transactionId = transactionMeta.id;\n\n      // Make sure status is confirmed and define gasUsed as in receipt.\n      transactionMeta.status = TransactionStatus.confirmed;\n      transactionMeta.txReceipt = transactionReceipt;\n      if (baseFeePerGas) {\n        transactionMeta.baseFeePerGas = baseFeePerGas;\n      }\n\n      // Update same nonce local transactions as dropped and define replacedBy properties.\n      this.markNonceDuplicatesDropped(transactionId);\n\n      // Update external provided transaction with updated gas values and confirmed status.\n      this.updateTransaction(\n        transactionMeta,\n        'TransactionController:confirmExternalTransaction - Add external transaction',\n      );\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Append new send flow history to a transaction.\n   *\n   * @param transactionID - The ID of the transaction to update.\n   * @param currentSendFlowHistoryLength - The length of the current sendFlowHistory array.\n   * @param sendFlowHistoryToAdd - The sendFlowHistory entries to add.\n   * @returns The updated transactionMeta.\n   */\n  updateTransactionSendFlowHistory(\n    transactionID: string,\n    currentSendFlowHistoryLength: number,\n    sendFlowHistoryToAdd: SendFlowHistoryEntry[],\n  ): TransactionMeta {\n    if (this.isSendFlowHistoryDisabled) {\n      throw new Error(\n        'Send flow history is disabled for the current transaction controller',\n      );\n    }\n\n    const transactionMeta = this.getTransaction(transactionID);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update send flow history as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(\n      transactionMeta,\n      'updateTransactionSendFlowHistory',\n    );\n\n    if (\n      currentSendFlowHistoryLength ===\n      (transactionMeta?.sendFlowHistory?.length || 0)\n    ) {\n      transactionMeta.sendFlowHistory = [\n        ...(transactionMeta?.sendFlowHistory ?? []),\n        ...sendFlowHistoryToAdd,\n      ];\n      this.updateTransaction(\n        transactionMeta,\n        'TransactionController:updateTransactionSendFlowHistory - sendFlowHistory updated',\n      );\n    }\n\n    return this.getTransaction(transactionID) as TransactionMeta;\n  }\n\n  /**\n   * Update the gas values of a transaction.\n   *\n   * @param transactionId - The ID of the transaction to update.\n   * @param gasValues - Gas values to update.\n   * @param gasValues.gas - Same as transaction.gasLimit.\n   * @param gasValues.gasLimit - Maxmimum number of units of gas to use for this transaction.\n   * @param gasValues.gasPrice - Price per gas for legacy transactions.\n   * @param gasValues.maxPriorityFeePerGas - Maximum amount per gas to give to validator as incentive.\n   * @param gasValues.maxFeePerGas - Maximum amount per gas to pay for the transaction, including the priority fee.\n   * @param gasValues.estimateUsed - Which estimate level was used.\n   * @param gasValues.estimateSuggested - Which estimate level that the API suggested.\n   * @param gasValues.defaultGasEstimates - The default estimate for gas.\n   * @param gasValues.originalGasEstimate - Original estimate for gas.\n   * @param gasValues.userEditedGasLimit - The gas limit supplied by user.\n   * @param gasValues.userFeeLevel - Estimate level user selected.\n   * @returns The updated transactionMeta.\n   */\n  updateTransactionGasFees(\n    transactionId: string,\n    {\n      defaultGasEstimates,\n      estimateUsed,\n      estimateSuggested,\n      gas,\n      gasLimit,\n      gasPrice,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      originalGasEstimate,\n      userEditedGasLimit,\n      userFeeLevel,\n    }: {\n      defaultGasEstimates?: string;\n      estimateUsed?: string;\n      estimateSuggested?: string;\n      gas?: string;\n      gasLimit?: string;\n      gasPrice?: string;\n      maxPriorityFeePerGas?: string;\n      maxFeePerGas?: string;\n      originalGasEstimate?: string;\n      userEditedGasLimit?: boolean;\n      userFeeLevel?: string;\n    },\n  ): TransactionMeta {\n    const transactionMeta = this.getTransaction(transactionId);\n\n    if (!transactionMeta) {\n      throw new Error(\n        `Cannot update transaction as no transaction metadata found`,\n      );\n    }\n\n    validateIfTransactionUnapproved(\n      transactionMeta,\n      'updateTransactionGasFees',\n    );\n\n    let transactionGasFees = {\n      txParams: {\n        gas,\n        gasLimit,\n        gasPrice,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n      },\n      defaultGasEstimates,\n      estimateUsed,\n      estimateSuggested,\n      originalGasEstimate,\n      userEditedGasLimit,\n      userFeeLevel,\n    } as any;\n\n    // only update what is defined\n    transactionGasFees.txParams = pickBy(transactionGasFees.txParams);\n    transactionGasFees = pickBy(transactionGasFees);\n\n    // merge updated gas values with existing transaction meta\n    const updatedMeta = merge(transactionMeta, transactionGasFees);\n\n    this.updateTransaction(\n      updatedMeta,\n      'TransactionController:updateTransactionGasFees - gas values updated',\n    );\n\n    return this.getTransaction(transactionId) as TransactionMeta;\n  }\n\n  private async processApproval(\n    transactionMeta: TransactionMeta,\n    {\n      isExisting = false,\n      requireApproval,\n      shouldShowRequest = true,\n    }: {\n      isExisting?: boolean;\n      requireApproval?: boolean | undefined;\n      shouldShowRequest?: boolean;\n    },\n  ): Promise<string> {\n    const transactionId = transactionMeta.id;\n    let resultCallbacks: AcceptResultCallbacks | undefined;\n    const { meta, isCompleted } = this.isTransactionCompleted(transactionId);\n    const finishedPromise = isCompleted\n      ? Promise.resolve(meta)\n      : this.waitForTransactionFinished(transactionId);\n\n    if (meta && !isExisting && !isCompleted) {\n      try {\n        if (requireApproval !== false) {\n          const acceptResult = await this.requestApproval(transactionMeta, {\n            shouldShowRequest,\n          });\n          resultCallbacks = acceptResult.resultCallbacks;\n        }\n\n        const { isCompleted: isTxCompleted } =\n          this.isTransactionCompleted(transactionId);\n\n        if (!isTxCompleted) {\n          await this.approveTransaction(transactionId);\n        }\n      } catch (error: any) {\n        const { isCompleted: isTxCompleted } =\n          this.isTransactionCompleted(transactionId);\n        if (!isTxCompleted) {\n          if (error.code === errorCodes.provider.userRejectedRequest) {\n            this.cancelTransaction(transactionId);\n\n            throw providerErrors.userRejectedRequest(\n              'User rejected the transaction',\n            );\n          } else {\n            this.failTransaction(meta, error);\n          }\n        }\n      }\n    }\n\n    const finalMeta = await finishedPromise;\n\n    switch (finalMeta?.status) {\n      case TransactionStatus.failed:\n        resultCallbacks?.error(finalMeta.error);\n        throw rpcErrors.internal(finalMeta.error.message);\n\n      case TransactionStatus.cancelled:\n        const cancelError = rpcErrors.internal(\n          'User cancelled the transaction',\n        );\n\n        resultCallbacks?.error(cancelError);\n        throw cancelError;\n\n      case TransactionStatus.submitted:\n        resultCallbacks?.success();\n        return finalMeta.hash as string;\n\n      default:\n        const internalError = rpcErrors.internal(\n          `MetaMask Tx Signature: Unknown problem: ${JSON.stringify(\n            finalMeta || transactionId,\n          )}`,\n        );\n\n        resultCallbacks?.error(internalError);\n        throw internalError;\n    }\n  }\n\n  /**\n   * Approves a transaction and updates it's status in state. If this is not a\n   * retry transaction, a nonce will be generated. The transaction is signed\n   * using the sign configuration property, then published to the blockchain.\n   * A `<tx.id>:finished` hub event is fired after success or failure.\n   *\n   * @param transactionId - The ID of the transaction to approve.\n   */\n  private async approveTransaction(transactionId: string) {\n    const { transactions } = this.state;\n    const releaseLock = await this.mutex.acquire();\n    const chainId = this.getChainId();\n    const index = transactions.findIndex(({ id }) => transactionId === id);\n    const transactionMeta = transactions[index];\n    const {\n      txParams: { nonce, from },\n    } = transactionMeta;\n    let nonceLock;\n    try {\n      if (!this.sign) {\n        releaseLock();\n        this.failTransaction(\n          transactionMeta,\n          new Error('No sign method defined.'),\n        );\n        return;\n      } else if (!chainId) {\n        releaseLock();\n        this.failTransaction(transactionMeta, new Error('No chainId defined.'));\n        return;\n      }\n\n      const { approved: status } = TransactionStatus;\n      let nonceToUse = nonce;\n      // if a nonce already exists on the transactionMeta it means this is a speedup or cancel transaction\n      // so we want to reuse that nonce and hope that it beats the previous attempt to chain. Otherwise use a new locked nonce\n      if (!nonceToUse) {\n        nonceLock = await this.nonceTracker.getNonceLock(from);\n        nonceToUse = addHexPrefix(nonceLock.nextNonce.toString(16));\n      }\n\n      transactionMeta.status = status;\n      transactionMeta.txParams.nonce = nonceToUse;\n      transactionMeta.txParams.chainId = chainId;\n\n      const baseTxParams = {\n        ...transactionMeta.txParams,\n        gasLimit: transactionMeta.txParams.gas,\n      };\n\n      const isEIP1559 = isEIP1559Transaction(transactionMeta.txParams);\n\n      const txParams = isEIP1559\n        ? {\n            ...baseTxParams,\n            maxFeePerGas: transactionMeta.txParams.maxFeePerGas,\n            maxPriorityFeePerGas: transactionMeta.txParams.maxPriorityFeePerGas,\n            estimatedBaseFee: transactionMeta.txParams.estimatedBaseFee,\n            // specify type 2 if maxFeePerGas and maxPriorityFeePerGas are set\n            type: 2,\n          }\n        : baseTxParams;\n\n      // delete gasPrice if maxFeePerGas and maxPriorityFeePerGas are set\n      if (isEIP1559) {\n        delete txParams.gasPrice;\n      }\n\n      const unsignedEthTx = this.prepareUnsignedEthTx(txParams);\n      const signedTx = await this.sign(unsignedEthTx, from);\n      await this.updateTransactionMetaRSV(transactionMeta, signedTx);\n      transactionMeta.status = TransactionStatus.signed;\n      this.updateTransaction(\n        transactionMeta,\n        'TransactionController#approveTransaction - Transaction signed',\n      );\n\n      const rawTx = bufferToHex(signedTx.serialize());\n      transactionMeta.rawTx = rawTx;\n      this.updateTransaction(\n        transactionMeta,\n        'TransactionController#approveTransaction - RawTransaction added',\n      );\n      const hash = await query(this.ethQuery, 'sendRawTransaction', [rawTx]);\n      transactionMeta.hash = hash;\n      transactionMeta.status = TransactionStatus.submitted;\n      transactionMeta.submittedTime = new Date().getTime();\n      this.updateTransaction(\n        transactionMeta,\n        'TransactionController#approveTransaction - Transaction submitted',\n      );\n      this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n    } catch (error: any) {\n      this.failTransaction(transactionMeta, error);\n    } finally {\n      // must set transaction to submitted/failed before releasing lock\n      if (nonceLock) {\n        nonceLock.releaseLock();\n      }\n      releaseLock();\n    }\n  }\n\n  /**\n   * Cancels a transaction based on its ID by setting its status to \"rejected\"\n   * and emitting a `<tx.id>:finished` hub event.\n   *\n   * @param transactionId - The ID of the transaction to cancel.\n   */\n  private cancelTransaction(transactionId: string) {\n    const transactionMeta = this.state.transactions.find(\n      ({ id }) => id === transactionId,\n    );\n    if (!transactionMeta) {\n      return;\n    }\n    transactionMeta.status = TransactionStatus.rejected;\n    this.hub.emit(`${transactionMeta.id}:finished`, transactionMeta);\n    const transactions = this.state.transactions.filter(\n      ({ id }) => id !== transactionId,\n    );\n    this.update({ transactions: this.trimTransactionsForState(transactions) });\n  }\n\n  /**\n   * Trim the amount of transactions that are set on the state. Checks\n   * if the length of the tx history is longer then desired persistence\n   * limit and then if it is removes the oldest confirmed or rejected tx.\n   * Pending or unapproved transactions will not be removed by this\n   * operation. For safety of presenting a fully functional transaction UI\n   * representation, this function will not break apart transactions with the\n   * same nonce, created on the same day, per network. Not accounting for transactions of the same\n   * nonce, same day and network combo can result in confusing or broken experiences\n   * in the UI. The transactions are then updated using the BaseController update.\n   *\n   * @param transactions - The transactions to be applied to the state.\n   * @returns The trimmed list of transactions.\n   */\n  private trimTransactionsForState(\n    transactions: TransactionMeta[],\n  ): TransactionMeta[] {\n    const nonceNetworkSet = new Set();\n\n    const txsToKeep = transactions\n      .sort((a, b) => (a.time > b.time ? -1 : 1)) // Descending time order\n      .filter((tx) => {\n        const { chainId, status, txParams, time } = tx;\n\n        if (txParams) {\n          const key = `${txParams.nonce}-${convertHexToDecimal(\n            chainId,\n          )}-${new Date(time).toDateString()}`;\n\n          if (nonceNetworkSet.has(key)) {\n            return true;\n          } else if (\n            nonceNetworkSet.size < this.config.txHistoryLimit ||\n            !this.isFinalState(status)\n          ) {\n            nonceNetworkSet.add(key);\n            return true;\n          }\n        }\n\n        return false;\n      });\n\n    txsToKeep.reverse(); // Ascending time order\n    return txsToKeep;\n  }\n\n  /**\n   * Determines if the transaction is in a final state.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isFinalState(status: TransactionStatus): boolean {\n    return (\n      status === TransactionStatus.rejected ||\n      status === TransactionStatus.confirmed ||\n      status === TransactionStatus.failed ||\n      status === TransactionStatus.cancelled\n    );\n  }\n\n  /**\n   * Whether the transaction has at least completed all local processing.\n   *\n   * @param status - The transaction status.\n   * @returns Whether the transaction is in a final state.\n   */\n  private isLocalFinalState(status: TransactionStatus): boolean {\n    return [\n      TransactionStatus.cancelled,\n      TransactionStatus.confirmed,\n      TransactionStatus.failed,\n      TransactionStatus.rejected,\n      TransactionStatus.submitted,\n    ].includes(status);\n  }\n\n  /**\n   * Method to verify the state of a transaction using the Blockchain as a source of truth.\n   *\n   * @param meta - The local transaction to verify on the blockchain.\n   * @returns A tuple containing the updated transaction, and whether or not an update was required.\n   */\n  private async blockchainTransactionStateReconciler(\n    meta: TransactionMeta,\n  ): Promise<[TransactionMeta, boolean]> {\n    const { status, hash } = meta;\n    switch (status) {\n      case TransactionStatus.confirmed:\n        const txReceipt = await query(this.ethQuery, 'getTransactionReceipt', [\n          hash,\n        ]);\n\n        if (!txReceipt) {\n          return [meta, false];\n        }\n\n        const txBlock = await query(this.ethQuery, 'getBlockByHash', [\n          txReceipt.blockHash,\n        ]);\n\n        meta.verifiedOnBlockchain = true;\n        meta.txParams.gasUsed = txReceipt.gasUsed;\n        meta.txReceipt = txReceipt;\n        meta.baseFeePerGas = txBlock?.baseFeePerGas;\n        meta.blockTimestamp = txBlock?.timestamp;\n\n        // According to the Web3 docs:\n        // TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.\n        if (Number(txReceipt.status) === 0) {\n          const error: Error = new Error(\n            'Transaction failed. The transaction was reversed',\n          );\n          this.failTransaction(meta, error);\n          return [meta, false];\n        }\n\n        return [meta, true];\n      case TransactionStatus.submitted:\n        const txObj = await query(this.ethQuery, 'getTransactionByHash', [\n          hash,\n        ]);\n\n        if (!txObj) {\n          const receiptShowsFailedStatus =\n            await this.checkTxReceiptStatusIsFailed(hash);\n\n          // Case the txObj is evaluated as false, a second check will\n          // determine if the tx failed or it is pending or confirmed\n          if (receiptShowsFailedStatus) {\n            const error: Error = new Error(\n              'Transaction failed. The transaction was dropped or replaced by a new one',\n            );\n            this.failTransaction(meta, error);\n          }\n        }\n\n        /* istanbul ignore next */\n        if (txObj?.blockNumber) {\n          meta.status = TransactionStatus.confirmed;\n          this.hub.emit(`${meta.id}:confirmed`, meta);\n          return [meta, true];\n        }\n\n        return [meta, false];\n      default:\n        return [meta, false];\n    }\n  }\n\n  /**\n   * Method to check if a tx has failed according to their receipt\n   * According to the Web3 docs:\n   * TRUE if the transaction was successful, FALSE if the EVM reverted the transaction.\n   * The receipt is not available for pending transactions and returns null.\n   *\n   * @param txHash - The transaction hash.\n   * @returns Whether the transaction has failed.\n   */\n  private async checkTxReceiptStatusIsFailed(\n    txHash: string | undefined,\n  ): Promise<boolean> {\n    const txReceipt = await query(this.ethQuery, 'getTransactionReceipt', [\n      txHash,\n    ]);\n    if (!txReceipt) {\n      // Transaction is pending\n      return false;\n    }\n    return Number(txReceipt.status) === 0;\n  }\n\n  private async requestApproval(\n    txMeta: TransactionMeta,\n    { shouldShowRequest }: { shouldShowRequest: boolean },\n  ): Promise<AddResult> {\n    const id = this.getApprovalId(txMeta);\n    const { origin } = txMeta;\n    const type = ApprovalType.Transaction;\n    const requestData = { txId: txMeta.id };\n\n    return (await this.messagingSystem.call(\n      'ApprovalController:addRequest',\n      {\n        id,\n        origin: origin || ORIGIN_METAMASK,\n        type,\n        requestData,\n        expectsResult: true,\n      },\n      shouldShowRequest,\n    )) as Promise<AddResult>;\n  }\n\n  private getTransaction(transactionId: string): TransactionMeta | undefined {\n    const { transactions } = this.state;\n    return transactions.find(({ id }) => id === transactionId);\n  }\n\n  private getApprovalId(txMeta: TransactionMeta) {\n    return String(txMeta.id);\n  }\n\n  private isTransactionCompleted(transactionId: string): {\n    meta?: TransactionMeta;\n    isCompleted: boolean;\n  } {\n    const transaction = this.getTransaction(transactionId);\n\n    if (!transaction) {\n      return { meta: undefined, isCompleted: false };\n    }\n\n    const isCompleted = this.isLocalFinalState(transaction.status);\n\n    return { meta: transaction, isCompleted };\n  }\n\n  private getChainId(): Hex {\n    const { providerConfig } = this.getNetworkState();\n    return providerConfig.chainId;\n  }\n\n  private prepareUnsignedEthTx(\n    txParams: Record<string, unknown>,\n  ): TypedTransaction {\n    return TransactionFactory.fromTxData(txParams, {\n      common: this.getCommonConfiguration(),\n      freeze: false,\n    });\n  }\n\n  /**\n   * `@ethereumjs/tx` uses `@ethereumjs/common` as a configuration tool for\n   * specifying which chain, network, hardfork and EIPs to support for\n   * a transaction. By referencing this configuration, and analyzing the fields\n   * specified in txParams, @ethereumjs/tx is able to determine which EIP-2718\n   * transaction type to use.\n   *\n   * @returns common configuration object\n   */\n  private getCommonConfiguration(): Common {\n    const {\n      providerConfig: { type: chain, chainId, nickname: name },\n    } = this.getNetworkState();\n\n    if (\n      chain !== RPC &&\n      chain !== NetworkType['linea-goerli'] &&\n      chain !== NetworkType['linea-mainnet']\n    ) {\n      return new Common({ chain, hardfork: HARDFORK });\n    }\n\n    const customChainParams: Partial<ChainConfig> = {\n      name,\n      chainId: parseInt(chainId, 16),\n      defaultHardfork: HARDFORK,\n    };\n\n    return Common.custom(customChainParams);\n  }\n\n  private onIncomingTransactions({\n    added,\n    updated,\n  }: {\n    added: TransactionMeta[];\n    updated: TransactionMeta[];\n  }) {\n    const { transactions: currentTransactions } = this.state;\n\n    const updatedTransactions = [\n      ...added,\n      ...currentTransactions.map((originalTransaction) => {\n        const updatedTransaction = updated.find(\n          ({ hash }) => hash === originalTransaction.hash,\n        );\n\n        return updatedTransaction ?? originalTransaction;\n      }),\n    ];\n\n    this.update({\n      transactions: this.trimTransactionsForState(updatedTransactions),\n    });\n  }\n\n  private onUpdatedLastFetchedBlockNumbers({\n    lastFetchedBlockNumbers,\n    blockNumber,\n  }: {\n    lastFetchedBlockNumbers: {\n      [key: string]: number;\n    };\n    blockNumber: number;\n  }) {\n    this.update({ lastFetchedBlockNumbers });\n    this.hub.emit('incomingTransactionBlock', blockNumber);\n  }\n\n  private generateDappSuggestedGasFees(\n    txParams: TransactionParams,\n    origin?: string,\n  ): DappSuggestedGasFees | undefined {\n    if (!origin || origin === ORIGIN_METAMASK) {\n      return undefined;\n    }\n\n    const { gasPrice, maxFeePerGas, maxPriorityFeePerGas, gas } = txParams;\n\n    if (\n      gasPrice === undefined &&\n      maxFeePerGas === undefined &&\n      maxPriorityFeePerGas === undefined &&\n      gas === undefined\n    ) {\n      return undefined;\n    }\n\n    const dappSuggestedGasFees: DappSuggestedGasFees = {};\n\n    if (gasPrice !== undefined) {\n      dappSuggestedGasFees.gasPrice = gasPrice;\n    } else if (\n      maxFeePerGas !== undefined ||\n      maxPriorityFeePerGas !== undefined\n    ) {\n      dappSuggestedGasFees.maxFeePerGas = maxFeePerGas;\n      dappSuggestedGasFees.maxPriorityFeePerGas = maxPriorityFeePerGas;\n    }\n\n    if (gas !== undefined) {\n      dappSuggestedGasFees.gas = gas;\n    }\n\n    return dappSuggestedGasFees;\n  }\n\n  /**\n   * Validates and adds external provided transaction to state.\n   *\n   * @param transactionMeta - Nominated external transaction to be added to state.\n   */\n  private async addExternalTransaction(transactionMeta: TransactionMeta) {\n    const chainId = this.getChainId();\n    const { transactions } = this.state;\n    const fromAddress = transactionMeta?.txParams?.from;\n    const sameFromAndNetworkTransactions = transactions.filter(\n      (transaction) =>\n        transaction.txParams.from === fromAddress &&\n        transaction.chainId === chainId,\n    );\n    const confirmedTxs = sameFromAndNetworkTransactions.filter(\n      (transaction) => transaction.status === TransactionStatus.confirmed,\n    );\n    const pendingTxs = sameFromAndNetworkTransactions.filter(\n      (transaction) => transaction.status === TransactionStatus.submitted,\n    );\n\n    validateConfirmedExternalTransaction(\n      transactionMeta,\n      confirmedTxs,\n      pendingTxs,\n    );\n\n    // Make sure provided external transaction has non empty history array\n    if (!(transactionMeta.history ?? []).length) {\n      if (!this.isHistoryDisabled) {\n        addInitialHistorySnapshot(transactionMeta);\n      }\n    }\n\n    const updatedTransactions = [...transactions, transactionMeta];\n    this.update({\n      transactions: this.trimTransactionsForState(updatedTransactions),\n    });\n  }\n\n  /**\n   * Sets other txMeta statuses to dropped if the txMeta that has been confirmed has other transactions\n   * in the transactions have the same nonce.\n   *\n   * @param transactionId - Used to identify original transaction.\n   */\n  private markNonceDuplicatesDropped(transactionId: string) {\n    const chainId = this.getChainId();\n    const transactionMeta = this.getTransaction(transactionId);\n    const nonce = transactionMeta?.txParams?.nonce;\n    const from = transactionMeta?.txParams?.from;\n    const sameNonceTxs = this.state.transactions.filter(\n      (transaction) =>\n        transaction.txParams.from === from &&\n        transaction.txParams.nonce === nonce &&\n        transaction.chainId === chainId,\n    );\n\n    if (!sameNonceTxs.length) {\n      return;\n    }\n\n    // Mark all same nonce transactions as dropped and give it a replacedBy hash\n    for (const transaction of sameNonceTxs) {\n      if (transaction.id === transactionId) {\n        continue;\n      }\n      transaction.replacedBy = transactionMeta?.hash;\n      transaction.replacedById = transactionMeta?.id;\n      // Drop any transaction that wasn't previously failed (off chain failure)\n      if (transaction.status !== TransactionStatus.failed) {\n        this.setTransactionStatusDropped(transaction);\n      }\n    }\n  }\n\n  /**\n   * Method to set transaction status to dropped.\n   *\n   * @param transactionMeta - TransactionMeta of transaction to be marked as dropped.\n   */\n  private setTransactionStatusDropped(transactionMeta: TransactionMeta) {\n    transactionMeta.status = TransactionStatus.dropped;\n    this.updateTransaction(\n      transactionMeta,\n      'TransactionController#setTransactionStatusDropped - Transaction dropped',\n    );\n  }\n\n  /**\n   * Get transaction with provided actionId.\n   *\n   * @param actionId - Unique ID to prevent duplicate requests\n   * @returns the filtered transaction\n   */\n  private getTransactionWithActionId(actionId?: string) {\n    return this.state.transactions.find(\n      (transaction) => actionId && transaction.actionId === actionId,\n    );\n  }\n\n  private async waitForTransactionFinished(\n    transactionId: string,\n  ): Promise<TransactionMeta> {\n    return new Promise((resolve) => {\n      this.hub.once(`${transactionId}:finished`, (txMeta) => {\n        resolve(txMeta);\n      });\n    });\n  }\n\n  /**\n   * Updates the r, s, and v properties of a TransactionMeta object\n   * with values from a signed transaction.\n   *\n   * @param transactionMeta - The TransactionMeta object to update.\n   * @param signedTx - The encompassing type for all transaction types containing r, s, and v values.\n   */\n  private async updateTransactionMetaRSV(\n    transactionMeta: TransactionMeta,\n    signedTx: TypedTransaction,\n  ): Promise<void> {\n    if (signedTx.r) {\n      transactionMeta.r = addHexPrefix(signedTx.r.toString(16));\n    }\n\n    if (signedTx.s) {\n      transactionMeta.s = addHexPrefix(signedTx.s.toString(16));\n    }\n\n    if (signedTx.v) {\n      transactionMeta.v = addHexPrefix(signedTx.v.toString(16));\n    }\n  }\n\n  private async getEIP1559Compatibility() {\n    const currentNetworkIsEIP1559Compatible =\n      await this.getCurrentNetworkEIP1559Compatibility();\n    const currentAccountIsEIP1559Compatible =\n      this.getCurrentAccountEIP1559Compatibility?.() ?? true;\n\n    return (\n      currentNetworkIsEIP1559Compatible && currentAccountIsEIP1559Compatible\n    );\n  }\n}\n\nexport default TransactionController;\n"]}
\ No newline at end of file
diff --git a/dist/constants.d.ts.map b/dist/constants.d.ts.map
deleted file mode 100644
index 7fe8678b5c15d4e8452f4cf0e1edc4ca15586e90..0000000000000000000000000000000000000000
--- a/dist/constants.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"constants.d.ts","sourceRoot":"","sources":["../src/constants.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAE1C,eAAO,MAAM,SAAS;;;;;;;;;;;;;;;;;;;;CAoBZ,CAAC;AAEX,eAAO,MAAM,wBAAwB,iBAAiB,CAAC;AACvD,eAAO,MAAM,kCAAkC,QAAQ,CAAC;AAExD,eAAO,MAAM,4BAA4B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6ExC,CAAC;AAEF,eAAO,MAAM,sBAAsB,mBAGlC,CAAC;AAIF,eAAO,MAAM,kCAAkC,mBAM9C,CAAC"}
\ No newline at end of file
diff --git a/dist/constants.js.map b/dist/constants.js.map
deleted file mode 100644
index 8e7d44418431f9848406325f9e49aa36d94d1ee1..0000000000000000000000000000000000000000
--- a/dist/constants.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"constants.js","sourceRoot":"","sources":["../src/constants.ts"],"names":[],"mappings":"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","sourcesContent":["import { TransactionType } from './types';\n\nexport const CHAIN_IDS = {\n  MAINNET: '0x1',\n  GOERLI: '0x5',\n  BSC: '0x38',\n  BSC_TESTNET: '0x61',\n  OPTIMISM: '0xa',\n  OPTIMISM_TESTNET: '0x1a4',\n  POLYGON: '0x89',\n  POLYGON_TESTNET: '0x13881',\n  AVALANCHE: '0xa86a',\n  AVALANCHE_TESTNET: '0xa869',\n  FANTOM: '0xfa',\n  FANTOM_TESTNET: '0xfa2',\n  SEPOLIA: '0xaa36a7',\n  LINEA_GOERLI: '0xe704',\n  LINEA_MAINNET: '0xe708',\n  MOONBEAM: '0x504',\n  MOONBEAM_TESTNET: '0x507',\n  MOONRIVER: '0x505',\n  GNOSIS: '0x64',\n} as const;\n\nexport const DEFAULT_ETHERSCAN_DOMAIN = 'etherscan.io';\nexport const DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX = 'api';\n\nexport const ETHERSCAN_SUPPORTED_NETWORKS = {\n  [CHAIN_IDS.GOERLI]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-goerli`,\n  },\n  [CHAIN_IDS.MAINNET]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.SEPOLIA]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-sepolia`,\n  },\n  [CHAIN_IDS.LINEA_GOERLI]: {\n    domain: 'lineascan.build',\n    subdomain: 'goerli',\n  },\n  [CHAIN_IDS.LINEA_MAINNET]: {\n    domain: 'lineascan.build',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.BSC]: {\n    domain: 'bscscan.com',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.BSC_TESTNET]: {\n    domain: 'bscscan.com',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`,\n  },\n  [CHAIN_IDS.OPTIMISM]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-optimistic`,\n  },\n  [CHAIN_IDS.OPTIMISM_TESTNET]: {\n    domain: DEFAULT_ETHERSCAN_DOMAIN,\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-goerli-optimistic`,\n  },\n  [CHAIN_IDS.POLYGON]: {\n    domain: 'polygonscan.com',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.POLYGON_TESTNET]: {\n    domain: 'polygonscan.com',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-mumbai`,\n  },\n  [CHAIN_IDS.AVALANCHE]: {\n    domain: 'snowtrace.io',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.AVALANCHE_TESTNET]: {\n    domain: 'snowtrace.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`,\n  },\n  [CHAIN_IDS.FANTOM]: {\n    domain: 'ftmscan.com',\n    subdomain: DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX,\n  },\n  [CHAIN_IDS.FANTOM_TESTNET]: {\n    domain: 'ftmscan.com',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-testnet`,\n  },\n  [CHAIN_IDS.MOONBEAM]: {\n    domain: 'moonscan.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonbeam`,\n  },\n  [CHAIN_IDS.MOONBEAM_TESTNET]: {\n    domain: 'moonscan.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonbase`,\n  },\n  [CHAIN_IDS.MOONRIVER]: {\n    domain: 'moonscan.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-moonriver`,\n  },\n  [CHAIN_IDS.GNOSIS]: {\n    domain: 'gnosisscan.io',\n    subdomain: `${DEFAULT_ETHERSCAN_SUBDOMAIN_PREFIX}-gnosis`,\n  },\n};\n\nexport const SWAP_TRANSACTION_TYPES = [\n  TransactionType.swap,\n  TransactionType.swapApproval,\n];\n\n// Only certain types of transactions should be allowed to be specified when\n// adding a new unapproved transaction.\nexport const VALID_UNAPPROVED_TRANSACTION_TYPES = [\n  ...SWAP_TRANSACTION_TYPES,\n  TransactionType.simpleSend,\n  TransactionType.tokenMethodTransfer,\n  TransactionType.tokenMethodTransferFrom,\n  TransactionType.contractInteraction,\n];\n"]}
\ No newline at end of file
diff --git a/dist/etherscan.d.ts.map b/dist/etherscan.d.ts.map
deleted file mode 100644
index 089ab8f0849458b29fb09eac3971841a758bf5f6..0000000000000000000000000000000000000000
--- a/dist/etherscan.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"etherscan.d.ts","sourceRoot":"","sources":["../src/etherscan.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,iBAAiB,CAAC;AAK3C,MAAM,WAAW,4BAA4B;IAC3C,WAAW,EAAE,MAAM,CAAC;IACpB,SAAS,EAAE,MAAM,CAAC;IAClB,aAAa,EAAE,MAAM,CAAC;IACtB,eAAe,EAAE,MAAM,CAAC;IACxB,iBAAiB,EAAE,MAAM,CAAC;IAC1B,IAAI,EAAE,MAAM,CAAC;IACb,GAAG,EAAE,MAAM,CAAC;IACZ,QAAQ,EAAE,MAAM,CAAC;IACjB,OAAO,EAAE,MAAM,CAAC;IAChB,IAAI,EAAE,MAAM,CAAC;IACb,KAAK,EAAE,MAAM,CAAC;IACd,SAAS,EAAE,MAAM,CAAC;IAClB,EAAE,EAAE,MAAM,CAAC;IACX,gBAAgB,EAAE,MAAM,CAAC;IACzB,KAAK,EAAE,MAAM,CAAC;CACf;AAED,MAAM,WAAW,wBAAyB,SAAQ,4BAA4B;IAC5E,YAAY,EAAE,MAAM,CAAC;IACrB,KAAK,EAAE,MAAM,CAAC;IACd,OAAO,EAAE,MAAM,CAAC;IAChB,QAAQ,EAAE,MAAM,CAAC;IACjB,gBAAgB,EAAE,MAAM,CAAC;CAC1B;AAED,MAAM,WAAW,6BACf,SAAQ,4BAA4B;IACpC,YAAY,EAAE,MAAM,CAAC;IACrB,SAAS,EAAE,MAAM,CAAC;IAClB,WAAW,EAAE,MAAM,CAAC;CACrB;AAED,MAAM,WAAW,4BAA4B,CAC3C,CAAC,SAAS,4BAA4B;IAEtC,MAAM,EAAE,GAAG,GAAG,GAAG,CAAC;IAClB,OAAO,CAAC,EAAE,MAAM,CAAC;IACjB,MAAM,EAAE,MAAM,GAAG,CAAC,EAAE,CAAC;CACtB;AAED,MAAM,WAAW,2BAA2B;IAC1C,OAAO,EAAE,MAAM,CAAC;IAChB,OAAO,EAAE,GAAG,CAAC;IACb,SAAS,CAAC,EAAE,MAAM,CAAC;IACnB,KAAK,CAAC,EAAE,MAAM,CAAC;CAChB;AAED;;;;;;;;;GASG;AACH,wBAAsB,0BAA0B,CAAC,EAC/C,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GACN,EAAE,2BAA2B,GAAG,OAAO,CACtC,4BAA4B,CAAC,wBAAwB,CAAC,CACvD,CAOA;AAED;;;;;;;;;GASG;AACH,wBAAsB,+BAA+B,CAAC,EACpD,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GACN,EAAE,2BAA2B,GAAG,OAAO,CACtC,4BAA4B,CAAC,6BAA6B,CAAC,CAC5D,CAOA"}
\ No newline at end of file
diff --git a/dist/etherscan.js.map b/dist/etherscan.js.map
deleted file mode 100644
index 070ac33a25719d7ac0a02e2e370bcd98ace1381c..0000000000000000000000000000000000000000
--- a/dist/etherscan.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"etherscan.js","sourceRoot":"","sources":["../src/etherscan.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,iEAAyD;AAGzD,2CAA2D;AAC3D,qCAA6D;AAkD7D;;;;;;;;;GASG;AACH,SAAsB,0BAA0B,CAAC,EAC/C,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GACuB;;QAG5B,OAAO,MAAM,iBAAiB,CAAC,QAAQ,EAAE;YACvC,OAAO;YACP,OAAO;YACP,SAAS;YACT,KAAK;SACN,CAAC,CAAC;IACL,CAAC;CAAA;AAdD,gEAcC;AAED;;;;;;;;;GASG;AACH,SAAsB,+BAA+B,CAAC,EACpD,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GACuB;;QAG5B,OAAO,MAAM,iBAAiB,CAAC,SAAS,EAAE;YACxC,OAAO;YACP,OAAO;YACP,SAAS;YACT,KAAK;SACN,CAAC,CAAC;IACL,CAAC;CAAA;AAdD,0EAcC;AAED;;;;;;;;;;GAUG;AACH,SAAe,iBAAiB,CAC9B,MAAc,EACd,EACE,OAAO,EACP,OAAO,EACP,SAAS,EACT,KAAK,GAMN;;QAED,MAAM,SAAS,GAAG;YAChB,MAAM,EAAE,SAAS;YACjB,OAAO;YACP,UAAU,EAAE,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,QAAQ,EAAE;YACjC,MAAM,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,QAAQ,EAAE;YACzB,IAAI,EAAE,MAAM;SACb,CAAC;QAEF,MAAM,cAAc,GAAG,kBAAkB,CAAC,OAAO,kCAC5C,SAAS,KACZ,MAAM,IACN,CAAC;QAEH,IAAA,mCAAG,EAAC,2BAA2B,EAAE,cAAc,CAAC,CAAC;QAEjD,MAAM,QAAQ,GAAG,CAAC,MAAM,IAAA,8BAAW,EACjC,cAAc,CACf,CAAoC,CAAC;QAEtC,OAAO,QAAQ,CAAC;IAClB,CAAC;CAAA;AAED;;;;;;GAMG;AACH,SAAS,kBAAkB,CACzB,OAAY,EACZ,SAA6C;IAI7C,MAAM,WAAW,GAAG,wCAA4B,CAAC,OAA2B,CAAC,CAAC;IAE9E,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,6CAA6C,OAAO,EAAE,CAAC,CAAC;KACzE;IAED,MAAM,MAAM,GAAG,WAAW,WAAW,CAAC,SAAS,IAAI,WAAW,CAAC,MAAM,EAAE,CAAC;IACxE,IAAI,GAAG,GAAG,GAAG,MAAM,OAAO,CAAC;IAE3B,wCAAwC;IACxC,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,MAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;QAElC,IAAI,CAAC,KAAK,EAAE;YACV,SAAS;SACV;QAED,GAAG,IAAI,GAAG,QAAQ,IAAI,KAAK,GAAG,CAAC;KAChC;IAED,GAAG,IAAI,mBAAmB,CAAC;IAE3B,OAAO,GAAG,CAAC;AACb,CAAC","sourcesContent":["import { handleFetch } from '@metamask/controller-utils';\nimport type { Hex } from '@metamask/utils';\n\nimport { ETHERSCAN_SUPPORTED_NETWORKS } from './constants';\nimport { incomingTransactionsLogger as log } from './logger';\n\nexport interface EtherscanTransactionMetaBase {\n  blockNumber: string;\n  blockHash: string;\n  confirmations: string;\n  contractAddress: string;\n  cumulativeGasUsed: string;\n  from: string;\n  gas: string;\n  gasPrice: string;\n  gasUsed: string;\n  hash: string;\n  nonce: string;\n  timeStamp: string;\n  to: string;\n  transactionIndex: string;\n  value: string;\n}\n\nexport interface EtherscanTransactionMeta extends EtherscanTransactionMetaBase {\n  functionName: string;\n  input: string;\n  isError: string;\n  methodId: string;\n  txreceipt_status: string;\n}\n\nexport interface EtherscanTokenTransactionMeta\n  extends EtherscanTransactionMetaBase {\n  tokenDecimal: string;\n  tokenName: string;\n  tokenSymbol: string;\n}\n\nexport interface EtherscanTransactionResponse<\n  T extends EtherscanTransactionMetaBase,\n> {\n  status: '0' | '1';\n  message?: string;\n  result: string | T[];\n}\n\nexport interface EtherscanTransactionRequest {\n  address: string;\n  chainId: Hex;\n  fromBlock?: number;\n  limit?: number;\n}\n\n/**\n * Retrieves transaction data from Etherscan.\n *\n * @param request - Configuration required to fetch transactions.\n * @param request.address - Address to retrieve transactions for.\n * @param request.chainId - Current chain ID used to determine subdomain and domain.\n * @param request.fromBlock - Block number to start fetching transactions from.\n * @param request.limit - Number of transactions to retrieve.\n * @returns An Etherscan response object containing the request status and an array of token transaction data.\n */\nexport async function fetchEtherscanTransactions({\n  address,\n  chainId,\n  fromBlock,\n  limit,\n}: EtherscanTransactionRequest): Promise<\n  EtherscanTransactionResponse<EtherscanTransactionMeta>\n> {\n  return await fetchTransactions('txlist', {\n    address,\n    chainId,\n    fromBlock,\n    limit,\n  });\n}\n\n/**\n * Retrieves token transaction data from Etherscan.\n *\n * @param request - Configuration required to fetch token transactions.\n * @param request.address - Address to retrieve token transactions for.\n * @param request.chainId - Current chain ID used to determine subdomain and domain.\n * @param request.fromBlock - Block number to start fetching token transactions from.\n * @param request.limit - Number of token transactions to retrieve.\n * @returns An Etherscan response object containing the request status and an array of token transaction data.\n */\nexport async function fetchEtherscanTokenTransactions({\n  address,\n  chainId,\n  fromBlock,\n  limit,\n}: EtherscanTransactionRequest): Promise<\n  EtherscanTransactionResponse<EtherscanTokenTransactionMeta>\n> {\n  return await fetchTransactions('tokentx', {\n    address,\n    chainId,\n    fromBlock,\n    limit,\n  });\n}\n\n/**\n * Retrieves transaction data from Etherscan from a specific endpoint.\n *\n * @param action - The Etherscan endpoint to use.\n * @param options - Options bag.\n * @param options.address - Address to retrieve transactions for.\n * @param options.chainId - Current chain ID used to determine subdomain and domain.\n * @param options.fromBlock - Block number to start fetching transactions from.\n * @param options.limit - Number of transactions to retrieve.\n * @returns An object containing the request status and an array of transaction data.\n */\nasync function fetchTransactions<T extends EtherscanTransactionMetaBase>(\n  action: string,\n  {\n    address,\n    chainId,\n    fromBlock,\n    limit,\n  }: {\n    address: string;\n    chainId: Hex;\n    fromBlock?: number;\n    limit?: number;\n  },\n): Promise<EtherscanTransactionResponse<T>> {\n  const urlParams = {\n    module: 'account',\n    address,\n    startBlock: fromBlock?.toString(),\n    offset: limit?.toString(),\n    sort: 'desc',\n  };\n\n  const etherscanTxUrl = getEtherscanApiUrl(chainId, {\n    ...urlParams,\n    action,\n  });\n\n  log('Sending Etherscan request', etherscanTxUrl);\n\n  const response = (await handleFetch(\n    etherscanTxUrl,\n  )) as EtherscanTransactionResponse<T>;\n\n  return response;\n}\n\n/**\n * Return a URL that can be used to fetch data from Etherscan.\n *\n * @param chainId - Current chain ID used to determine subdomain and domain.\n * @param urlParams - The parameters used to construct the URL.\n * @returns URL to access Etherscan data.\n */\nfunction getEtherscanApiUrl(\n  chainId: Hex,\n  urlParams: Record<string, string | undefined>,\n): string {\n  type SupportedChainId = keyof typeof ETHERSCAN_SUPPORTED_NETWORKS;\n\n  const networkInfo = ETHERSCAN_SUPPORTED_NETWORKS[chainId as SupportedChainId];\n\n  if (!networkInfo) {\n    throw new Error(`Etherscan does not support chain with ID: ${chainId}`);\n  }\n\n  const apiUrl = `https://${networkInfo.subdomain}.${networkInfo.domain}`;\n  let url = `${apiUrl}/api?`;\n\n  // eslint-disable-next-line guard-for-in\n  for (const paramKey in urlParams) {\n    const value = urlParams[paramKey];\n\n    if (!value) {\n      continue;\n    }\n\n    url += `${paramKey}=${value}&`;\n  }\n\n  url += 'tag=latest&page=1';\n\n  return url;\n}\n"]}
\ No newline at end of file
diff --git a/dist/external-transactions.d.ts.map b/dist/external-transactions.d.ts.map
deleted file mode 100644
index 4a72b532a67ee7f2ea994eff94ff9a92f9535cb7..0000000000000000000000000000000000000000
--- a/dist/external-transactions.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"external-transactions.d.ts","sourceRoot":"","sources":["../src/external-transactions.ts"],"names":[],"mappings":"AAIA,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAE/C;;;;;;GAMG;AACH,wBAAgB,oCAAoC,CAClD,eAAe,CAAC,EAAE,eAAe,EACjC,YAAY,CAAC,EAAE,eAAe,EAAE,EAChC,UAAU,CAAC,EAAE,eAAe,EAAE,QAoC/B"}
\ No newline at end of file
diff --git a/dist/external-transactions.js.map b/dist/external-transactions.js.map
deleted file mode 100644
index d92c9fcb12b13fc2100858b5eb5bb081ae31eeb9..0000000000000000000000000000000000000000
--- a/dist/external-transactions.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"external-transactions.js","sourceRoot":"","sources":["../src/external-transactions.ts"],"names":[],"mappings":";;;AAAA,oGAAoG;AACpG,qDAAiD;AAEjD,mCAA4C;AAG5C;;;;;;GAMG;AACH,SAAgB,oCAAoC,CAClD,eAAiC,EACjC,YAAgC,EAChC,UAA8B;IAE9B,IAAI,CAAC,eAAe,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE;QACjD,MAAM,sBAAS,CAAC,aAAa,CAC3B,4DAA4D,CAC7D,CAAC;KACH;IAED,IAAI,eAAe,CAAC,MAAM,KAAK,yBAAiB,CAAC,SAAS,EAAE;QAC1D,MAAM,sBAAS,CAAC,aAAa,CAC3B,mDAAmD,CACpD,CAAC;KACH;IAED,MAAM,eAAe,GAAG,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC;IACvD,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QACvC,MAAM,qBAAqB,GAAG,UAAU,CAAC,IAAI,CAC3C,CAAC,EAAE,EAAE,EAAE,WAAC,OAAA,CAAA,MAAA,EAAE,CAAC,QAAQ,0CAAE,KAAK,MAAK,eAAe,CAAA,EAAA,CAC/C,CAAC;QACF,IAAI,qBAAqB,EAAE;YACzB,MAAM,sBAAS,CAAC,aAAa,CAC3B,yDAAyD,CAC1D,CAAC;SACH;KACF;IAED,IAAI,YAAY,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;QAC3C,MAAM,uBAAuB,GAAG,YAAY,CAAC,IAAI,CAC/C,CAAC,EAAE,EAAE,EAAE,WAAC,OAAA,CAAA,MAAA,EAAE,CAAC,QAAQ,0CAAE,KAAK,MAAK,eAAe,CAAA,EAAA,CAC/C,CAAC;QACF,IAAI,uBAAuB,EAAE;YAC3B,MAAM,sBAAS,CAAC,aAAa,CAC3B,2DAA2D,CAC5D,CAAC;SACH;KACF;AACH,CAAC;AAvCD,oFAuCC","sourcesContent":["// These utility functions are exclusively used by `confirmExternalTransaction` method in controller\nimport { rpcErrors } from '@metamask/rpc-errors';\n\nimport { TransactionStatus } from './types';\nimport type { TransactionMeta } from './types';\n\n/**\n * Validates the external provided transaction meta.\n *\n * @param transactionMeta - The transaction meta to validate.\n * @param confirmedTxs - The confirmed transactions in controller state.\n * @param pendingTxs - The submitted transactions in controller state.\n */\nexport function validateConfirmedExternalTransaction(\n  transactionMeta?: TransactionMeta,\n  confirmedTxs?: TransactionMeta[],\n  pendingTxs?: TransactionMeta[],\n) {\n  if (!transactionMeta || !transactionMeta.txParams) {\n    throw rpcErrors.invalidParams(\n      '\"transactionMeta\" or \"transactionMeta.txParams\" is missing',\n    );\n  }\n\n  if (transactionMeta.status !== TransactionStatus.confirmed) {\n    throw rpcErrors.invalidParams(\n      'External transaction status should be \"confirmed\"',\n    );\n  }\n\n  const externalTxNonce = transactionMeta.txParams.nonce;\n  if (pendingTxs && pendingTxs.length > 0) {\n    const foundPendingTxByNonce = pendingTxs.find(\n      (tx) => tx.txParams?.nonce === externalTxNonce,\n    );\n    if (foundPendingTxByNonce) {\n      throw rpcErrors.invalidParams(\n        'External transaction nonce should not be in pending txs',\n      );\n    }\n  }\n\n  if (confirmedTxs && confirmedTxs.length > 0) {\n    const foundConfirmedTxByNonce = confirmedTxs.find(\n      (tx) => tx.txParams?.nonce === externalTxNonce,\n    );\n    if (foundConfirmedTxByNonce) {\n      throw rpcErrors.invalidParams(\n        'External transaction nonce should not be in confirmed txs',\n      );\n    }\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/gas-fees.d.ts b/dist/gas-fees.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..c4b55256c583972f480dfd5aeb494dc72da93329
--- /dev/null
+++ b/dist/gas-fees.d.ts
@@ -0,0 +1,26 @@
+import type EthQuery from '@metamask/eth-query';
+import type { GasFeeState } from '@metamask/gas-fee-controller';
+import type { TransactionParams } from './types';
+import { type TransactionMeta } from './types';
+export declare type UpdateGasFeesRequest = {
+    eip1559: boolean;
+    ethQuery: EthQuery;
+    getGasFeeEstimates: () => Promise<GasFeeState>;
+    txMeta: TransactionMeta;
+};
+export declare type GetGasFeeRequest = UpdateGasFeesRequest & {
+    initialParams: TransactionParams;
+    suggestedGasFees: Awaited<ReturnType<typeof getSuggestedGasFees>>;
+};
+export declare function updateGasFees(request: UpdateGasFeesRequest): Promise<void>;
+declare function getSuggestedGasFees(request: UpdateGasFeesRequest): Promise<{
+    maxFeePerGas: `0x${string}`;
+    maxPriorityFeePerGas: `0x${string}`;
+    gasPrice?: undefined;
+} | {
+    gasPrice: string | undefined;
+    maxFeePerGas?: undefined;
+    maxPriorityFeePerGas?: undefined;
+}>;
+export {};
+//# sourceMappingURL=gas-fees.d.ts.map
\ No newline at end of file
diff --git a/dist/gas-fees.js b/dist/gas-fees.js
new file mode 100644
index 0000000000000000000000000000000000000000..562324f841eed1cce3f5ecded9814af0237490e3
--- /dev/null
+++ b/dist/gas-fees.js
@@ -0,0 +1,183 @@
+"use strict";
+/* eslint-disable jsdoc/require-jsdoc */
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.updateGasFees = void 0;
+const controller_utils_1 = require("@metamask/controller-utils");
+const gas_fee_controller_1 = require("@metamask/gas-fee-controller");
+const utils_1 = require("@metamask/utils");
+const ethereumjs_util_1 = require("ethereumjs-util");
+const logger_1 = require("./logger");
+const types_1 = require("./types");
+const log = (0, utils_1.createModuleLogger)(logger_1.projectLogger, 'gas-fees');
+function updateGasFees(request) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const { txMeta } = request;
+        const initialParams = Object.assign({}, txMeta.txParams);
+        const suggestedGasFees = yield getSuggestedGasFees(request);
+        log('Suggested gas fees', suggestedGasFees);
+        const getGasFeeRequest = Object.assign(Object.assign({}, request), { initialParams, suggestedGasFees });
+        txMeta.txParams.maxFeePerGas = getMaxFeePerGas(getGasFeeRequest);
+        txMeta.txParams.maxPriorityFeePerGas =
+            getMaxPriorityFeePerGas(getGasFeeRequest);
+        txMeta.txParams.gasPrice = getGasPrice(getGasFeeRequest);
+        txMeta.userFeeLevel = getUserFeeLevel(getGasFeeRequest);
+        log('Updated gas fee properties', {
+            maxFeePerGas: txMeta.txParams.maxFeePerGas,
+            maxPriorityFeePerGas: txMeta.txParams.maxPriorityFeePerGas,
+            gasPrice: txMeta.txParams.gasPrice,
+        });
+        if (txMeta.txParams.maxFeePerGas || txMeta.txParams.maxPriorityFeePerGas) {
+            delete txMeta.txParams.gasPrice;
+        }
+        if (txMeta.txParams.gasPrice) {
+            delete txMeta.txParams.maxFeePerGas;
+            delete txMeta.txParams.maxPriorityFeePerGas;
+        }
+    });
+}
+exports.updateGasFees = updateGasFees;
+function getMaxFeePerGas(request) {
+    const { eip1559, initialParams, suggestedGasFees } = request;
+    if (!eip1559) {
+        return undefined;
+    }
+    if (initialParams.maxFeePerGas) {
+        log('Using maxFeePerGas from request', initialParams.maxFeePerGas);
+        return initialParams.maxFeePerGas;
+    }
+    if (initialParams.gasPrice && !initialParams.maxPriorityFeePerGas) {
+        log('Setting maxFeePerGas to gasPrice from request', initialParams.gasPrice);
+        return initialParams.gasPrice;
+    }
+    if (suggestedGasFees.maxFeePerGas) {
+        log('Using suggested maxFeePerGas', suggestedGasFees.maxFeePerGas);
+        return suggestedGasFees.maxFeePerGas;
+    }
+    if (suggestedGasFees.gasPrice) {
+        log('Setting maxFeePerGas to suggested gasPrice', suggestedGasFees.gasPrice);
+        return suggestedGasFees.gasPrice;
+    }
+    log('maxFeePerGas not set');
+    return undefined;
+}
+function getMaxPriorityFeePerGas(request) {
+    const { eip1559, initialParams, suggestedGasFees, txMeta } = request;
+    if (!eip1559) {
+        return undefined;
+    }
+    if (initialParams.maxPriorityFeePerGas) {
+        log('Using maxPriorityFeePerGas from request', initialParams.maxPriorityFeePerGas);
+        return initialParams.maxPriorityFeePerGas;
+    }
+    if (initialParams.gasPrice && !initialParams.maxFeePerGas) {
+        log('Setting maxPriorityFeePerGas to gasPrice from request', initialParams.gasPrice);
+        return initialParams.gasPrice;
+    }
+    if (suggestedGasFees.maxPriorityFeePerGas) {
+        log('Using suggested maxPriorityFeePerGas', suggestedGasFees.maxPriorityFeePerGas);
+        return suggestedGasFees.maxPriorityFeePerGas;
+    }
+    if (txMeta.txParams.maxFeePerGas) {
+        log('Setting maxPriorityFeePerGas to maxFeePerGas', txMeta.txParams.maxFeePerGas);
+        return txMeta.txParams.maxFeePerGas;
+    }
+    log('maxPriorityFeePerGas not set');
+    return undefined;
+}
+function getGasPrice(request) {
+    const { eip1559, initialParams, suggestedGasFees, txMeta } = request;
+    if (eip1559) {
+        if (!txMeta.txParams.maxFeePerGas &&
+            !txMeta.txParams.maxPriorityFeePerGas &&
+            suggestedGasFees.gasPrice) {
+            log('Using suggested gasPrice as fallback', suggestedGasFees.gasPrice);
+            return suggestedGasFees.gasPrice;
+        }
+        return undefined;
+    }
+    if (initialParams.gasPrice) {
+        log('Using gasPrice from request', initialParams.gasPrice);
+        return initialParams.gasPrice;
+    }
+    if (suggestedGasFees.gasPrice) {
+        log('Using suggested gasPrice', suggestedGasFees.gasPrice);
+        return suggestedGasFees.gasPrice;
+    }
+    log('gasPrice not set');
+    return undefined;
+}
+function getUserFeeLevel(request) {
+    const { eip1559, initialParams, suggestedGasFees, txMeta } = request;
+    if (!eip1559) {
+        return undefined;
+    }
+    if (!initialParams.maxFeePerGas &&
+        !initialParams.maxPriorityFeePerGas &&
+        initialParams.gasPrice) {
+        return txMeta.origin === controller_utils_1.ORIGIN_METAMASK
+            ? types_1.UserFeeLevel.MEDIUM
+            : types_1.UserFeeLevel.DAPP_SUGGESTED;
+    }
+    if (!initialParams.maxFeePerGas &&
+        !initialParams.maxPriorityFeePerGas &&
+        suggestedGasFees.maxFeePerGas &&
+        suggestedGasFees.maxPriorityFeePerGas) {
+        return types_1.UserFeeLevel.MEDIUM;
+    }
+    if (txMeta.origin === controller_utils_1.ORIGIN_METAMASK) {
+        return types_1.UserFeeLevel.MEDIUM;
+    }
+    return types_1.UserFeeLevel.DAPP_SUGGESTED;
+}
+function getSuggestedGasFees(request) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const { eip1559, ethQuery, getGasFeeEstimates } = request;
+        try {
+            const { gasFeeEstimates, gasEstimateType } = yield getGasFeeEstimates();
+            if (eip1559 && gasEstimateType === gas_fee_controller_1.GAS_ESTIMATE_TYPES.FEE_MARKET) {
+                const { medium: { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = {}, } = gasFeeEstimates;
+                if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {
+                    return {
+                        maxFeePerGas: gweiDecimalToWeiHex(suggestedMaxFeePerGas),
+                        maxPriorityFeePerGas: gweiDecimalToWeiHex(suggestedMaxPriorityFeePerGas),
+                    };
+                }
+            }
+            if (gasEstimateType === gas_fee_controller_1.GAS_ESTIMATE_TYPES.LEGACY) {
+                // The LEGACY type includes low, medium and high estimates of
+                // gas price values.
+                return {
+                    gasPrice: gweiDecimalToWeiHex(gasFeeEstimates.medium),
+                };
+            }
+            if (gasEstimateType === gas_fee_controller_1.GAS_ESTIMATE_TYPES.ETH_GASPRICE) {
+                // The ETH_GASPRICE type just includes a single gas price property,
+                // which we can assume was retrieved from eth_gasPrice
+                return {
+                    gasPrice: gweiDecimalToWeiHex(gasFeeEstimates.gasPrice),
+                };
+            }
+        }
+        catch (e) {
+            console.error(e);
+        }
+        const gasPriceDecimal = (yield (0, controller_utils_1.query)(ethQuery, 'gasPrice'));
+        const gasPrice = gasPriceDecimal
+            ? (0, ethereumjs_util_1.addHexPrefix)(gasPriceDecimal.toString(16))
+            : undefined;
+        return { gasPrice };
+    });
+}
+function gweiDecimalToWeiHex(value) {
+    return (0, controller_utils_1.toHex)((0, controller_utils_1.gweiDecToWEIBN)(value));
+}
+//# sourceMappingURL=gas-fees.js.map
\ No newline at end of file
diff --git a/dist/gas.d.ts b/dist/gas.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..b7dd23e125ab6dde877376ba95a6470a6477e7de
--- /dev/null
+++ b/dist/gas.d.ts
@@ -0,0 +1,24 @@
+/// <reference types="debug" />
+import type EthQuery from '@metamask/eth-query';
+import type { ProviderConfig } from '@metamask/network-controller';
+import type { TransactionMeta, TransactionParams } from './types';
+export declare type UpdateGasRequest = {
+    ethQuery: EthQuery;
+    txMeta: TransactionMeta;
+    providerConfig: ProviderConfig;
+};
+export declare const log: import("debug").Debugger;
+export declare function updateGas(request: UpdateGasRequest): Promise<void>;
+export declare function estimateGas(txParams: TransactionParams, ethQuery: EthQuery): Promise<{
+    blockGasLimit: string;
+    estimatedGas: string;
+    simulationFails: {
+        reason: any;
+        errorKey: any;
+        debug: {
+            blockNumber: string;
+            blockGasLimit: string;
+        };
+    } | undefined;
+}>;
+//# sourceMappingURL=gas.d.ts.map
\ No newline at end of file
diff --git a/dist/gas.js b/dist/gas.js
new file mode 100644
index 0000000000000000000000000000000000000000..cbf334f1067711f9bd8a8b079b71f94a98d2811e
--- /dev/null
+++ b/dist/gas.js
@@ -0,0 +1,124 @@
+"use strict";
+/* eslint-disable jsdoc/require-jsdoc */
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.estimateGas = exports.updateGas = exports.log = void 0;
+const controller_utils_1 = require("@metamask/controller-utils");
+const utils_1 = require("@metamask/utils");
+const ethereumjs_util_1 = require("ethereumjs-util");
+const logger_1 = require("./logger");
+exports.log = (0, utils_1.createModuleLogger)(logger_1.projectLogger, 'gas');
+const FIXED_GAS = '0x5208';
+function updateGas(request) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const { txMeta } = request;
+        const { blockGasLimit, estimatedGas, simulationFails } = yield estimateGas(txMeta.txParams, request.ethQuery);
+        txMeta.txParams.gas = yield getGas(Object.assign(Object.assign({}, request), { blockGasLimit,
+            estimatedGas }));
+        txMeta.simulationFails = simulationFails;
+    });
+}
+exports.updateGas = updateGas;
+function getGas(request) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const { blockGasLimit, estimatedGas, providerConfig, txMeta } = request;
+        if (txMeta.txParams.gas) {
+            (0, exports.log)('Using value from request', txMeta.txParams.gas);
+            return txMeta.txParams.gas;
+        }
+        if (yield requiresFixedGas(request)) {
+            (0, exports.log)('Using fixed value', FIXED_GAS);
+            return FIXED_GAS;
+        }
+        const estimatedGasBN = (0, controller_utils_1.hexToBN)(estimatedGas);
+        const maxGasBN = (0, controller_utils_1.hexToBN)(blockGasLimit).muln(0.9);
+        const paddedGasBN = estimatedGasBN.muln(1.5);
+        const isCustomNetwork = providerConfig.type === controller_utils_1.NetworkType.rpc;
+        if (estimatedGasBN.gt(maxGasBN) || isCustomNetwork) {
+            const estimatedGasHex = (0, ethereumjs_util_1.addHexPrefix)(estimatedGas);
+            (0, exports.log)('Using estimated value', estimatedGasHex);
+            return estimatedGasHex;
+        }
+        if (paddedGasBN.lt(maxGasBN)) {
+            const paddedHex = (0, ethereumjs_util_1.addHexPrefix)((0, controller_utils_1.BNToHex)(paddedGasBN));
+            (0, exports.log)('Using 150% of estimated value', paddedHex);
+            return paddedHex;
+        }
+        const maxHex = (0, ethereumjs_util_1.addHexPrefix)((0, controller_utils_1.BNToHex)(maxGasBN));
+        (0, exports.log)('Using 90% of block gas limit', maxHex);
+        return maxHex;
+    });
+}
+function estimateGas(txParams, ethQuery) {
+    var _a;
+    return __awaiter(this, void 0, void 0, function* () {
+        const request = Object.assign({}, txParams);
+        const { data, value } = request;
+        const { gasLimit: gasLimitHex, number: blockNumber } = yield getLatestBlock(ethQuery);
+        const gasLimitBN = (0, controller_utils_1.hexToBN)(gasLimitHex);
+        request.gas = (0, controller_utils_1.BNToHex)((0, controller_utils_1.fractionBN)(gasLimitBN, 19, 20));
+        request.value = value || '0x0';
+        if (data === null || data === void 0 ? void 0 : data.length) {
+            request.data = (0, ethereumjs_util_1.addHexPrefix)(data);
+        }
+        else {
+            delete request.data;
+        }
+        let estimatedGas = request.gas;
+        let simulationFails;
+        try {
+            estimatedGas = yield (0, controller_utils_1.query)(ethQuery, 'estimateGas', [request]);
+            (0, exports.log)('Estimation successful', estimatedGas);
+        }
+        catch (error) {
+            simulationFails = {
+                reason: ((_a = error.data) === null || _a === void 0 ? void 0 : _a.message) || error.message,
+                errorKey: error.errorKey,
+                debug: {
+                    blockNumber,
+                    blockGasLimit: gasLimitHex,
+                },
+            };
+            (0, exports.log)('Estimation failed', Object.assign(Object.assign({}, simulationFails), { fallback: estimatedGas }));
+        }
+        return {
+            blockGasLimit: gasLimitHex,
+            estimatedGas,
+            simulationFails,
+        };
+    });
+}
+exports.estimateGas = estimateGas;
+function requiresFixedGas({ ethQuery, txMeta, providerConfig, }) {
+    return __awaiter(this, void 0, void 0, function* () {
+        const isCustomNetwork = providerConfig.type === controller_utils_1.NetworkType.rpc;
+        const { txParams: { to, data }, } = txMeta;
+        if (isCustomNetwork) {
+            return false;
+        }
+        if (!to) {
+            return true;
+        }
+        const code = yield getCode(ethQuery, to);
+        return !data && (!code || code === '0x');
+    });
+}
+function getCode(ethQuery, address) {
+    return __awaiter(this, void 0, void 0, function* () {
+        return yield (0, controller_utils_1.query)(ethQuery, 'getCode', [address]);
+    });
+}
+function getLatestBlock(ethQuery) {
+    return __awaiter(this, void 0, void 0, function* () {
+        return yield (0, controller_utils_1.query)(ethQuery, 'getBlockByNumber', ['latest', false]);
+    });
+}
+//# sourceMappingURL=gas.js.map
\ No newline at end of file
diff --git a/dist/history.d.ts.map b/dist/history.d.ts.map
deleted file mode 100644
index 7a423a8e6dbd3f2092ea6f7bf8f69e2db0b476dd..0000000000000000000000000000000000000000
--- a/dist/history.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"history.d.ts","sourceRoot":"","sources":["../src/history.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,EAGV,eAAe,EAChB,MAAM,SAAS,CAAC;AAEjB;;;;GAIG;AACH,wBAAgB,yBAAyB,CAAC,eAAe,EAAE,eAAe,QAGzE;AAED;;;;;GAKG;AACH,wBAAgB,wBAAwB,CACtC,eAAe,EAAE,eAAe,EAChC,IAAI,EAAE,MAAM,GACX,IAAI,CAWN"}
\ No newline at end of file
diff --git a/dist/history.js.map b/dist/history.js.map
deleted file mode 100644
index 09322bef6364980d827e4353d4a9f69392627614..0000000000000000000000000000000000000000
--- a/dist/history.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"history.js","sourceRoot":"","sources":["../src/history.ts"],"names":[],"mappings":";;;;;;AAAA,sEAAyC;AACzC,mCAAmC;AAQnC;;;;GAIG;AACH,SAAgB,yBAAyB,CAAC,eAAgC;IACxE,MAAM,QAAQ,GAAG,2BAA2B,CAAC,eAAe,CAAC,CAAC;IAC9D,eAAe,CAAC,OAAO,GAAG,CAAC,QAAQ,CAAC,CAAC;AACvC,CAAC;AAHD,8DAGC;AAED;;;;;GAKG;AACH,SAAgB,wBAAwB,CACtC,eAAgC,EAChC,IAAY;;IAEZ,MAAM,YAAY,GAAG,2BAA2B,CAAC,eAAe,CAAC,CAAC;IAClE,MAAM,aAAa,GAAG,aAAa,CACjC,eAAe,CAAC,OAA6B,CAC9C,CAAC;IAEF,MAAM,YAAY,GAAG,oBAAoB,CAAC,aAAa,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;IAE7E,IAAI,YAAY,CAAC,MAAM,EAAE;QACvB,MAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,OAAO,0CAAE,IAAI,CAAC,YAAY,CAAC,CAAC;KAC9C;AACH,CAAC;AAdD,4DAcC;AAED;;;;;;;GAOG;AACH,SAAS,oBAAoB,CAC3B,aAAkB,EAClB,YAA6B,EAC7B,IAAY;IAEZ,MAAM,sBAAsB,GAAG,yBAAU,CAAC,OAAO,CAC/C,aAAa,EACb,YAAY,CACc,CAAC;IAC7B,kFAAkF;IAClF,IAAI,sBAAsB,CAAC,CAAC,CAAC,EAAE;QAC7B,IAAI,IAAI,EAAE;YACR,sBAAsB,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;SACvC;QACD,sBAAsB,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;KAClD;IACD,OAAO,sBAAsB,CAAC;AAChC,CAAC;AAED;;;;;GAKG;AACH,SAAS,aAAa,CACpB,kBAAsC;IAEtC,MAAM,YAAY,GAAG,IAAA,kBAAS,EAAC,kBAAkB,CAAC,CAAC;IACnD,OAAO,YAAY,CAAC,MAAM,CACxB,CAAC,GAAG,EAAE,KAAU,EAAE,EAAE,CAAC,yBAAU,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,WAAW,CAChD,CAAC;AACvB,CAAC;AAED;;;;;GAKG;AACH,SAAS,2BAA2B,CAClC,eAAgC;IAEhC,MAAM,QAAQ,qBAAQ,eAAe,CAAE,CAAC;IACxC,OAAO,QAAQ,CAAC,OAAO,CAAC;IACxB,OAAO,IAAA,kBAAS,EAAC,QAAQ,CAAC,CAAC;AAC7B,CAAC","sourcesContent":["import jsonDiffer from 'fast-json-patch';\nimport { cloneDeep } from 'lodash';\n\nimport type {\n  TransactionHistory,\n  TransactionHistoryEntry,\n  TransactionMeta,\n} from './types';\n\n/**\n * Add initial history snapshot to the provided transactionMeta history.\n *\n * @param transactionMeta - TransactionMeta to add initial history snapshot to.\n */\nexport function addInitialHistorySnapshot(transactionMeta: TransactionMeta) {\n  const snapshot = snapshotFromTransactionMeta(transactionMeta);\n  transactionMeta.history = [snapshot];\n}\n\n/**\n * Compares and adds history entry to the provided transactionMeta history.\n *\n * @param transactionMeta - TransactionMeta to add history entry to.\n * @param note - Note to add to history entry.\n */\nexport function updateTransactionHistory(\n  transactionMeta: TransactionMeta,\n  note: string,\n): void {\n  const currentState = snapshotFromTransactionMeta(transactionMeta);\n  const previousState = replayHistory(\n    transactionMeta.history as TransactionHistory,\n  );\n\n  const historyEntry = generateHistoryEntry(previousState, currentState, note);\n\n  if (historyEntry.length) {\n    transactionMeta?.history?.push(historyEntry);\n  }\n}\n\n/**\n * Generates a history entry from the previous and new transaction metadata.\n *\n * @param previousState - The previous transaction metadata.\n * @param currentState - The new transaction metadata.\n * @param note - A note for the transaction metada update.\n * @returns An array of history operation.\n */\nfunction generateHistoryEntry(\n  previousState: any,\n  currentState: TransactionMeta,\n  note: string,\n): TransactionHistoryEntry {\n  const historyOperationsEntry = jsonDiffer.compare(\n    previousState,\n    currentState,\n  ) as TransactionHistoryEntry;\n  // Add a note to the first operation, since it breaks if we append it to the entry\n  if (historyOperationsEntry[0]) {\n    if (note) {\n      historyOperationsEntry[0].note = note;\n    }\n    historyOperationsEntry[0].timestamp = Date.now();\n  }\n  return historyOperationsEntry;\n}\n\n/**\n * Recovers previous transactionMeta from passed history array.\n *\n * @param transactionHistory - The transaction metadata to replay.\n * @returns The transaction metadata.\n */\nfunction replayHistory(\n  transactionHistory: TransactionHistory,\n): TransactionMeta {\n  const shortHistory = cloneDeep(transactionHistory);\n  return shortHistory.reduce(\n    (val, entry: any) => jsonDiffer.applyPatch(val, entry).newDocument,\n  ) as TransactionMeta;\n}\n\n/**\n * Clone the transaction meta data without the history property.\n *\n * @param transactionMeta - The transaction metadata to snapshot.\n * @returns A deep clone of transaction metadata without history property.\n */\nfunction snapshotFromTransactionMeta(\n  transactionMeta: TransactionMeta,\n): TransactionMeta {\n  const snapshot = { ...transactionMeta };\n  delete snapshot.history;\n  return cloneDeep(snapshot);\n}\n"]}
\ No newline at end of file
diff --git a/dist/index.d.ts.map b/dist/index.d.ts.map
deleted file mode 100644
index 6b85676ed09647a3247aad3b0f50a17d32f2738d..0000000000000000000000000000000000000000
--- a/dist/index.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,cAAc,yBAAyB,CAAC;AACxC,YAAY,EAAE,wBAAwB,EAAE,MAAM,aAAa,CAAC;AAC5D,OAAO,EAAE,oBAAoB,EAAE,MAAM,SAAS,CAAC;AAC/C,cAAc,SAAS,CAAC"}
\ No newline at end of file
diff --git a/dist/index.js.map b/dist/index.js.map
deleted file mode 100644
index c4fa911f8d6b99b6c5c088a4793f3dbbfc467ba1..0000000000000000000000000000000000000000
--- a/dist/index.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,0DAAwC;AAExC,iCAA+C;AAAtC,6GAAA,oBAAoB,OAAA;AAC7B,0CAAwB","sourcesContent":["export * from './TransactionController';\nexport type { EtherscanTransactionMeta } from './etherscan';\nexport { isEIP1559Transaction } from './utils';\nexport * from './types';\n"]}
\ No newline at end of file
diff --git a/dist/logger.d.ts b/dist/logger.d.ts
index 43ad63fcff9ebdc96494d6afc63c625dc1db1e9e..bb2c083f87f1f17a64441b96ee5775a2e24d0f4b 100644
--- a/dist/logger.d.ts
+++ b/dist/logger.d.ts
@@ -2,5 +2,6 @@
 import { createModuleLogger } from '@metamask/utils';
 export declare const projectLogger: import("debug").Debugger;
 export declare const incomingTransactionsLogger: import("debug").Debugger;
+export declare const pendingTransactionsLogger: import("debug").Debugger;
 export { createModuleLogger };
 //# sourceMappingURL=logger.d.ts.map
\ No newline at end of file
diff --git a/dist/logger.d.ts.map b/dist/logger.d.ts.map
deleted file mode 100644
index bb648efa761c202101a89b638d574fb8c68fa019..0000000000000000000000000000000000000000
--- a/dist/logger.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"logger.d.ts","sourceRoot":"","sources":["../src/logger.ts"],"names":[],"mappings":";AAAA,OAAO,EAAuB,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AAE1E,eAAO,MAAM,aAAa,0BAAgD,CAAC;AAE3E,eAAO,MAAM,0BAA0B,0BAGtC,CAAC;AAEF,OAAO,EAAE,kBAAkB,EAAE,CAAC"}
\ No newline at end of file
diff --git a/dist/logger.js b/dist/logger.js
index 69ce8ecbe3d5e6f6f0887be4d590f7d9be2d82ec..d21f7ed9bb0dfaa8a88346e2127a949216ce7af0 100644
--- a/dist/logger.js
+++ b/dist/logger.js
@@ -1,8 +1,10 @@
 "use strict";
+/* istanbul ignore file */
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.createModuleLogger = exports.incomingTransactionsLogger = exports.projectLogger = void 0;
+exports.createModuleLogger = exports.pendingTransactionsLogger = exports.incomingTransactionsLogger = exports.projectLogger = void 0;
 const utils_1 = require("@metamask/utils");
 Object.defineProperty(exports, "createModuleLogger", { enumerable: true, get: function () { return utils_1.createModuleLogger; } });
 exports.projectLogger = (0, utils_1.createProjectLogger)('transaction-controller');
 exports.incomingTransactionsLogger = (0, utils_1.createModuleLogger)(exports.projectLogger, 'incoming-transactions');
+exports.pendingTransactionsLogger = (0, utils_1.createModuleLogger)(exports.projectLogger, 'pending-transactions');
 //# sourceMappingURL=logger.js.map
\ No newline at end of file
diff --git a/dist/logger.js.map b/dist/logger.js.map
deleted file mode 100644
index 616e0cd683c5927de6dca2611a4fc39de27062b5..0000000000000000000000000000000000000000
--- a/dist/logger.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"logger.js","sourceRoot":"","sources":["../src/logger.ts"],"names":[],"mappings":";;;AAAA,2CAA0E;AASjE,mGATqB,0BAAkB,OASrB;AAPd,QAAA,aAAa,GAAG,IAAA,2BAAmB,EAAC,wBAAwB,CAAC,CAAC;AAE9D,QAAA,0BAA0B,GAAG,IAAA,0BAAkB,EAC1D,qBAAa,EACb,uBAAuB,CACxB,CAAC","sourcesContent":["import { createProjectLogger, createModuleLogger } from '@metamask/utils';\n\nexport const projectLogger = createProjectLogger('transaction-controller');\n\nexport const incomingTransactionsLogger = createModuleLogger(\n  projectLogger,\n  'incoming-transactions',\n);\n\nexport { createModuleLogger };\n"]}
\ No newline at end of file
diff --git a/dist/transaction-type.d.ts.map b/dist/transaction-type.d.ts.map
deleted file mode 100644
index 0721a7295d58f9be8f69eed78790fa28c2f43d1b..0000000000000000000000000000000000000000
--- a/dist/transaction-type.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"transaction-type.d.ts","sourceRoot":"","sources":["../src/transaction-type.ts"],"names":[],"mappings":"AAGA,OAAO,KAAK,QAAQ,MAAM,qBAAqB,CAAC;AAGhD,OAAO,KAAK,EAAE,0BAA0B,EAAE,iBAAiB,EAAE,MAAM,SAAS,CAAC;AAG7E,eAAO,MAAM,kBAAkB,qCAAqC,CAAC;AAMrE;;;;;;;;GAQG;AACH,wBAAsB,wBAAwB,CAC5C,QAAQ,EAAE,iBAAiB,EAC3B,QAAQ,EAAE,QAAQ,GACjB,OAAO,CAAC,0BAA0B,CAAC,CAiCrC"}
\ No newline at end of file
diff --git a/dist/transaction-type.js.map b/dist/transaction-type.js.map
deleted file mode 100644
index fc7d6688b16bf302ad949725f78e6b505da8a266..0000000000000000000000000000000000000000
--- a/dist/transaction-type.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"transaction-type.js","sourceRoot":"","sources":["../src/transaction-type.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TransactionDescription } from '@ethersproject/abi';\nimport { Interface } from '@ethersproject/abi';\nimport { query } from '@metamask/controller-utils';\nimport type EthQuery from '@metamask/eth-query';\nimport { abiERC721, abiERC20, abiERC1155 } from '@metamask/metamask-eth-abis';\n\nimport type { InferTransactionTypeResult, TransactionParams } from './types';\nimport { TransactionType } from './types';\n\nexport const ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';\n\nconst ERC20Interface = new Interface(abiERC20);\nconst ERC721Interface = new Interface(abiERC721);\nconst ERC1155Interface = new Interface(abiERC1155);\n\n/**\n * Determines the type of the transaction by analyzing the txParams.\n * It will never return TRANSACTION_TYPE_CANCEL or TRANSACTION_TYPE_RETRY as these\n * represent specific events that we specify manually at transaction creation.\n *\n * @param txParams - Parameters for the transaction.\n * @param ethQuery - EthQuery instance.\n * @returns A object with the transaction type and the contract code response in Hex.\n */\nexport async function determineTransactionType(\n  txParams: TransactionParams,\n  ethQuery: EthQuery,\n): Promise<InferTransactionTypeResult> {\n  const { data, to } = txParams;\n  const name = parseStandardTokenTransactionData(data)?.name;\n\n  if (data && !to) {\n    return { type: TransactionType.deployContract, getCodeResponse: undefined };\n  }\n\n  const { contractCode: resultCode, isContractAddress } =\n    await readAddressAsContract(ethQuery, to);\n\n  if (!isContractAddress) {\n    return { type: TransactionType.simpleSend, getCodeResponse: resultCode };\n  }\n\n  const hasValue = txParams.value && Number(txParams.value) !== 0;\n\n  const tokenMethodName = [\n    TransactionType.tokenMethodApprove,\n    TransactionType.tokenMethodSetApprovalForAll,\n    TransactionType.tokenMethodTransfer,\n    TransactionType.tokenMethodTransferFrom,\n    TransactionType.tokenMethodSafeTransferFrom,\n  ].find((methodName) => methodName.toLowerCase() === name?.toLowerCase());\n\n  if (data && tokenMethodName && !hasValue) {\n    return { type: tokenMethodName, getCodeResponse: resultCode };\n  }\n\n  return {\n    type: TransactionType.contractInteraction,\n    getCodeResponse: resultCode,\n  };\n}\n\n/**\n * Attempts to decode transaction data using ABIs for three different token standards: ERC20, ERC721, ERC1155.\n * The data will decode correctly if the transaction is an interaction with a contract that matches one of these\n * contract standards\n *\n * @param data - Encoded transaction data.\n * @returns A representation of an ethereum contract call.\n */\nfunction parseStandardTokenTransactionData(\n  data?: string,\n): TransactionDescription | undefined {\n  if (!data) {\n    return undefined;\n  }\n\n  try {\n    return ERC20Interface.parseTransaction({ data });\n  } catch {\n    // ignore and next try to parse with erc721 ABI\n  }\n\n  try {\n    return ERC721Interface.parseTransaction({ data });\n  } catch {\n    // ignore and next try to parse with erc1155 ABI\n  }\n\n  try {\n    return ERC1155Interface.parseTransaction({ data });\n  } catch {\n    // ignore and return undefined\n  }\n\n  return undefined;\n}\n\n/**\n * Reads an Ethereum address and determines if it is a contract address.\n *\n * @param ethQuery - The Ethereum query object used to interact with the Ethereum blockchain.\n * @param address - The Ethereum address.\n * @returns An object containing the contract code and a boolean indicating if it is a contract address.\n */\nasync function readAddressAsContract(\n  ethQuery: EthQuery,\n  address?: string,\n): Promise<{\n  contractCode: string | null;\n  isContractAddress: boolean;\n}> {\n  let contractCode;\n  try {\n    contractCode = await query(ethQuery, 'getCode', [address]);\n  } catch (e) {\n    contractCode = null;\n  }\n\n  const isContractAddress = contractCode\n    ? contractCode !== '0x' && contractCode !== '0x0'\n    : false;\n  return { contractCode, isContractAddress };\n}\n"]}
\ No newline at end of file
diff --git a/dist/types.d.ts b/dist/types.d.ts
index fb94e7b8f531f2f0c86f44a9d678447d7205ade8..ad11ea47d2ffa2378a76719ea6f3596c87453923 100644
--- a/dist/types.d.ts
+++ b/dist/types.d.ts
@@ -57,6 +57,10 @@ declare type TransactionMetaBase = {
      * Which estimate level was used
      */
     estimateUsed?: string;
+    /**
+     * The number of the latest block when the transaction submit was first retried.
+     */
+    firstRetryBlockNumber?: string;
     /**
      * A hex string of the transaction hash, used to identify the transaction on the network.
      */
@@ -103,6 +107,10 @@ declare type TransactionMetaBase = {
      * When the transaction is dropped, this is the replacement transaction ID.
      */
     replacedById?: string;
+    /**
+     * The number of times that the transaction submit has been retried.
+     */
+    retryCount?: number;
     /**
      * The transaction's 's' value as a hex string.
      */
@@ -111,11 +119,23 @@ declare type TransactionMetaBase = {
      * Response from security validator.
      */
     securityAlertResponse?: Record<string, unknown>;
+    /**
+     * Response from security provider.
+     */
+    securityProviderResponse?: Record<string, any>;
     /**
      * An array of entries that describe the user's journey through the send flow.
      * This is purely attached to state logs for troubleshooting and support.
      */
     sendFlowHistory?: SendFlowHistoryEntry[];
+    simulationFails?: {
+        reason?: string;
+        errorKey?: string;
+        debug: {
+            blockNumber?: string;
+            blockGasLimit?: string;
+        };
+    };
     /**
      * The time the transaction was submitted to the network, in Unix epoch time (ms).
      */
@@ -155,7 +175,7 @@ declare type TransactionMetaBase = {
     /**
      * Estimate level user selected.
      */
-    userFeeLevel?: string;
+    userFeeLevel?: UserFeeLevel;
     /**
      * The transaction's 'v' value as a hex string.
      */
@@ -164,6 +184,13 @@ declare type TransactionMetaBase = {
      * Whether the transaction is verified on the blockchain.
      */
     verifiedOnBlockchain?: boolean;
+    /**
+     * Warning information for the transaction.
+     */
+    warning?: {
+        error: string;
+        message: string;
+    };
 };
 export declare type SendFlowHistoryEntry = {
     /**
@@ -499,5 +526,41 @@ export declare type InferTransactionTypeResult = {
      */
     type: TransactionType;
 };
+/**
+ * A function for verifying a transaction, whether it is malicious or not
+ */
+export declare type SecurityProviderRequest = (requestData: TransactionMeta, messageType: string) => Promise<any>;
+/**
+ * In EIP-2718 typed transaction envelopes were specified, with the very first
+ * typed envelope being 'legacy' and describing the shape of the base
+ * transaction params that were hitherto the only transaction type sent on
+ * Ethereum.
+ */
+export declare enum TransactionEnvelopeType {
+    /**
+     * A legacy transaction, the very first type.
+     */
+    legacy = "0x0",
+    /**
+     * EIP-2930 defined the access list transaction type that allowed for
+     * specifying the state that a transaction would act upon in advance and
+     * theoretically save on gas fees.
+     */
+    accessList = "0x1",
+    /**
+     * The type introduced comes from EIP-1559, Fee Market describes the addition
+     * of a baseFee to blocks that will be burned instead of distributed to
+     * miners. Transactions of this type have both a maxFeePerGas (maximum total
+     * amount in gwei per gas to spend on the transaction) which is inclusive of
+     * the maxPriorityFeePerGas (maximum amount of gwei per gas from the
+     * transaction fee to distribute to miner).
+     */
+    feeMarket = "0x2"
+}
+export declare enum UserFeeLevel {
+    CUSTOM = "custom",
+    MEDIUM = "medium",
+    DAPP_SUGGESTED = "dappSuggested"
+}
 export {};
 //# sourceMappingURL=types.d.ts.map
\ No newline at end of file
diff --git a/dist/types.d.ts.map b/dist/types.d.ts.map
deleted file mode 100644
index 2dc9ab63fcfaaff3aa096d141377b66446e1f13b..0000000000000000000000000000000000000000
--- a/dist/types.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"types.d.ts","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/types.js b/dist/types.js
index 6bbf145ca4f31b0826fde7bc4ca9610cb02365c9..fd2d95ff2887769dd10d3d12f650dafdd602ea14 100644
--- a/dist/types.js
+++ b/dist/types.js
@@ -1,6 +1,6 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.TransactionType = exports.WalletDevice = exports.TransactionStatus = void 0;
+exports.UserFeeLevel = exports.TransactionEnvelopeType = exports.TransactionType = exports.WalletDevice = exports.TransactionStatus = void 0;
 /**
  * The status of the transaction. Each status represents the state of the transaction internally
  * in the wallet. Some of these correspond with the state of the transaction on the network, but
@@ -125,4 +125,38 @@ var TransactionType;
      */
     TransactionType["tokenMethodSetApprovalForAll"] = "setapprovalforall";
 })(TransactionType = exports.TransactionType || (exports.TransactionType = {}));
+/**
+ * In EIP-2718 typed transaction envelopes were specified, with the very first
+ * typed envelope being 'legacy' and describing the shape of the base
+ * transaction params that were hitherto the only transaction type sent on
+ * Ethereum.
+ */
+var TransactionEnvelopeType;
+(function (TransactionEnvelopeType) {
+    /**
+     * A legacy transaction, the very first type.
+     */
+    TransactionEnvelopeType["legacy"] = "0x0";
+    /**
+     * EIP-2930 defined the access list transaction type that allowed for
+     * specifying the state that a transaction would act upon in advance and
+     * theoretically save on gas fees.
+     */
+    TransactionEnvelopeType["accessList"] = "0x1";
+    /**
+     * The type introduced comes from EIP-1559, Fee Market describes the addition
+     * of a baseFee to blocks that will be burned instead of distributed to
+     * miners. Transactions of this type have both a maxFeePerGas (maximum total
+     * amount in gwei per gas to spend on the transaction) which is inclusive of
+     * the maxPriorityFeePerGas (maximum amount of gwei per gas from the
+     * transaction fee to distribute to miner).
+     */
+    TransactionEnvelopeType["feeMarket"] = "0x2";
+})(TransactionEnvelopeType = exports.TransactionEnvelopeType || (exports.TransactionEnvelopeType = {}));
+var UserFeeLevel;
+(function (UserFeeLevel) {
+    UserFeeLevel["CUSTOM"] = "custom";
+    UserFeeLevel["MEDIUM"] = "medium";
+    UserFeeLevel["DAPP_SUGGESTED"] = "dappSuggested";
+})(UserFeeLevel = exports.UserFeeLevel || (exports.UserFeeLevel = {}));
 //# sourceMappingURL=types.js.map
\ No newline at end of file
diff --git a/dist/types.js.map b/dist/types.js.map
deleted file mode 100644
index 7bca6309ea4e62b2fa4c1a99b9dbad0b35e89705..0000000000000000000000000000000000000000
--- a/dist/types.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAwNA;;;;GAIG;AACH,IAAY,iBAUX;AAVD,WAAY,iBAAiB;IAC3B,0CAAqB,CAAA;IACrB,4CAAuB,CAAA;IACvB,4CAAuB,CAAA;IACvB,wCAAmB,CAAA;IACnB,sCAAiB,CAAA;IACjB,0CAAqB,CAAA;IACrB,sCAAiB,CAAA;IACjB,4CAAuB,CAAA;IACvB,8CAAyB,CAAA;AAC3B,CAAC,EAVW,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAU5B;AAED;;GAEG;AACH,IAAY,YAIX;AAJD,WAAY,YAAY;IACtB,6CAA6B,CAAA;IAC7B,mDAAmC,CAAA;IACnC,sCAAsB,CAAA;AACxB,CAAC,EAJW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAIvB;AAED;;GAEG;AACH,IAAY,eA+GX;AA/GD,WAAY,eAAe;IACzB;;OAEG;IACH,oCAAiB,CAAA;IAEjB;;;;OAIG;IACH,8DAA2C,CAAA;IAE3C;;OAEG;IACH,wDAAqC,CAAA;IAErC;;OAEG;IACH,6CAA0B,CAAA;IAE1B;;OAEG;IACH,2EAAwD,CAAA;IAExD;;OAEG;IACH,wCAAqB,CAAA;IAErB;;OAEG;IACH,iDAA8B,CAAA;IAE9B;;;;;OAKG;IACH,kCAAe,CAAA;IAEf;;OAEG;IACH,4CAAyB,CAAA;IAEzB;;OAEG;IACH,oCAAiB,CAAA;IAEjB;;OAEG;IACH,sDAAmC,CAAA;IAEnC;;OAEG;IACH,kCAAe,CAAA;IAEf;;OAEG;IACH,gCAAa,CAAA;IAEb;;;;;OAKG;IACH,gDAA6B,CAAA;IAE7B;;;OAGG;IACH,iDAA8B,CAAA;IAE9B;;;;;OAKG;IACH,mEAAgD,CAAA;IAEhD;;;OAGG;IACH,mDAAgC,CAAA;IAEhC;;;;OAIG;IACH,2DAAwC,CAAA;IAExC;;;OAGG;IACH,qEAAkD,CAAA;AACpD,CAAC,EA/GW,eAAe,GAAf,uBAAe,KAAf,uBAAe,QA+G1B","sourcesContent":["import type { Hex } from '@metamask/utils';\nimport type { Operation } from 'fast-json-patch';\n\n/**\n * Representation of transaction metadata.\n */\nexport type TransactionMeta =\n  | ({\n      status: Exclude<TransactionStatus, TransactionStatus.failed>;\n    } & TransactionMetaBase)\n  | ({ status: TransactionStatus.failed; error: Error } & TransactionMetaBase);\n\n/**\n * Information about a single transaction such as status and block number.\n */\ntype TransactionMetaBase = {\n  /**\n   * Unique ID to prevent duplicate requests.\n   */\n  actionId?: string;\n\n  /**\n   * Base fee of the block as a hex value, introduced in EIP-1559.\n   */\n  baseFeePerGas?: Hex;\n\n  /**\n   * Number of the block where the transaction has been included.\n   */\n  blockNumber?: string;\n\n  /**\n   * The timestamp for when the block was collated.\n   */\n  blockTimestamp?: string;\n\n  /**\n   * Network code as per EIP-155 for this transaction.\n   */\n  chainId: Hex;\n\n  /**\n   * Gas values provided by the dApp.\n   */\n  dappSuggestedGasFees?: DappSuggestedGasFees;\n\n  /**\n   * The default estimate for gas.\n   */\n  defaultGasEstimates?: string;\n\n  /**\n   * String to indicate what device the transaction was confirmed on.\n   */\n  deviceConfirmedOn?: WalletDevice;\n\n  /**\n   * The estimated base fee of the transaction.\n   */\n  estimatedBaseFee?: string;\n\n  /**\n   * Which estimate level that the API suggested.\n   */\n  estimateSuggested?: string;\n\n  /**\n   * Which estimate level was used\n   */\n  estimateUsed?: string;\n\n  /**\n   * A hex string of the transaction hash, used to identify the transaction on the network.\n   */\n  hash?: string;\n\n  /**\n   * A history of mutations to TransactionMeta.\n   */\n  history?: TransactionHistory;\n\n  /**\n   * Generated UUID associated with this transaction.\n   */\n  id: string;\n\n  /**\n   * Whether the transaction is a transfer.\n   */\n  isTransfer?: boolean;\n\n  /**\n   * Network code as per EIP-155 for this transaction\n   *\n   * @deprecated Use `chainId` instead.\n   */\n  readonly networkID?: string;\n\n  /**\n   * Origin this transaction was sent from.\n   */\n  origin?: string;\n\n  /**\n   * The original gas estimation of the transaction.\n   */\n  originalGasEstimate?: string;\n\n  /**\n   * The transaction's 'r' value as a hex string.\n   */\n  r?: string;\n\n  /**\n   * Hex representation of the underlying transaction.\n   */\n  rawTx?: string;\n\n  /**\n   * When the transaction is dropped, this is the replacement transaction hash.\n   */\n  replacedBy?: string;\n\n  /**\n   * When the transaction is dropped, this is the replacement transaction ID.\n   */\n  replacedById?: string;\n\n  /**\n   * The transaction's 's' value as a hex string.\n   */\n  s?: string;\n\n  /**\n   * Response from security validator.\n   */\n  securityAlertResponse?: Record<string, unknown>;\n\n  /**\n   * An array of entries that describe the user's journey through the send flow.\n   * This is purely attached to state logs for troubleshooting and support.\n   */\n  sendFlowHistory?: SendFlowHistoryEntry[];\n\n  /**\n   * The time the transaction was submitted to the network, in Unix epoch time (ms).\n   */\n  submittedTime?: number;\n\n  /**\n   * Timestamp associated with this transaction.\n   */\n  time: number;\n\n  /**\n   * Whether transaction recipient is a smart contract.\n   */\n  toSmartContract?: boolean;\n\n  /**\n   * Additional transfer information.\n   */\n  transferInformation?: {\n    contractAddress: string;\n    decimals: number;\n    symbol: string;\n  };\n\n  /**\n   * Underlying Transaction object.\n   */\n  txParams: TransactionParams;\n\n  /**\n   * Transaction receipt.\n   */\n  txReceipt?: TransactionReceipt;\n\n  /**\n   * The type of transaction such as `cancel` or `swap`.\n   */\n  type?: TransactionType;\n\n  /**\n   * The gas limit supplied by user.\n   */\n  userEditedGasLimit?: boolean;\n\n  /**\n   * Estimate level user selected.\n   */\n  userFeeLevel?: string;\n\n  /**\n   * The transaction's 'v' value as a hex string.\n   */\n  v?: string;\n\n  /**\n   * Whether the transaction is verified on the blockchain.\n   */\n  verifiedOnBlockchain?: boolean;\n};\n\nexport type SendFlowHistoryEntry = {\n  /**\n   * String to indicate user interaction information.\n   */\n  entry: string;\n\n  /**\n   * Timestamp associated with this entry.\n   */\n  timestamp: number;\n};\n\n/**\n * The status of the transaction. Each status represents the state of the transaction internally\n * in the wallet. Some of these correspond with the state of the transaction on the network, but\n * some are wallet-specific.\n */\nexport enum TransactionStatus {\n  approved = 'approved',\n  cancelled = 'cancelled',\n  confirmed = 'confirmed',\n  dropped = 'dropped',\n  failed = 'failed',\n  rejected = 'rejected',\n  signed = 'signed',\n  submitted = 'submitted',\n  unapproved = 'unapproved',\n}\n\n/**\n * Options for wallet device.\n */\nexport enum WalletDevice {\n  MM_MOBILE = 'metamask_mobile',\n  MM_EXTENSION = 'metamask_extension',\n  OTHER = 'other_device',\n}\n\n/**\n * The type of the transaction.\n */\nexport enum TransactionType {\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  cancel = 'cancel',\n\n  /**\n   * A transaction that is interacting with a smart contract's methods that we\n   * have not treated as a special case, such as approve, transfer, and\n   * transferfrom.\n   */\n  contractInteraction = 'contractInteraction',\n\n  /**\n   * A transaction that deployed a smart contract.\n   */\n  deployContract = 'contractDeployment',\n\n  /**\n   * A transaction for Ethereum decryption.\n   */\n  ethDecrypt = 'eth_decrypt',\n\n  /**\n   * A transaction for getting an encryption public key.\n   */\n  ethGetEncryptionPublicKey = 'eth_getEncryptionPublicKey',\n\n  /**\n   * An incoming (deposit) transaction.\n   */\n  incoming = 'incoming',\n\n  /**\n   * A transaction for personal sign.\n   */\n  personalSign = 'personal_sign',\n\n  /**\n   * When a transaction is failed it can be retried by\n   * resubmitting the same transaction with a higher gas fee. This type is also used\n   * to speed up pending transactions. This is accomplished by creating a new tx with\n   * the same nonce and higher gas fees.\n   */\n  retry = 'retry',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  simpleSend = 'simpleSend',\n\n  /**\n   * A transaction that is signing a message.\n   */\n  sign = 'eth_sign',\n\n  /**\n   * A transaction that is signing typed data.\n   */\n  signTypedData = 'eth_signTypedData',\n\n  /**\n   * A transaction sending a network's native asset to a recipient.\n   */\n  smart = 'smart',\n\n  /**\n   * A transaction swapping one token for another through MetaMask Swaps.\n   */\n  swap = 'swap',\n\n  /**\n   * Similar to the approve type, a swap approval is a special case of ERC20\n   * approve method that requests an allowance of the token to spend on behalf\n   * of the user for the MetaMask Swaps contract. The first swap for any token\n   * will have an accompanying swapApproval transaction.\n   */\n  swapApproval = 'swapApproval',\n\n  /**\n   * A token transaction requesting an allowance of the token to spend on\n   * behalf of the user.\n   */\n  tokenMethodApprove = 'approve',\n\n  /**\n   * A token transaction transferring tokens from an account that the sender\n   * has an allowance of. The method is prefixed with safe because when calling\n   * this method the contract checks to ensure that the receiver is an address\n   * capable of handling the token being sent.\n   */\n  tokenMethodSafeTransferFrom = 'safetransferfrom',\n\n  /**\n   * A token transaction where the user is sending tokens that they own to\n   * another address.\n   */\n  tokenMethodTransfer = 'transfer',\n\n  /**\n   * A token transaction transferring tokens from an account that the sender\n   * has an allowance of. For more information on allowances, see the approve\n   * type.\n   */\n  tokenMethodTransferFrom = 'transferfrom',\n\n  /**\n   * A token transaction requesting an allowance of all of a user's tokens to\n   * spend on behalf of the user.\n   */\n  tokenMethodSetApprovalForAll = 'setapprovalforall',\n}\n\n/**\n * Standard data concerning a transaction to be processed by the blockchain.\n */\nexport interface TransactionParams {\n  /**\n   * Network ID as per EIP-155.\n   */\n  chainId?: Hex;\n\n  /**\n   * Data to pass with this transaction.\n   */\n  data?: string;\n\n  /**\n   * Error message for gas estimation failure.\n   */\n  estimateGasError?: string;\n\n  /**\n   * Estimated base fee for this transaction.\n   */\n  estimatedBaseFee?: string;\n\n  /**\n   * Address to send this transaction from.\n   */\n  from: string;\n\n  /**\n   * same as gasLimit?\n   */\n  gas?: string;\n\n  /**\n   * Maxmimum number of units of gas to use for this transaction.\n   */\n  gasLimit?: string;\n\n  /**\n   * Price per gas for legacy txs\n   */\n  gasPrice?: string;\n\n  /**\n   * Gas used in the transaction.\n   */\n  gasUsed?: string;\n\n  /**\n   * Maximum amount per gas to pay for the transaction, including the priority\n   * fee.\n   */\n  maxFeePerGas?: string;\n\n  /**\n   * Maximum amount per gas to give to validator as incentive.\n   */\n  maxPriorityFeePerGas?: string;\n\n  /**\n   * Unique number to prevent replay attacks.\n   */\n  nonce?: string;\n\n  /**\n   * Address to send this transaction to.\n   */\n  to?: string;\n\n  /**\n   * Value associated with this transaction.\n   */\n  value?: string;\n\n  /**\n   * Type of transaction.\n   * 0x0 indicates a legacy transaction.\n   */\n  type?: string;\n}\n\n/**\n * Standard data concerning a transaction processed by the blockchain.\n */\nexport interface TransactionReceipt {\n  /**\n   * The block hash of the block that this transaction was included in.\n   */\n  blockHash?: string;\n\n  /**\n   * The block number of the block that this transaction was included in.\n   */\n  blockNumber?: string;\n\n  /**\n   * Effective gas price the transaction was charged at.\n   */\n  effectiveGasPrice?: string;\n\n  /**\n   * Gas used in the transaction.\n   */\n  gasUsed?: string;\n\n  /**\n   * Total used gas in hex.\n   */\n  l1Fee?: string;\n\n  /**\n   * All the logs emitted by this transaction.\n   */\n  logs?: Log[];\n\n  /**\n   * The status of the transaction.\n   */\n  status?: string;\n\n  /**\n   * The index of this transaction in the list of transactions included in the block this transaction was mined in.\n   */\n  transactionIndex?: number;\n}\n\n/**\n * Represents an event that has been included in a transaction using the EVM `LOG` opcode.\n */\nexport interface Log {\n  /**\n   * Address of the contract that generated log.\n   */\n  address?: string;\n  /**\n   * List of topics for log.\n   */\n  topics?: string;\n}\n\n/**\n * The configuration required to fetch transaction data from a RemoteTransactionSource.\n */\nexport interface RemoteTransactionSourceRequest {\n  /**\n   * The address of the account to fetch transactions for.\n   */\n  address: string;\n\n  /**\n   * The chainId of the current network.\n   */\n  currentChainId: Hex;\n\n  /**\n   * Block number to start fetching transactions from.\n   */\n  fromBlock?: number;\n\n  /**\n   * Maximum number of transactions to retrieve.\n   */\n  limit?: number;\n}\n\n/**\n * An object capable of fetching transaction data from a remote source.\n * Used by the IncomingTransactionHelper to retrieve remote transaction data.\n */\nexport interface RemoteTransactionSource {\n  /**\n   * @param chainId - The chainId of the current network.\n   * @returns Whether the remote transaction source supports the specified network.\n   */\n  isSupportedNetwork: (chainId: Hex) => boolean;\n\n  /**\n   * @returns An array of additional keys to use when caching the last fetched block number.\n   */\n  getLastBlockVariations?: () => string[];\n\n  /**\n   * @param request - A request object containing data such as the address and chain ID.\n   * @returns An array of transaction metadata for the retrieved transactions.\n   */\n  fetchTransactions: (\n    request: RemoteTransactionSourceRequest,\n  ) => Promise<TransactionMeta[]>;\n}\n\n/**\n * Gas values initially suggested by the dApp.\n */\nexport interface DappSuggestedGasFees {\n  gas?: string;\n  gasPrice?: string;\n  maxFeePerGas?: string;\n  maxPriorityFeePerGas?: string;\n}\n\n/**\n * A transaction history operation that includes a note and timestamp.\n */\ntype ExtendedHistoryOperation = Operation & {\n  note?: string;\n  timestamp?: number;\n};\n\n/**\n * A transaction history entry that includes the ExtendedHistoryOperation as the first element.\n */\nexport type TransactionHistoryEntry = [\n  ExtendedHistoryOperation,\n  ...Operation[],\n];\n\n/**\n * A transaction history that includes the transaction meta as the first element.\n * And the rest of the elements are the operation arrays that were applied to the transaction meta.\n */\nexport type TransactionHistory = [\n  TransactionMeta,\n  ...TransactionHistoryEntry[],\n];\n\n/**\n * Result of inferring the transaction type.\n */\nexport type InferTransactionTypeResult = {\n  /**\n   * The contract code, in hex format if it exists. '0x0' or\n   * '0x' are also indicators of non-existent contract code.\n   */\n  getCodeResponse?: string | null;\n\n  /**\n   * The type of transaction\n   */\n  type: TransactionType;\n};\n"]}
\ No newline at end of file
diff --git a/dist/utils.d.ts b/dist/utils.d.ts
index 1049d83b18f43a35a07b7aa91e41dfabd28abdef..e4af04866db852b8ccf4b5153a1f08129290ceda 100644
--- a/dist/utils.d.ts
+++ b/dist/utils.d.ts
@@ -10,14 +10,6 @@ export declare const ESTIMATE_GAS_ERROR = "eth_estimateGas rpc method error";
  * @returns Normalized transaction params.
  */
 export declare function normalizeTxParams(txParams: TransactionParams): TransactionParams;
-/**
- * Validates the transaction params for required properties and throws in
- * the event of any validation error.
- *
- * @param txParams - Transaction params object to validate.
- * @param isEIP1559Compatible - whether or not the current network supports EIP-1559 transactions.
- */
-export declare function validateTxParams(txParams: TransactionParams, isEIP1559Compatible?: boolean): void;
 /**
  * Checks if a transaction is EIP-1559 by checking for the existence of
  * maxFeePerGas and maxPriorityFeePerGas within its parameters.
diff --git a/dist/utils.d.ts.map b/dist/utils.d.ts.map
deleted file mode 100644
index 01c0c6638685642ce82bda693b2fa2fbb06205a7..0000000000000000000000000000000000000000
--- a/dist/utils.d.ts.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"utils.d.ts","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"AAMA,OAAO,KAAK,EAAE,WAAW,IAAI,uBAAuB,EAAE,MAAM,iCAAiC,CAAC;AAE9F,OAAO,KAAK,EACV,aAAa,EACb,sBAAsB,EACvB,MAAM,yBAAyB,CAAC;AACjC,OAAO,EAAE,iBAAiB,EAAE,MAAM,SAAS,CAAC;AAC5C,OAAO,KAAK,EAAE,iBAAiB,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAElE,eAAO,MAAM,kBAAkB,qCAAqC,CAAC;AAmBrE;;;;;GAKG;AACH,wBAAgB,iBAAiB,CAAC,QAAQ,EAAE,iBAAiB,qBAS5D;AAED;;;;;;GAMG;AACH,wBAAgB,gBAAgB,CAC9B,QAAQ,EAAE,iBAAiB,EAC3B,mBAAmB,UAAO,QAyD3B;AAED;;;;;;GAMG;AACH,wBAAgB,oBAAoB,CAAC,QAAQ,EAAE,iBAAiB,GAAG,OAAO,CAOzE;AAED,eAAO,MAAM,iBAAiB,cACjB,aAAa,GAAG,sBAAsB,SAUlD,CAAC;AAEF,eAAO,MAAM,wBAAwB,eACvB,aAAa,GAAG,sBAAsB,wCAGuB,CAAC;AAE5E,eAAO,MAAM,eAAe,eACd,aAAa,GAAG,sBAAsB,+BAEE,CAAC;AAEvD,eAAO,MAAM,oBAAoB,UAAW,MAAM,QAAQ,MAAM,KAAG,MACF,CAAC;AAElE,eAAO,MAAM,6BAA6B,UACjC,MAAM,GAAG,SAAS,QACnB,MAAM,KACX,MAEF,CAAC;AAEF;;;;;;;GAOG;AACH,wBAAgB,uBAAuB,CAAC,QAAQ,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,UAQpE;AAED;;;;;;;GAOG;AACH,wBAAgB,uCAAuC,CACrD,WAAW,EAAE,MAAM,EACnB,iBAAiB,EAAE,iBAAiB,EACpC,YAAY,EAAE,eAAe,EAAE,GAC9B,uBAAuB,EAAE,CAsB3B;AAED;;;;;;GAMG;AACH,wBAAgB,+BAA+B,CAC7C,eAAe,EAAE,eAAe,GAAG,SAAS,EAC5C,MAAM,EAAE,MAAM,QAQf"}
\ No newline at end of file
diff --git a/dist/utils.js b/dist/utils.js
index 835d1e47a79dd5d8d088f9ec4fb35d014813ba1f..ff87b64fb67fc7226073196cea896b06d81021c1 100644
--- a/dist/utils.js
+++ b/dist/utils.js
@@ -1,8 +1,7 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.validateIfTransactionUnapproved = exports.getAndFormatTransactionsForNonceTracker = exports.validateMinimumIncrease = exports.getIncreasedPriceFromExisting = exports.getIncreasedPriceHex = exports.isGasPriceValue = exports.isFeeMarketEIP1559Values = exports.validateGasValues = exports.isEIP1559Transaction = exports.validateTxParams = exports.normalizeTxParams = exports.ESTIMATE_GAS_ERROR = void 0;
+exports.validateIfTransactionUnapproved = exports.getAndFormatTransactionsForNonceTracker = exports.validateMinimumIncrease = exports.getIncreasedPriceFromExisting = exports.getIncreasedPriceHex = exports.isGasPriceValue = exports.isFeeMarketEIP1559Values = exports.validateGasValues = exports.isEIP1559Transaction = exports.normalizeTxParams = exports.ESTIMATE_GAS_ERROR = void 0;
 const controller_utils_1 = require("@metamask/controller-utils");
-const rpc_errors_1 = require("@metamask/rpc-errors");
 const ethereumjs_util_1 = require("ethereumjs-util");
 const types_1 = require("./types");
 exports.ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';
@@ -37,52 +36,6 @@ function normalizeTxParams(txParams) {
     return normalizedTxParams;
 }
 exports.normalizeTxParams = normalizeTxParams;
-/**
- * Validates the transaction params for required properties and throws in
- * the event of any validation error.
- *
- * @param txParams - Transaction params object to validate.
- * @param isEIP1559Compatible - whether or not the current network supports EIP-1559 transactions.
- */
-function validateTxParams(txParams, isEIP1559Compatible = true) {
-    if (!txParams.from ||
-        typeof txParams.from !== 'string' ||
-        !(0, controller_utils_1.isValidHexAddress)(txParams.from)) {
-        throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "from" address: ${txParams.from} must be a valid string.`);
-    }
-    if (isEIP1559Transaction(txParams) && !isEIP1559Compatible) {
-        throw rpc_errors_1.rpcErrors.invalidParams('Invalid transaction params: params specify an EIP-1559 transaction but the current network does not support EIP-1559');
-    }
-    if (txParams.to === '0x' || txParams.to === undefined) {
-        if (txParams.data) {
-            delete txParams.to;
-        }
-        else {
-            throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "to" address: ${txParams.to} must be a valid string.`);
-        }
-    }
-    else if (txParams.to !== undefined && !(0, controller_utils_1.isValidHexAddress)(txParams.to)) {
-        throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "to" address: ${txParams.to} must be a valid string.`);
-    }
-    if (txParams.value !== undefined) {
-        const value = txParams.value.toString();
-        if (value.includes('-')) {
-            throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "value": ${value} is not a positive number.`);
-        }
-        if (value.includes('.')) {
-            throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "value": ${value} number must be denominated in wei.`);
-        }
-        const intValue = parseInt(txParams.value, 10);
-        const isValid = Number.isFinite(intValue) &&
-            !Number.isNaN(intValue) &&
-            !isNaN(Number(value)) &&
-            Number.isSafeInteger(intValue);
-        if (!isValid) {
-            throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "value": ${value} number must be a valid number.`);
-        }
-    }
-}
-exports.validateTxParams = validateTxParams;
 /**
  * Checks if a transaction is EIP-1559 by checking for the existence of
  * maxFeePerGas and maxPriorityFeePerGas within its parameters.
diff --git a/dist/utils.js.map b/dist/utils.js.map
deleted file mode 100644
index 013009a958e3d81146cdad86460848b4f2dc74de..0000000000000000000000000000000000000000
--- a/dist/utils.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  convertHexToDecimal,\n  isValidHexAddress,\n} from '@metamask/controller-utils';\nimport { rpcErrors } from '@metamask/rpc-errors';\nimport { addHexPrefix, isHexString } from 'ethereumjs-util';\nimport type { Transaction as NonceTrackerTransaction } from 'nonce-tracker/dist/NonceTracker';\n\nimport type {\n  GasPriceValue,\n  FeeMarketEIP1559Values,\n} from './TransactionController';\nimport { TransactionStatus } from './types';\nimport type { TransactionParams, TransactionMeta } from './types';\n\nexport const ESTIMATE_GAS_ERROR = 'eth_estimateGas rpc method error';\n\nconst NORMALIZERS: { [param in keyof TransactionParams]: any } = {\n  data: (data: string) => addHexPrefix(data),\n  from: (from: string) => addHexPrefix(from).toLowerCase(),\n  gas: (gas: string) => addHexPrefix(gas),\n  gasLimit: (gas: string) => addHexPrefix(gas),\n  gasPrice: (gasPrice: string) => addHexPrefix(gasPrice),\n  nonce: (nonce: string) => addHexPrefix(nonce),\n  to: (to: string) => addHexPrefix(to).toLowerCase(),\n  value: (value: string) => addHexPrefix(value),\n  maxFeePerGas: (maxFeePerGas: string) => addHexPrefix(maxFeePerGas),\n  maxPriorityFeePerGas: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n  estimatedBaseFee: (maxPriorityFeePerGas: string) =>\n    addHexPrefix(maxPriorityFeePerGas),\n  type: (type: string) => (type === '0x0' ? '0x0' : undefined),\n};\n\n/**\n * Normalizes properties on transaction params.\n *\n * @param txParams - The transaction params to normalize.\n * @returns Normalized transaction params.\n */\nexport function normalizeTxParams(txParams: TransactionParams) {\n  const normalizedTxParams: TransactionParams = { from: '' };\n  let key: keyof TransactionParams;\n  for (key in NORMALIZERS) {\n    if (txParams[key as keyof TransactionParams]) {\n      normalizedTxParams[key] = NORMALIZERS[key](txParams[key]) as never;\n    }\n  }\n  return normalizedTxParams;\n}\n\n/**\n * Validates the transaction params for required properties and throws in\n * the event of any validation error.\n *\n * @param txParams - Transaction params object to validate.\n * @param isEIP1559Compatible - whether or not the current network supports EIP-1559 transactions.\n */\nexport function validateTxParams(\n  txParams: TransactionParams,\n  isEIP1559Compatible = true,\n) {\n  if (\n    !txParams.from ||\n    typeof txParams.from !== 'string' ||\n    !isValidHexAddress(txParams.from)\n  ) {\n    throw rpcErrors.invalidParams(\n      `Invalid \"from\" address: ${txParams.from} must be a valid string.`,\n    );\n  }\n\n  if (isEIP1559Transaction(txParams) && !isEIP1559Compatible) {\n    throw rpcErrors.invalidParams(\n      'Invalid transaction params: params specify an EIP-1559 transaction but the current network does not support EIP-1559',\n    );\n  }\n\n  if (txParams.to === '0x' || txParams.to === undefined) {\n    if (txParams.data) {\n      delete txParams.to;\n    } else {\n      throw rpcErrors.invalidParams(\n        `Invalid \"to\" address: ${txParams.to} must be a valid string.`,\n      );\n    }\n  } else if (txParams.to !== undefined && !isValidHexAddress(txParams.to)) {\n    throw rpcErrors.invalidParams(\n      `Invalid \"to\" address: ${txParams.to} must be a valid string.`,\n    );\n  }\n\n  if (txParams.value !== undefined) {\n    const value = txParams.value.toString();\n    if (value.includes('-')) {\n      throw rpcErrors.invalidParams(\n        `Invalid \"value\": ${value} is not a positive number.`,\n      );\n    }\n\n    if (value.includes('.')) {\n      throw rpcErrors.invalidParams(\n        `Invalid \"value\": ${value} number must be denominated in wei.`,\n      );\n    }\n    const intValue = parseInt(txParams.value, 10);\n    const isValid =\n      Number.isFinite(intValue) &&\n      !Number.isNaN(intValue) &&\n      !isNaN(Number(value)) &&\n      Number.isSafeInteger(intValue);\n    if (!isValid) {\n      throw rpcErrors.invalidParams(\n        `Invalid \"value\": ${value} number must be a valid number.`,\n      );\n    }\n  }\n}\n\n/**\n * Checks if a transaction is EIP-1559 by checking for the existence of\n * maxFeePerGas and maxPriorityFeePerGas within its parameters.\n *\n * @param txParams - Transaction params object to add.\n * @returns Boolean that is true if the transaction is EIP-1559 (has maxFeePerGas and maxPriorityFeePerGas), otherwise returns false.\n */\nexport function isEIP1559Transaction(txParams: TransactionParams): boolean {\n  const hasOwnProp = (obj: TransactionParams, key: string) =>\n    Object.prototype.hasOwnProperty.call(obj, key);\n  return (\n    hasOwnProp(txParams, 'maxFeePerGas') &&\n    hasOwnProp(txParams, 'maxPriorityFeePerGas')\n  );\n}\n\nexport const validateGasValues = (\n  gasValues: GasPriceValue | FeeMarketEIP1559Values,\n) => {\n  Object.keys(gasValues).forEach((key) => {\n    const value = (gasValues as any)[key];\n    if (typeof value !== 'string' || !isHexString(value)) {\n      throw new TypeError(\n        `expected hex string for ${key} but received: ${value}`,\n      );\n    }\n  });\n};\n\nexport const isFeeMarketEIP1559Values = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is FeeMarketEIP1559Values =>\n  (gasValues as FeeMarketEIP1559Values)?.maxFeePerGas !== undefined ||\n  (gasValues as FeeMarketEIP1559Values)?.maxPriorityFeePerGas !== undefined;\n\nexport const isGasPriceValue = (\n  gasValues?: GasPriceValue | FeeMarketEIP1559Values,\n): gasValues is GasPriceValue =>\n  (gasValues as GasPriceValue)?.gasPrice !== undefined;\n\nexport const getIncreasedPriceHex = (value: number, rate: number): string =>\n  addHexPrefix(`${parseInt(`${value * rate}`, 10).toString(16)}`);\n\nexport const getIncreasedPriceFromExisting = (\n  value: string | undefined,\n  rate: number,\n): string => {\n  return getIncreasedPriceHex(convertHexToDecimal(value), rate);\n};\n\n/**\n * Validates that the proposed value is greater than or equal to the minimum value.\n *\n * @param proposed - The proposed value.\n * @param min - The minimum value.\n * @returns The proposed value.\n * @throws Will throw if the proposed value is too low.\n */\nexport function validateMinimumIncrease(proposed: string, min: string) {\n  const proposedDecimal = convertHexToDecimal(proposed);\n  const minDecimal = convertHexToDecimal(min);\n  if (proposedDecimal >= minDecimal) {\n    return proposed;\n  }\n  const errorMsg = `The proposed value: ${proposedDecimal} should meet or exceed the minimum value: ${minDecimal}`;\n  throw new Error(errorMsg);\n}\n\n/**\n * Helper function to filter and format transactions for the nonce tracker.\n *\n * @param fromAddress - Address of the account from which the transactions to filter from are sent.\n * @param transactionStatus - Status of the transactions for which to filter.\n * @param transactions - Array of transactionMeta objects that have been prefiltered.\n * @returns Array of transactions formatted for the nonce tracker.\n */\nexport function getAndFormatTransactionsForNonceTracker(\n  fromAddress: string,\n  transactionStatus: TransactionStatus,\n  transactions: TransactionMeta[],\n): NonceTrackerTransaction[] {\n  return transactions\n    .filter(\n      ({ status, txParams: { from } }) =>\n        status === transactionStatus &&\n        from.toLowerCase() === fromAddress.toLowerCase(),\n    )\n    .map(({ status, txParams: { from, gas, value, nonce } }) => {\n      // the only value we care about is the nonce\n      // but we need to return the other values to satisfy the type\n      // TODO: refactor nonceTracker to not require this\n      return {\n        status,\n        history: [{}],\n        txParams: {\n          from: from ?? '',\n          gas: gas ?? '',\n          value: value ?? '',\n          nonce: nonce ?? '',\n        },\n      };\n    });\n}\n\n/**\n * Validates that a transaction is unapproved.\n * Throws if the transaction is not unapproved.\n *\n * @param transactionMeta - The transaction metadata to check.\n * @param fnName - The name of the function calling this helper.\n */\nexport function validateIfTransactionUnapproved(\n  transactionMeta: TransactionMeta | undefined,\n  fnName: string,\n) {\n  if (transactionMeta?.status !== TransactionStatus.unapproved) {\n    throw new Error(\n      `Can only call ${fnName} on an unapproved transaction.\n      Current tx status: ${transactionMeta?.status}`,\n    );\n  }\n}\n"]}
\ No newline at end of file
diff --git a/dist/validation.d.ts b/dist/validation.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..e69dca1ce0b10c96287358c8c8aef7aa8f0d7a98
--- /dev/null
+++ b/dist/validation.d.ts
@@ -0,0 +1,20 @@
+import type { TransactionParams } from './types';
+/**
+ * Validates whether a transaction initiated by a specific 'from' address is permitted by the origin.
+ *
+ * @param permittedAddresses - The permitted accounts for the given origin.
+ * @param selectedAddress - The currently selected Ethereum address in the wallet.
+ * @param from - The address from which the transaction is initiated.
+ * @param origin - The origin or source of the transaction.
+ * @throws Throws an error if the transaction is not permitted.
+ */
+export declare function validateTransactionOrigin(permittedAddresses: string[], selectedAddress: string, from: string, origin: string): Promise<void>;
+/**
+ * Validates the transaction params for required properties and throws in
+ * the event of any validation error.
+ *
+ * @param txParams - Transaction params object to validate.
+ * @param isEIP1559Compatible - whether or not the current network supports EIP-1559 transactions.
+ */
+export declare function validateTxParams(txParams: TransactionParams, isEIP1559Compatible?: boolean): void;
+//# sourceMappingURL=validation.d.ts.map
\ No newline at end of file
diff --git a/dist/validation.js b/dist/validation.js
new file mode 100644
index 0000000000000000000000000000000000000000..e18a51ea46ff06610734a8ff11bd61e524e7f7fe
--- /dev/null
+++ b/dist/validation.js
@@ -0,0 +1,174 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.validateTxParams = exports.validateTransactionOrigin = void 0;
+const abi_1 = require("@ethersproject/abi");
+const controller_utils_1 = require("@metamask/controller-utils");
+const metamask_eth_abis_1 = require("@metamask/metamask-eth-abis");
+const rpc_errors_1 = require("@metamask/rpc-errors");
+const utils_1 = require("./utils");
+/**
+ * Validates whether a transaction initiated by a specific 'from' address is permitted by the origin.
+ *
+ * @param permittedAddresses - The permitted accounts for the given origin.
+ * @param selectedAddress - The currently selected Ethereum address in the wallet.
+ * @param from - The address from which the transaction is initiated.
+ * @param origin - The origin or source of the transaction.
+ * @throws Throws an error if the transaction is not permitted.
+ */
+function validateTransactionOrigin(permittedAddresses, selectedAddress, from, origin) {
+    return __awaiter(this, void 0, void 0, function* () {
+        if (origin === controller_utils_1.ORIGIN_METAMASK) {
+            // Ensure the 'from' address matches the currently selected address
+            if (from !== selectedAddress) {
+                throw rpc_errors_1.rpcErrors.internal({
+                    message: `Internally initiated transaction is using invalid account.`,
+                    data: {
+                        origin,
+                        fromAddress: from,
+                        selectedAddress,
+                    },
+                });
+            }
+            return;
+        }
+        // Check if the origin has permissions to initiate transactions from the specified address
+        if (!permittedAddresses.includes(from)) {
+            throw rpc_errors_1.providerErrors.unauthorized({ data: { origin } });
+        }
+    });
+}
+exports.validateTransactionOrigin = validateTransactionOrigin;
+/**
+ * Validates the transaction params for required properties and throws in
+ * the event of any validation error.
+ *
+ * @param txParams - Transaction params object to validate.
+ * @param isEIP1559Compatible - whether or not the current network supports EIP-1559 transactions.
+ */
+function validateTxParams(txParams, isEIP1559Compatible = true) {
+    validateEIP1559Compatibility(txParams, isEIP1559Compatible);
+    validateParamFrom(txParams.from);
+    validateParamRecipient(txParams);
+    validateParamValue(txParams.value);
+    validateParamData(txParams.data);
+    validateParamChainId(txParams.chainId);
+}
+exports.validateTxParams = validateTxParams;
+/**
+ * Validates EIP-1559 compatibility for transaction creation.
+ *
+ * @param txParams - The transaction parameters to validate.
+ * @param isEIP1559Compatible - Indicates if the current network supports EIP-1559.
+ * @throws Throws invalid params if the transaction specifies EIP-1559 but the network does not support it.
+ */
+function validateEIP1559Compatibility(txParams, isEIP1559Compatible) {
+    if ((0, utils_1.isEIP1559Transaction)(txParams) && !isEIP1559Compatible) {
+        throw rpc_errors_1.rpcErrors.invalidParams('Invalid transaction params: params specify an EIP-1559 transaction but the current network does not support EIP-1559');
+    }
+}
+/**
+ * Validates value property, ensuring it is a valid positive integer number
+ * denominated in wei.
+ *
+ * @param value - The value to validate, expressed as a string.
+ * @throws Throws an error if the value is not a valid positive integer
+ * number denominated in wei.
+ * - If the value contains a hyphen (-), it is considered invalid.
+ * - If the value contains a decimal point (.), it is considered invalid.
+ * - If the value is not a finite number, is NaN, or is not a safe integer, it is considered invalid.
+ */
+function validateParamValue(value) {
+    if (value !== undefined) {
+        if (value.includes('-')) {
+            throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "value": ${value} is not a positive number.`);
+        }
+        if (value.includes('.')) {
+            throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "value": ${value} number must be denominated in wei.`);
+        }
+        const intValue = parseInt(value, 10);
+        const isValid = Number.isFinite(intValue) &&
+            !Number.isNaN(intValue) &&
+            !isNaN(Number(value)) &&
+            Number.isSafeInteger(intValue);
+        if (!isValid) {
+            throw rpc_errors_1.rpcErrors.invalidParams(`Invalid "value": ${value} number must be a valid number.`);
+        }
+    }
+}
+/**
+ * Validates the recipient address in a transaction's parameters.
+ *
+ * @param txParams - The transaction parameters object to validate.
+ * @throws Throws an error if the recipient address is invalid:
+ * - If the recipient address is an empty string ('0x') or undefined and the transaction contains data,
+ * the "to" field is removed from the transaction parameters.
+ * - If the recipient address is not a valid hexadecimal Ethereum address, an error is thrown.
+ */
+function validateParamRecipient(txParams) {
+    if (txParams.to === '0x' || txParams.to === undefined) {
+        if (txParams.data) {
+            delete txParams.to;
+        }
+        else {
+            throw new Error(`Invalid "to" address: ${txParams.to} must be a valid string.`);
+        }
+    }
+    else if (txParams.to !== undefined && !(0, controller_utils_1.isValidHexAddress)(txParams.to)) {
+        throw new Error(`Invalid "to" address: ${txParams.to} must be a valid string.`);
+    }
+}
+/**
+ * Validates the recipient address in a transaction's parameters.
+ *
+ * @param from - The from property to validate.
+ * @throws Throws an error if the recipient address is invalid:
+ * - If the recipient address is an empty string ('0x') or undefined and the transaction contains data,
+ * the "to" field is removed from the transaction parameters.
+ * - If the recipient address is not a valid hexadecimal Ethereum address, an error is thrown.
+ */
+function validateParamFrom(from) {
+    if (!from || typeof from !== 'string' || !(0, controller_utils_1.isValidHexAddress)(from)) {
+        throw new Error(`Invalid "from" address: ${from} must be a valid string.`);
+    }
+}
+/**
+ * Validates input data for transactions.
+ *
+ * @param value - The input data to validate.
+ * @throws Throws invalid params if the input data is invalid.
+ */
+function validateParamData(value) {
+    if (value) {
+        const ERC20Interface = new abi_1.Interface(metamask_eth_abis_1.abiERC20);
+        try {
+            ERC20Interface.parseTransaction({ data: value });
+        }
+        catch (error) {
+            if (error.message.match(/BUFFER_OVERRUN/u)) {
+                throw rpc_errors_1.rpcErrors.invalidParams('Invalid transaction params: data out-of-bounds, BUFFER_OVERRUN.');
+            }
+        }
+    }
+}
+/**
+ * Validates chainId type.
+ *
+ * @param chainId - The chainId to validate.
+ */
+function validateParamChainId(chainId) {
+    if (chainId !== undefined &&
+        typeof chainId !== 'number' &&
+        typeof chainId !== 'string') {
+        throw rpc_errors_1.rpcErrors.invalidParams(`Invalid transaction params: chainId is not a Number or hex string. got: (${chainId})`);
+    }
+}
+//# sourceMappingURL=validation.js.map
\ No newline at end of file
