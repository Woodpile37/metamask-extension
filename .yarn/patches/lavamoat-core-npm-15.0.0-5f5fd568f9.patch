diff --git a/src/kernelCoreTemplate.js b/src/kernelCoreTemplate.js
index 8d3aaac3ce69412a703809b4a6bc41e03009816e..7d626813f6af28d09656f7acac70987c38eb0d80 100644
--- a/src/kernelCoreTemplate.js
+++ b/src/kernelCoreTemplate.js
@@ -70,6 +70,8 @@
     const { prepareCompartmentGlobalFromConfig } = templateRequire('makePrepareRealmGlobalFromConfig')({ createFunctionWrapper })
     const { strictScopeTerminator } = templateRequire('strict-scope-terminator')
 
+    // cache regular expressions to work around https://github.com/MetaMask/metamask-extension/issues/21006
+    const regexCache = new Map()
     const scuttleOpts = generateScuttleOpts(scuttleGlobalThis)
     const moduleCache = new Map()
     const packageCompartmentCache = new Map()
@@ -126,10 +128,15 @@
         if (!except.startsWith('/')) {
           return except
         }
+        if (regexCache.has(except)) {
+          return regexCache.get(except)
+        }
         const parts = except.split('/')
         const pattern = parts.slice(1, -1).join('/')
         const flags = parts[parts.length - 1]
-        return new RegExp(pattern, flags)
+        const re = new RegExp(pattern, flags)
+        regexCache.set(except, re)
+        return re
       }
     }
 
diff --git a/src/loadPolicy.js b/src/loadPolicy.js
index 78f69017cd97a8ce0d48e882c6271c877438a2bc..e598dfea85421a25c3a10cde6dae5b7d728e6b96 100644
--- a/src/loadPolicy.js
+++ b/src/loadPolicy.js
@@ -40,10 +40,9 @@ async function loadPolicyAndApplyOverrides({
       policyPath: policyOverridePath,
     })
     lavamoatPolicy = mergePolicy(policy, policyOverride)
-    // TODO: Only write if merge results in changes.
-    // Would have to make a deep equal check on whole policy, which is a waste of time.
-    // mergePolicy() should be able to do it in one pass.
-    fs.writeFileSync(policyPath, jsonStringify(lavamoatPolicy, { space: 2 }))
+    // Skip policy write step to prevent intermittent build failures
+    // The extension validates the policy in a separate step, we don't need it
+    // to be written to disk here.
   }
   return lavamoatPolicy
 }
diff --git a/src/sourceTransforms.js b/src/sourceTransforms.js
index 9b1524810574c207631823869a781c343adb197f..5c9a494345a4fe36dbfbd8f34e27b0402b4d0935 100644
--- a/src/sourceTransforms.js
+++ b/src/sourceTransforms.js
@@ -12,9 +12,11 @@ function applySourceTransforms(source) {
   ])
 }
 
+// create the RegExp once to avoid creating it over and over again
+// helps work around https://github.com/MetaMask/metamask-extension/issues/21006
+const someDirectEvalPattern = new RegExp('\\beval(\\s*\\()', 'g')
 function evadeDirectEvalExpressions(source) {
   /* eslint-disable-next-line prefer-regex-literals */
-  const someDirectEvalPattern = new RegExp('\\beval(\\s*\\()', 'g')
 
   const replaceFn = (_, p1) => `(0,eval)${p1}`
   return source.replace(someDirectEvalPattern, replaceFn)
