diff --git a/dist/UserOperationController.d.ts b/dist/UserOperationController.d.ts
index c9f9fe6818189ba5fb26887510b65eaef3283a22..bc32542e0d99003bb1e483af30d7b7916bceba17 100644
--- a/dist/UserOperationController.d.ts
+++ b/dist/UserOperationController.d.ts
@@ -3,6 +3,7 @@ import type { AddApprovalRequest } from '@metamask/approval-controller';
 import type { RestrictedControllerMessenger } from '@metamask/base-controller';
 import { BaseController } from '@metamask/base-controller';
 import type { GasFeeState } from '@metamask/gas-fee-controller';
+import type { KeyringControllerPrepareUserOperationAction, KeyringControllerPatchUserOperationAction, KeyringControllerSignUserOperationAction } from '@metamask/keyring-controller';
 import type { NetworkControllerGetNetworkClientByIdAction } from '@metamask/network-controller';
 import { type TransactionMeta, type TransactionParams, type TransactionType } from '@metamask/transaction-controller';
 import EventEmitter from 'events';
@@ -33,7 +34,7 @@ export declare type UserOperationStateChange = {
     type: `${typeof controllerName}:stateChange`;
     payload: [UserOperationControllerState, Patch[]];
 };
-export declare type UserOperationControllerActions = GetUserOperationState | NetworkControllerGetNetworkClientByIdAction | AddApprovalRequest;
+export declare type UserOperationControllerActions = GetUserOperationState | NetworkControllerGetNetworkClientByIdAction | AddApprovalRequest | KeyringControllerPrepareUserOperationAction | KeyringControllerPatchUserOperationAction | KeyringControllerSignUserOperationAction;
 export declare type UserOperationControllerEvents = UserOperationStateChange;
 export declare type UserOperationControllerMessenger = RestrictedControllerMessenger<typeof controllerName, UserOperationControllerActions, UserOperationControllerEvents, UserOperationControllerActions['type'], UserOperationControllerEvents['type']>;
 export declare type UserOperationControllerOptions = {
@@ -45,6 +46,7 @@ export declare type UserOperationControllerOptions = {
 };
 export declare type AddUserOperationRequest = {
     data?: string;
+    from: string;
     maxFeePerGas?: string;
     maxPriorityFeePerGas?: string;
     to?: string;
@@ -64,7 +66,7 @@ export declare type AddUserOperationOptions = {
     networkClientId: string;
     origin: string;
     requireApproval?: boolean;
-    smartContractAccount: SmartContractAccount;
+    smartContractAccount?: SmartContractAccount;
     swaps?: AddUserOperationSwapOptions;
     type?: TransactionType;
 };
@@ -102,7 +104,9 @@ export declare class UserOperationController extends BaseController<typeof contr
      * @param options.networkClientId - ID of the network client used to query the chain.
      * @param options.origin - Origin of the user operation, such as the hostname of a dApp.
      * @param options.requireApproval - Whether to require user approval before submitting the user operation. Defaults to true.
-     * @param options.smartContractAccount - Smart contract abstraction to provide the contract specific values such as call data and nonce.
+     * @param options.smartContractAccount - Smart contract abstraction to provide the contract specific values such as call data and nonce. Defaults to the current snap account.
+     * @param options.swaps - Swap metadata to record with the user operation.
+     * @param options.type - Type of the transaction.
      */
     addUserOperation(request: AddUserOperationRequest, options: AddUserOperationOptions): Promise<AddUserOperationResponse>;
     /**
@@ -113,7 +117,7 @@ export declare class UserOperationController extends BaseController<typeof contr
      * @param options.networkClientId - ID of the network client used to query the chain.
      * @param options.origin - Origin of the user operation, such as the hostname of a dApp.
      * @param options.requireApproval - Whether to require user approval before submitting the user operation. Defaults to true.
-     * @param options.smartContractAccount - Smart contract abstraction to provide the contract specific values such as call data and nonce.
+     * @param options.smartContractAccount - Smart contract abstraction to provide the contract specific values such as call data and nonce. Defaults to the current snap account.
      * @param options.swaps - Swap metadata to record with the user operation.
      * @param options.type - Type of the transaction.
      */
diff --git a/dist/UserOperationController.js b/dist/UserOperationController.js
index 740a09649c2cfc2fa2bb90e5db50cf898a96aff3..241533353969d0e3ccd82183265e081d2a6900ac 100644
--- a/dist/UserOperationController.js
+++ b/dist/UserOperationController.js
@@ -22,12 +22,13 @@ var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (
 var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
-var _UserOperationController_instances, _UserOperationController_entrypoint, _UserOperationController_getGasFeeEstimates, _UserOperationController_pendingUserOperationTracker, _UserOperationController_addUserOperation, _UserOperationController_prepareAndSubmitUserOperation, _UserOperationController_waitForConfirmation, _UserOperationController_createMetadata, _UserOperationController_prepareUserOperation, _UserOperationController_addPaymasterData, _UserOperationController_approveUserOperation, _UserOperationController_signUserOperation, _UserOperationController_submitUserOperation, _UserOperationController_failUserOperation, _UserOperationController_createEmptyUserOperation, _UserOperationController_updateMetadata, _UserOperationController_updateTransaction, _UserOperationController_addPendingUserOperationTrackerListeners, _UserOperationController_requestApproval, _UserOperationController_getTransactionType, _UserOperationController_getProvider, _UserOperationController_updateUserOperationAfterApproval, _UserOperationController_regenerateUserOperation;
+var _UserOperationController_instances, _UserOperationController_entrypoint, _UserOperationController_getGasFeeEstimates, _UserOperationController_pendingUserOperationTracker, _UserOperationController_addUserOperation, _UserOperationController_prepareAndSubmitUserOperation, _UserOperationController_waitForConfirmation, _UserOperationController_createMetadata, _UserOperationController_prepareUserOperation, _UserOperationController_addPaymasterData, _UserOperationController_approveUserOperation, _UserOperationController_signUserOperation, _UserOperationController_submitUserOperation, _UserOperationController_failUserOperation, _UserOperationController_createEmptyUserOperation, _UserOperationController_updateMetadata, _UserOperationController_deleteMetadata, _UserOperationController_updateTransaction, _UserOperationController_addPendingUserOperationTrackerListeners, _UserOperationController_requestApproval, _UserOperationController_getTransactionType, _UserOperationController_getProvider, _UserOperationController_updateUserOperationAfterApproval, _UserOperationController_regenerateUserOperation;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.UserOperationController = void 0;
 const base_controller_1 = require("@metamask/base-controller");
 const controller_utils_1 = require("@metamask/controller-utils");
 const eth_query_1 = __importDefault(require("@metamask/eth-query"));
+const rpc_errors_1 = require("@metamask/rpc-errors");
 const transaction_controller_1 = require("@metamask/transaction-controller");
 const ethereumjs_util_1 = require("ethereumjs-util");
 const events_1 = __importDefault(require("events"));
@@ -36,6 +37,7 @@ const uuid_1 = require("uuid");
 const constants_1 = require("./constants");
 const Bundler_1 = require("./helpers/Bundler");
 const PendingUserOperationTracker_1 = require("./helpers/PendingUserOperationTracker");
+const SnapSmartContractAccount_1 = require("./helpers/SnapSmartContractAccount");
 const logger_1 = require("./logger");
 const types_1 = require("./types");
 const gas_1 = require("./utils/gas");
@@ -95,7 +97,9 @@ class UserOperationController extends base_controller_1.BaseController {
      * @param options.networkClientId - ID of the network client used to query the chain.
      * @param options.origin - Origin of the user operation, such as the hostname of a dApp.
      * @param options.requireApproval - Whether to require user approval before submitting the user operation. Defaults to true.
-     * @param options.smartContractAccount - Smart contract abstraction to provide the contract specific values such as call data and nonce.
+     * @param options.smartContractAccount - Smart contract abstraction to provide the contract specific values such as call data and nonce. Defaults to the current snap account.
+     * @param options.swaps - Swap metadata to record with the user operation.
+     * @param options.type - Type of the transaction.
      */
     addUserOperation(request, options) {
         return __awaiter(this, void 0, void 0, function* () {
@@ -112,21 +116,24 @@ class UserOperationController extends base_controller_1.BaseController {
      * @param options.networkClientId - ID of the network client used to query the chain.
      * @param options.origin - Origin of the user operation, such as the hostname of a dApp.
      * @param options.requireApproval - Whether to require user approval before submitting the user operation. Defaults to true.
-     * @param options.smartContractAccount - Smart contract abstraction to provide the contract specific values such as call data and nonce.
+     * @param options.smartContractAccount - Smart contract abstraction to provide the contract specific values such as call data and nonce. Defaults to the current snap account.
      * @param options.swaps - Swap metadata to record with the user operation.
      * @param options.type - Type of the transaction.
      */
     addUserOperationFromTransaction(transaction, options) {
         return __awaiter(this, void 0, void 0, function* () {
             (0, validation_1.validateAddUserOperationOptions)(options);
-            const { data, maxFeePerGas, maxPriorityFeePerGas, to, value } = transaction;
-            return yield __classPrivateFieldGet(this, _UserOperationController_instances, "m", _UserOperationController_addUserOperation).call(this, {
+            const { data, from, maxFeePerGas, maxPriorityFeePerGas, to, value } = transaction;
+            const request = {
                 data: data === '' ? undefined : data,
+                from,
                 maxFeePerGas,
                 maxPriorityFeePerGas,
                 to,
                 value,
-            }, Object.assign(Object.assign({}, options), { transaction }));
+            };
+            (0, validation_1.validateAddUserOperationRequest)(request);
+            return yield __classPrivateFieldGet(this, _UserOperationController_instances, "m", _UserOperationController_addUserOperation).call(this, request, Object.assign(Object.assign({}, options), { transaction }));
         });
     }
     startPollingByNetworkClientId(networkClientId) {
@@ -137,13 +144,14 @@ exports.UserOperationController = UserOperationController;
 _UserOperationController_entrypoint = new WeakMap(), _UserOperationController_getGasFeeEstimates = new WeakMap(), _UserOperationController_pendingUserOperationTracker = new WeakMap(), _UserOperationController_instances = new WeakSet(), _UserOperationController_addUserOperation = function _UserOperationController_addUserOperation(request, options) {
     return __awaiter(this, void 0, void 0, function* () {
         (0, logger_1.projectLogger)('Adding user operation', { request, options });
-        const { networkClientId, origin, transaction, swaps } = options;
+        const { networkClientId, origin, smartContractAccount: requestSmartContractAccount, swaps, transaction, } = options;
         const { chainId, provider } = yield __classPrivateFieldGet(this, _UserOperationController_instances, "m", _UserOperationController_getProvider).call(this, networkClientId);
         const metadata = yield __classPrivateFieldGet(this, _UserOperationController_instances, "m", _UserOperationController_createMetadata).call(this, chainId, origin, transaction, swaps);
+        const smartContractAccount = requestSmartContractAccount !== null && requestSmartContractAccount !== void 0 ? requestSmartContractAccount : new SnapSmartContractAccount_1.SnapSmartContractAccount(this.messagingSystem);
         const cache = {
             chainId,
             metadata,
-            options,
+            options: Object.assign(Object.assign({}, options), { smartContractAccount }),
             provider,
             request,
             transaction,
@@ -253,7 +261,7 @@ _UserOperationController_entrypoint = new WeakMap(), _UserOperationController_ge
 }, _UserOperationController_prepareUserOperation = function _UserOperationController_prepareUserOperation(cache) {
     return __awaiter(this, void 0, void 0, function* () {
         const { chainId, metadata, options, provider, request, transaction } = cache;
-        const { data, to, value } = request;
+        const { data, from, to, value } = request;
         const { id, transactionParams, userOperation } = metadata;
         const { smartContractAccount } = options;
         (0, logger_1.projectLogger)('Preparing user operation', { id });
@@ -270,6 +278,7 @@ _UserOperationController_entrypoint = new WeakMap(), _UserOperationController_ge
         const response = yield smartContractAccount.prepareUserOperation({
             chainId,
             data,
+            from,
             to,
             value,
         });
@@ -348,6 +357,9 @@ _UserOperationController_entrypoint = new WeakMap(), _UserOperationController_ge
     };
     metadata.status = types_1.UserOperationStatus.Failed;
     __classPrivateFieldGet(this, _UserOperationController_instances, "m", _UserOperationController_updateMetadata).call(this, metadata);
+    if (String(rawError.code) === String(rpc_errors_1.errorCodes.provider.userRejectedRequest)) {
+        __classPrivateFieldGet(this, _UserOperationController_instances, "m", _UserOperationController_deleteMetadata).call(this, id);
+    }
 }, _UserOperationController_createEmptyUserOperation = function _UserOperationController_createEmptyUserOperation(transaction) {
     var _a, _b;
     return {
@@ -369,6 +381,10 @@ _UserOperationController_entrypoint = new WeakMap(), _UserOperationController_ge
         state.userOperations[id] = (0, lodash_1.cloneDeep)(metadata);
     });
     __classPrivateFieldGet(this, _UserOperationController_instances, "m", _UserOperationController_updateTransaction).call(this, metadata);
+}, _UserOperationController_deleteMetadata = function _UserOperationController_deleteMetadata(id) {
+    this.update((state) => {
+        delete state.userOperations[id];
+    });
 }, _UserOperationController_updateTransaction = function _UserOperationController_updateTransaction(metadata) {
     if (!metadata.transactionParams) {
         return;
diff --git a/dist/helpers/SnapSmartContractAccount.d.ts b/dist/helpers/SnapSmartContractAccount.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..e5c20171a4e1274639d7a6be760d3f4b898313a7
--- /dev/null
+++ b/dist/helpers/SnapSmartContractAccount.d.ts
@@ -0,0 +1,10 @@
+import type { PrepareUserOperationRequest, PrepareUserOperationResponse, SignUserOperationRequest, SignUserOperationResponse, SmartContractAccount, UpdateUserOperationRequest, UpdateUserOperationResponse } from '../types';
+import type { UserOperationControllerMessenger } from '../UserOperationController';
+export declare class SnapSmartContractAccount implements SmartContractAccount {
+    #private;
+    constructor(messenger: UserOperationControllerMessenger);
+    prepareUserOperation(request: PrepareUserOperationRequest): Promise<PrepareUserOperationResponse>;
+    updateUserOperation(request: UpdateUserOperationRequest): Promise<UpdateUserOperationResponse>;
+    signUserOperation(request: SignUserOperationRequest): Promise<SignUserOperationResponse>;
+}
+//# sourceMappingURL=SnapSmartContractAccount.d.ts.map
\ No newline at end of file
diff --git a/dist/helpers/SnapSmartContractAccount.js b/dist/helpers/SnapSmartContractAccount.js
new file mode 100644
index 0000000000000000000000000000000000000000..ad20431144fab136e37da7de9d91a62d4424dd08
--- /dev/null
+++ b/dist/helpers/SnapSmartContractAccount.js
@@ -0,0 +1,75 @@
+"use strict";
+var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
+    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
+    return new (P || (P = Promise))(function (resolve, reject) {
+        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
+        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
+        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
+        step((generator = generator.apply(thisArg, _arguments || [])).next());
+    });
+};
+var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
+    if (kind === "m") throw new TypeError("Private method is not writable");
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
+    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
+};
+var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
+    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
+};
+var _SnapSmartContractAccount_messenger;
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.SnapSmartContractAccount = void 0;
+const constants_1 = require("../constants");
+class SnapSmartContractAccount {
+    constructor(messenger) {
+        _SnapSmartContractAccount_messenger.set(this, void 0);
+        __classPrivateFieldSet(this, _SnapSmartContractAccount_messenger, messenger, "f");
+    }
+    prepareUserOperation(request) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const { data: requestData, from: sender, to: requestTo, value: requestValue, } = request;
+            const data = requestData !== null && requestData !== void 0 ? requestData : constants_1.EMPTY_BYTES;
+            const to = requestTo !== null && requestTo !== void 0 ? requestTo : constants_1.ADDRESS_ZERO;
+            const value = requestValue !== null && requestValue !== void 0 ? requestValue : constants_1.VALUE_ZERO;
+            const response = yield __classPrivateFieldGet(this, _SnapSmartContractAccount_messenger, "f").call('KeyringController:prepareUserOperation', sender, [{ data, to, value }]);
+            const { bundlerUrl: bundler, callData, dummyPaymasterAndData, dummySignature, gasLimits: gas, initCode, nonce, } = response;
+            return {
+                bundler,
+                callData,
+                dummyPaymasterAndData,
+                dummySignature,
+                gas,
+                initCode,
+                nonce,
+                sender,
+            };
+        });
+    }
+    updateUserOperation(request) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const { userOperation } = request;
+            const { sender } = userOperation;
+            const { paymasterAndData: responsePaymasterAndData } = yield __classPrivateFieldGet(this, _SnapSmartContractAccount_messenger, "f").call('KeyringController:patchUserOperation', sender, userOperation);
+            const paymasterAndData = responsePaymasterAndData === constants_1.EMPTY_BYTES
+                ? undefined
+                : responsePaymasterAndData;
+            return {
+                paymasterAndData,
+            };
+        });
+    }
+    signUserOperation(request) {
+        return __awaiter(this, void 0, void 0, function* () {
+            const { userOperation } = request;
+            const { sender } = userOperation;
+            const signature = yield __classPrivateFieldGet(this, _SnapSmartContractAccount_messenger, "f").call('KeyringController:signUserOperation', sender, userOperation);
+            return { signature };
+        });
+    }
+}
+exports.SnapSmartContractAccount = SnapSmartContractAccount;
+_SnapSmartContractAccount_messenger = new WeakMap();
+//# sourceMappingURL=SnapSmartContractAccount.js.map
\ No newline at end of file
diff --git a/dist/types.d.ts b/dist/types.d.ts
index 3021969d91887218d15db8d9748239058505e0ba..4698570c841c710ae5e7bcfcbefff63d108bc297 100644
--- a/dist/types.d.ts
+++ b/dist/types.d.ts
@@ -120,6 +120,8 @@ export declare type PrepareUserOperationRequest = {
     chainId: string;
     /** The data to include in the resulting transaction.  */
     data?: string;
+    /** Address of the account requesting the user operation. */
+    from: string;
     /** The destination address of the resulting transaction. */
     to?: string;
     /** The value to send in the resulting transaction. */
diff --git a/dist/utils/transaction.js b/dist/utils/transaction.js
index 1cf69b5f30655713b34fee84457ec8e529ceb20a..b045c83526f4432d8768108d9c7bbf48eb6311d8 100644
--- a/dist/utils/transaction.js
+++ b/dist/utils/transaction.js
@@ -12,7 +12,7 @@ const types_1 = require("../types");
  */
 function getTransactionMetadata(metadata) {
     var _a, _b, _c, _d, _e, _f, _g, _h, _j;
-    const { actualGasCost, actualGasUsed, baseFeePerGas, chainId, error: rawError, origin, transactionHash, id, swapsMetadata, time, transactionParams, transactionType, userFeeLevel, userOperation, } = metadata;
+    const { actualGasCost, actualGasUsed, baseFeePerGas, chainId, error: rawError, origin, transactionHash, id, swapsMetadata, time, transactionParams, transactionType, userFeeLevel: rawUserFeeLevel, userOperation, } = metadata;
     if (!transactionParams) {
         return undefined;
     }
@@ -62,6 +62,7 @@ function getTransactionMetadata(metadata) {
         swapMetaData: (_g = swapsMetadata === null || swapsMetadata === void 0 ? void 0 : swapsMetadata.swapMetaData) !== null && _g !== void 0 ? _g : undefined,
         swapTokenValue: (_h = swapsMetadata === null || swapsMetadata === void 0 ? void 0 : swapsMetadata.swapTokenValue) !== null && _h !== void 0 ? _h : undefined,
     };
+    const userFeeLevel = hasPaymaster ? transaction_controller_1.UserFeeLevel.CUSTOM : rawUserFeeLevel;
     return Object.assign({ baseFeePerGas: (_j = baseFeePerGas) !== null && _j !== void 0 ? _j : undefined, chainId: chainId, error, hash: transactionHash !== null && transactionHash !== void 0 ? transactionHash : undefined, id, isUserOperation: true, origin,
         status,
         time,
diff --git a/dist/utils/validation.js b/dist/utils/validation.js
index 5a8badbc198d98d820d86cd7c41495c2bdf43a45..a21835fe11cbae82e8a337c5f6e235d7ad8e83c2 100644
--- a/dist/utils/validation.js
+++ b/dist/utils/validation.js
@@ -14,8 +14,9 @@ function validateAddUserOperationRequest(request) {
     const HexOrEmptyBytes = defineHexOrEmptyBytes();
     const ValidRequest = (0, superstruct_1.object)({
         data: (0, superstruct_1.optional)(HexOrEmptyBytes),
-        maxFeePerGas: Hex,
-        maxPriorityFeePerGas: Hex,
+        from: Hex,
+        maxFeePerGas: (0, superstruct_1.optional)(Hex),
+        maxPriorityFeePerGas: (0, superstruct_1.optional)(Hex),
         to: (0, superstruct_1.optional)(Hex),
         value: (0, superstruct_1.optional)(Hex),
     });
@@ -31,11 +32,11 @@ function validateAddUserOperationOptions(options) {
         networkClientId: (0, superstruct_1.string)(),
         origin: (0, superstruct_1.string)(),
         requireApproval: (0, superstruct_1.optional)((0, superstruct_1.boolean)()),
-        smartContractAccount: (0, superstruct_1.object)({
+        smartContractAccount: (0, superstruct_1.optional)((0, superstruct_1.object)({
             prepareUserOperation: (0, superstruct_1.func)(),
             updateUserOperation: (0, superstruct_1.func)(),
             signUserOperation: (0, superstruct_1.func)(),
-        }),
+        })),
         swaps: (0, superstruct_1.optional)((0, superstruct_1.object)({
             approvalTxId: (0, superstruct_1.optional)((0, superstruct_1.string)()),
             destinationTokenAddress: (0, superstruct_1.optional)((0, superstruct_1.string)()),
